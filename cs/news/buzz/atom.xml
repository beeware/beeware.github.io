<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Buzz</title><link href="http://beeware.org/zh_TW/news/buzz/" rel="alternate"/><link href="http://beeware.org/cs/news/buzz/atom.xml" rel="self"/><id>urn:uuid:0f18b85e-c1d4-3086-935d-f801edebea16</id><updated>2025-08-01T00:00:00Z</updated><author><name/></author><subtitle>BeeWare 官方部落格</subtitle><entry><title>July 2025 Status Update</title><link href="http://beeware.org/news/buzz/july-2025-status-update/" rel="alternate"/><updated>2025-08-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:79564a10-3974-3f5e-9334-92e3db85af5c</id><content type="html">&lt;p&gt;In July, BeeWare hit some more major milestones in our work on mobile packaging - but we also found time to make some improvements to other parts of BeeWare.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We attended &lt;a href="https://ep2025.europython.eu"&gt;EuroPython&lt;/a&gt;, where we gave a tutorial and a talk, attended the WebAssembly summit, and ran a sprint - at which we gave out 25 BeeWare challenge coins to first-time contributors.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/cibuildwheel/3.1.0/"&gt;cibuildwheel 3.1&lt;/a&gt; has been released - which includes support for building Android wheels! As a result, we've been able to submit a pull request for &lt;a href="https://github.com/amitdev/lru-dict/pull/74"&gt;lru-dict&lt;/a&gt;; we're expecting to submit Android support PRs for other projects in the coming months.&lt;/li&gt;
&lt;li&gt;We started the process of &lt;a href="https://github.com/python/cpython/pull/137186"&gt;adding Android builds to CPython's CI&lt;/a&gt;. This also means we're in a position to &lt;a href="https://github.com/python/release-tools/pull/265"&gt;generate Android release artefacts as part of the release process&lt;/a&gt; - possibly as soon as Python 3.14.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://buildbot.python.org/#/builders/1810"&gt;Emscripten buildbot is now passing all tests&lt;/a&gt;! This formally &lt;a href="https://peps.python.org/pep-0011/#tier-3"&gt;restores Emscripten to the Tier-3 support level&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pillow/11.3.0/#files"&gt;Pillow 11.3.0&lt;/a&gt; has been released, including official iOS wheels. &lt;/li&gt;
&lt;li&gt;We submited a pull request to add &lt;a href="https://github.com/numpy/numpy/pull/28759"&gt;iOS support for NumPy&lt;/a&gt;. This PR is waiting on a release of &lt;code&gt;meson-python&lt;/code&gt; before it can be submitted for review, but it is passing the NumPy test suite.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/pull/2355"&gt;Briefcase has been updated to use WiX 5.0&lt;/a&gt;. This enabled us to resolve a number of issues related to MSI support, including resolving an issue with &lt;a href="https://github.com/beeware/briefcase/pull/2390"&gt;long file names in packaged content&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We added support for &lt;a href="https://github.com/beeware/briefcase/pull/2369"&gt;port forwarding when running Android apps&lt;/a&gt;. This will be used as part of adding debugger support to Briefcase.&lt;/li&gt;
&lt;li&gt;We added a new &lt;a href="https://github.com/beeware/briefcase/pull/2360"&gt;topic guide on publishing apps to the macOS App Store&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We improved a number of error messages generated by Briefcase, providing more guidance on &lt;a href="https://github.com/beeware/briefcase/pull/2410"&gt;how to run an iOS app on device&lt;/a&gt;, &lt;a href="https://github.com/beeware/briefcase/pull/2400"&gt;problems that can be caused by virus scanners&lt;/a&gt;, and how to resolve &lt;a href="https://github.com/beeware/briefcase/pull/2397"&gt;inconsistent file content in macOS wheels&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We reviewed our contribution guides for &lt;a href="https://github.com/beeware/briefcase/pull/2363"&gt;Briefcase&lt;/a&gt; and &lt;a href="https://github.com/beeware/toga/pull/3597"&gt;Toga&lt;/a&gt; to remove inconsistencies in the contribution experience.&lt;/li&gt;
&lt;li&gt;We added a &lt;a href="https://github.com/beeware/toga/pull/3647"&gt;DateInput widget to Toga's GTK backend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3638"&gt;completed a review of Toga's example code to ensure that they all run without warnings, and use the current preferred syntax for describing styles&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3648"&gt;corrected the naming of the wheel for Toga's Winforms backend&lt;/a&gt; to reflect that it contains a platform-specific binary.&lt;/li&gt;
&lt;li&gt;We added &lt;a href="https://github.com/beeware/toga/pull/3631"&gt;a shorthand property for defining all the features of a widget's font in one declaration&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3665"&gt;simplified Toga's color representations to be better aligned with CSS color interpretations&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3569"&gt;refactored Toga's font handling&lt;/a&gt; so that font loading logic (and, in particular, error handling) is consistent across platforms.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;With cibuildwheel now supporting both iOS and Android, our work on binary packaging can now shift fully to the upstream projects that will use cibuildwheel to produce wheels. Over the coming months, we expect to submit PRs to more upstream projects; we're also planning to look at packaging that &lt;em&gt;doesn't&lt;/em&gt; use cibuildwheel (such as Rust-based packages that use Maturin for packaging). We're also going to start documenting what we've learned about binary packaging for iOS and Android, so that the wider community can start contributing iOS and Android recipes.&lt;/p&gt;
&lt;p&gt;We're also going to continue the process of integrating the production of iOS and Android binary artefacts into Python's CI and release processes. We've already begun this process for Android; iOS requires a little more preparatory work, which will be a major area of focus in August.&lt;/p&gt;
&lt;p&gt;Lastly, we're planning to look at adding post-install scripts to Briefcase installers. We'll be focussing on Windows installers initially; but the intention is that any changes we implement could also be implemented on macOS or Linux.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? We curate issues that should be approachable for first-time contributors to BeeWare. They're all relatively minor changes, but would provide a big improvement to the lives of BeeWare users:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you're interested in the tooling for deploying applications to various platforms, take a look at &lt;a href="https://github.com/beeware/briefcase/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22good%20first%20issue%22"&gt;Briefcase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Or, if you're interested in GUI widgets, take a look at &lt;a href="https://github.com/beeware/toga/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22good%20first%20issue%22"&gt;Toga&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These lists can also be filtered by platform - so you can find issues that are specific to your preferred operating system. Pick one of these tickets, drop a comment on the ticket to let others know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide on setting up a Briefcase development environment&lt;/a&gt;; but if you need any additional assistance or guidance, you can ask on the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>2025Q3 Roadmap</title><link href="http://beeware.org/news/buzz/2025q3-roadmap/" rel="alternate"/><updated>2025-07-02T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:e98c2412-7688-33b2-9661-00e8e3d26858</id><content type="html">&lt;p&gt;In Q2, BeeWare reached some public milestones in our iOS binary packaging, and saw some unexpected improvements in our documentation and website. As always, this roadmap should be read as a guide to what we aim to focus on over the coming quarter, rather than a hard commitment of features that will be made available on a specific deadline.&lt;/p&gt;
&lt;h2&gt;Q2 progress&lt;/h2&gt;
&lt;p&gt;In Q2, we continued to make progress on the state of binary packaging for iOS and Android. cibuildwheel 3.0 has now been released, incorporating the iOS support that we contributed; as a result, we've been able to start the process of submitting patches to Python projects to add iOS support. We're still waiting on a formal release of meson and meson-python that includes the iOS changes that we provided; once those releases occur, we'll be able to submit patches for even more projects. We also continued to work on supporting Android in cibuildwheel. This work is still in the review phase; we're hoping it will be concluded in the near future.&lt;/p&gt;
&lt;p&gt;A CPython buildbot for Emscripten is now live. The process of launching this buildbot revealed a number of bugs that required resolution; a small number of bugs still remain. We don't anticipate any issue resolving these before the 3.14.0 final release. The draft PEPs defining the Emscripten platform (PEP 776) and Emscripten wheel tagging (PEP 783) have not seen any major progress.&lt;/p&gt;
&lt;p&gt;Our students from Curtin University have concluded their first semester of work, providing implementations for a range of Toga widgets on the web platform, finding (and resolving) a number of bugs along the way. They've also made a number of small improvements to Briefcase. As part of their work, they've laid out plans for more substantial contributions in the second half of the year. These contributions should result in significant improvements to the development experience for Toga's web backend.&lt;/p&gt;
&lt;p&gt;We also saw a lot of unexpected improvements in BeeWare's documentation and website. We now have a much improved translation infrastructure for BeeWare's website. A significant review of the structure of the documentation of the major BeeWare projects is also underway, addressing both visual consistency, and the integration of the documentation projects into the overall web presence of the BeeWare project.&lt;/p&gt;
&lt;p&gt;Lastly, we had a successful PyCon US attendance, presenting multiple talks, a tutorials, and introducing a large number of people to Open Source contribution through the sprints.&lt;/p&gt;
&lt;h2&gt;Q3 priorities&lt;/h2&gt;
&lt;p&gt;In Q3, we will have two major areas of focus for BeeWare development.&lt;/p&gt;
&lt;p&gt;The first, unsurprisingly, is to continue working on binary packaging. We'll continue working on the cibuildwheel patch to support building Android wheels; and we'll continue the process of submitting patches for iOS support to notable packages. Some of this work is dependent on formal releases of meson and meson-python; we'll progress as fast as the published state of the ecosystem allows.&lt;/p&gt;
&lt;p&gt;The second area of focus is generating iOS and Android binary artefacts as part of the CPython release process. This will hopefully also involve integrating iOS and Android into CPython's pre-merge CI tooling, which should limit the incidence of changes that are landed into CPython that break iOS and Android.&lt;/p&gt;
&lt;p&gt;We'll also be attending EuroPython in July; PyCon AU, CPython core team summit and PyCon UK in September. These are important events for community outreach and for collaboration with other projects and the core team - but they'll obviously place constraints on the progress we make in the quarter.&lt;/p&gt;
&lt;h2&gt;Longer term goals&lt;/h2&gt;
&lt;p&gt;The long term goals of BeeWare remain largely the same. Once we've developed a compelling story for mobile binary packaging, we'll be able to turn our focus back to Toga. There's a number of navigation and data organization widgets that need to be developed; we also need to improve documentation of some common development patterns that are sources of common questions in BeeWare support channels. Unless pull requests are submitted from the broader community, it is unlikely that we'll make any substantial progress on this front until the end of this year, or perhaps early next year.&lt;/p&gt;
&lt;p&gt;We're also intending to look at tooling other than &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;venv&lt;/code&gt; for building Briefcase packages. Integration with Conda is one obvious goal, as it provides rich tooling for distributing complex binary requirements. &lt;code&gt;uv&lt;/code&gt; is another tool that might fit well in the Briefcase development story. Again, it is unlikely that we'll make any progress on this front before the end of this year.&lt;/p&gt;
</content></entry><entry><title>June 2025 Status Update</title><link href="http://beeware.org/news/buzz/june-2025-status-update/" rel="alternate"/><updated>2025-07-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:f5f7d9b7-ca61-3061-b007-eb6de01b34b4</id><content type="html">&lt;p&gt;June has been a busy month, with some big improvements to BeeWare's websites and documentation, and some major milestones reached in our work on mobile packaging.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/cibuildwheel/3.0.0/"&gt;cibuildwheel 3.0&lt;/a&gt; has been released - including iOS support! As a result, we've been able to submit pull requests for &lt;a href="https://github.com/amitdev/lru-dict/pull/73"&gt;lru-dict&lt;/a&gt; and &lt;a href="https://github.com/python-pillow/Pillow/pull/9030"&gt;Pillow&lt;/a&gt;, proposing the addition of iOS support. Work on &lt;a href="https://github.com/pypa/cibuildwheel/pull/2349"&gt;adding Android support&lt;/a&gt; is still underway.&lt;/li&gt;
&lt;li&gt;An &lt;a href="https://buildbot.python.org/#/builders/1810"&gt;Emscripten CPython buildbot is now live&lt;/a&gt;! The buildbot is currently failing 2 tests; but having a buildbot &lt;em&gt;at all&lt;/em&gt; is a major step towards restoring Tier-3 support, and will help detect regressions on Emscripten as a platform.&lt;/li&gt;
&lt;li&gt;We've started a big review of the structure of our documentation, with a view to resolving a number of inconsistencies between platforms. This review will also involve a visual refresh, making BeeWare docs have a style consistent with the homepage; and improvements to how the documentation for BeeWare's individual projects fit into the overall BeeWare website. &lt;/li&gt;
&lt;li&gt;We added &lt;a href="https://github.com/beeware/briefcase/pull/2336"&gt;iCloud detection to Briefcase&lt;/a&gt;. iCloud Drive synchronisation adds metadata to some folders that prevents signing infrastructure from working; this has been a recurring source of problems during tutorials.&lt;/li&gt;
&lt;li&gt;We massively &lt;a href="https://github.com/beeware/briefcase/pull/2284"&gt;improved file type associations for macOS&lt;/a&gt;. Briefcase previously supported macOS file associations, but expressed some very specific opinions on how files would be used. With these new improvements, it should be possible to support almost any macOS file type association requirements that an application might have.&lt;/li&gt;
&lt;li&gt;We modified Briefcase so &lt;a href="https://github.com/beeware/briefcase/pull/2333"&gt;it can package, sign and notarise applications that weren't built with Briefcase&lt;/a&gt;. We've spent a lot of time automating the processes for building installers, and for managing signing and notarization - and almost none of that work depends on using Briefcase to build the app being packaged. With these modifications, you can now point Briefcase at an app that was built with a different tool, and Briefcase will manage the packaging and signing that is required.&lt;/li&gt;
&lt;li&gt;We've started the process of &lt;a href="https://github.com/beeware/briefcase/pull/2355"&gt;upgrading Briefcase to use a newer version of WiX for Windows MSI packaging&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We added a &lt;a href="https://github.com/beeware/toga/pull/3527"&gt;Slider widget to the Web backend&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We added a DateInput widget to the &lt;a href="https://github.com/beeware/toga/pull/3483"&gt;iOS&lt;/a&gt; and &lt;a href="https://github.com/beeware/toga/pull/3574"&gt;macOS&lt;/a&gt; backends.&lt;/li&gt;
&lt;li&gt;We added a TimeInput widget to the &lt;a href="https://github.com/beeware/toga/pull/3536"&gt;iOS&lt;/a&gt; and &lt;a href="https://github.com/beeware/toga/pull/3574"&gt;macOS&lt;/a&gt; backends.&lt;/li&gt;
&lt;li&gt;We added an &lt;a href="https://github.com/beeware/toga/pull/3473"&gt;ActivityIndicator widget to the WinForms backend&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We modified the handling of Toga app paths so that &lt;a href="https://github.com/beeware/toga/pull/3543"&gt;requesting a path guarantees that it exists&lt;/a&gt;. This is a significant improvement to user experience, as it's no longer necessary to "check and create" every time you access an app path.&lt;/li&gt;
&lt;li&gt;We resolved a long-standing instability in the macOS and iOS testbed app that &lt;a href="https://github.com/beeware/toga/pull/3557"&gt;caused intermittent failures in the WebView tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We added a new &lt;a href="https://github.com/beeware/toga/pull/3552"&gt;topic guide on managing file system access in Toga apps&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We modified the handling of font specifications in Toga apps. You can now provide &lt;a href="https://github.com/beeware/toga/pull/3526"&gt;a list of fonts&lt;/a&gt;, as you would in CSS, and the first available font in that list will be used.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3570"&gt;corrected a number of issues with document-based apps&lt;/a&gt;. This was detected while upgrading Podium, BeeWare's slide presentation tool, to use a recent version of Toga.&lt;/li&gt;
&lt;li&gt;Our Curtin students &lt;a href="https://beeware.org/news/buzz/2025-curtin-capstone-semester-end-blog/"&gt;delivered their mid-year report&lt;/a&gt; - including plans for the work they're intending to complete in the second half of the year.&lt;/li&gt;
&lt;li&gt;We completed the process of migrating BeeWare's core projects to use Ruff, rather than a combination of flake8, sort, pyupgrade, and more.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;With the public release of cibuildwheel 3.0, we've been able to start submitting pull requests upstream for projects to officially support iOS. In July, we'll continue that work, with the aim of having some official iOS wheels for major projects that &lt;em&gt;aren't&lt;/em&gt; published by BeeWare. We'll also continue working on adding Android support to cibuildwheel, with the hope that it will be included in version 3.1.&lt;/p&gt;
&lt;p&gt;We're also hoping to start the process of integrating the production of iOS and Android binary artefacts into Python releases. This will hopefully also involve integrating iOS and Android into CPython's pre-merge CI tooling, which will hopefully limit the incidence of changes that are landed into CPython that break iOS and Android.&lt;/p&gt;
&lt;p&gt;We'll also be attending EuroPython, where we will be &lt;a href="https://ep2025.europython.eu/session/building-a-cross-platform-app-with-beeware"&gt;giving a tutorial&lt;/a&gt;, attending the &lt;a href="https://ep2025.europython.eu/session/webassembly-summit"&gt;WebAssembly summit&lt;/a&gt;, and &lt;a href="https://ep2025.europython.eu/sprints/"&gt;running a BeeWare sprint&lt;/a&gt;. If you can make it  to Prague in July, &lt;a href="https://ep2025.europython.eu/tickets/"&gt;tickets are still available&lt;/a&gt; - we hope to see you there!&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? We curate issues that should be approachable for first-time contributors to BeeWare. They're all relatively minor changes, but would provide a big improvement to the lives of BeeWare users:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you're interested in the tooling for deploying applications to various platforms, take a look at &lt;a href="https://github.com/beeware/briefcase/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22good%20first%20issue%22"&gt;Briefcase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Or, if you're interested in GUI widgets, take a look at &lt;a href="https://github.com/beeware/toga/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22good%20first%20issue%22"&gt;Toga&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These lists can also be filtered by platform - so you can find issues that are specific to your preferred operating system. Pick one of these tickets, drop a comment on the ticket to let others know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide on setting up a Briefcase development environment&lt;/a&gt;; but if you need any additional assistance or guidance, you can ask on the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>2025 Curtin University Capstone Project</title><link href="http://beeware.org/news/buzz/2025-curtin-capstone-semester-end-blog/" rel="alternate"/><updated>2025-06-13T00:00:00Z</updated><author><name>Curtin Capstone Team</name></author><id>urn:uuid:5f58a655-292a-3332-b3ae-b0daf706f448</id><content type="html">&lt;p&gt;Over the past semester, a team of final year students from &lt;a href="https://www.curtin.edu.au"&gt;Curtin University&lt;/a&gt; has been collaborating with the BeeWare Project as part of a capstone project for their degrees. Here's a summary of what they've done so far this semester, and what they have planned for the rest of the year.&lt;/p&gt;
&lt;h2&gt;Curtin Capstone&lt;/h2&gt;
&lt;p&gt;Capstone is the final year project undertaken by students across all computing disciplines at Curtin University, including Computer Science, Software Engineering, Cyber Security, and Information Technology. It allows students the opportunity to work in teams on real-world projects in collaboration with industry partners, gaining practical experience and professional exposure before graduating.&lt;/p&gt;
&lt;p&gt;This year our team has had the exciting opportunity to contribute to BeeWare for our Capstone project.&lt;/p&gt;
&lt;p&gt;Meet the Team:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kavidu Abeykoon Mudiyanselagedara (&lt;a href="https://github.com/kavi2du"&gt;kavi2du&lt;/a&gt;); Information Technology&lt;/li&gt;
&lt;li&gt;Callum Horton (&lt;a href="https://github.com/Stringer90"&gt;Stringer90&lt;/a&gt;); Software Engineering&lt;/li&gt;
&lt;li&gt;Caydn Lee (&lt;a href="https://github.com/caydnn"&gt;caydnn&lt;/a&gt;); Software Engineering&lt;/li&gt;
&lt;li&gt;Jaeden Mah (&lt;a href="https://github.com/JMah007"&gt;JMah007&lt;/a&gt;); Computer Science&lt;/li&gt;
&lt;li&gt;Mitchell Pontague (&lt;a href="https://github.com/mEp3ii2"&gt;mEp3ii2&lt;/a&gt;); Software Engineering&lt;/li&gt;
&lt;li&gt;Veronica Taniputra (&lt;a href="https://github.com/vt37"&gt;vt37&lt;/a&gt;); Cyber Security &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What We’ve Worked On&lt;/h2&gt;
&lt;p&gt;This year, our primary focus has been on improving Toga’s Web backend and enhancing Briefcase’s support for that backend.&lt;/p&gt;
&lt;p&gt;Throughout the first semester, our team has been focused on contributing to issues on Briefcase and Toga while working on our research to prepare for what is to come in the following semester. We’ve also worked on implementing several of the Toga Web widgets to enhance functionality on the web backend before working on the web test suite for next semester.&lt;/p&gt;
&lt;p&gt;We were first tasked with contributing to a first timer issue before moving on to other more advanced issues.&lt;/p&gt;
&lt;h3&gt;Briefcase Contributions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PR &lt;a href="https://github.com/beeware/briefcase/pull/2198"&gt;#2198&lt;/a&gt;: Add boolean question (feature)&lt;/li&gt;
&lt;li&gt;PR &lt;a href="https://github.com/beeware/briefcase/pull/2203"&gt;#2103&lt;/a&gt;: Add XML content escaping filter to cookiecutter.py (feature)&lt;/li&gt;
&lt;li&gt;PR &lt;a href="https://github.com/beeware/briefcase/pull/2199"&gt;#2199&lt;/a&gt;: Add catch exception when deleting JDK (bugfix)&lt;/li&gt;
&lt;li&gt;PR &lt;a href="https://github.com/beeware/briefcase/pull/2229"&gt;#2229&lt;/a&gt;: Accept other changelog name and extension (feature)&lt;/li&gt;
&lt;li&gt;PR &lt;a href="https://github.com/beeware/briefcase/pull/2201"&gt;#2201&lt;/a&gt;: Add &lt;code&gt;--app&lt;/code&gt; option to briefcase build/package (feature)&lt;/li&gt;
&lt;li&gt;PR &lt;a href="https://github.com/beeware/briefcase/pull/2214"&gt;#2214&lt;/a&gt;: Add &lt;code&gt;--app&lt;/code&gt; option to briefcase create/update (feature)&lt;/li&gt;
&lt;li&gt;PR &lt;a href="https://github.com/beeware/briefcase/pull/2236"&gt;#2236&lt;/a&gt;: Normalise contribution docs with Toga (documentation)&lt;/li&gt;
&lt;li&gt;PR &lt;a href="https://github.com/beeware/briefcase-windows-VisualStudio-template/pull/54"&gt;#54&lt;/a&gt;: Use XML content escaping filter to Visual Studio template. (bugfix) (work in progress)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Toga Contributions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PR &lt;a href="https://github.com/beeware/toga/pull/3259"&gt;#3259&lt;/a&gt;: Add web screenshots (documentation)&lt;/li&gt;
&lt;li&gt;PR &lt;a href="https://github.com/beeware/toga/pull/3466"&gt;#3466&lt;/a&gt;: Fix button click handling in Toga Web backend to correctly trigger event (bugfix)&lt;/li&gt;
&lt;li&gt;PR &lt;a href="https://github.com/beeware/toga/pull/3338"&gt;#3338&lt;/a&gt;: DateInput (web widget)&lt;/li&gt;
&lt;li&gt;PR &lt;a href="https://github.com/beeware/toga/pull/3405"&gt;#3405&lt;/a&gt;: TimeInput (web widget)&lt;/li&gt;
&lt;li&gt;PR &lt;a href="https://github.com/beeware/toga/pull/3362"&gt;#3362&lt;/a&gt;: ScrollContainer (web widget)&lt;/li&gt;
&lt;li&gt;PR &lt;a href="https://github.com/beeware/toga/pull/3425"&gt;#3425&lt;/a&gt;: Table (web widget) (work in progress)&lt;/li&gt;
&lt;li&gt;PR &lt;a href="https://github.com/beeware/toga/pull/3402"&gt;#3402&lt;/a&gt;: Selection (web widget)&lt;/li&gt;
&lt;li&gt;PR &lt;a href="https://github.com/beeware/toga/pull/3527"&gt;#3527&lt;/a&gt;: Slider (web widget)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What We're Working Towards&lt;/h2&gt;
&lt;p&gt;Now that we’re more familiar with the BeeWare ecosystem, through both our initial PRs and widget implementations, and having concluded our Semester 1 research phase, we’re shifting our focus to larger, more structural improvements for the second half of the project.&lt;/p&gt;
&lt;p&gt;Our primary goals moving forward include:&lt;/p&gt;
&lt;h3&gt;Toga Web Testing&lt;/h3&gt;
&lt;p&gt;Toga does not currently support testing for the web platform as the test suite and testbed app run multithreaded in the same process. The web platform is incompatible with this as WebAssembly does not support multithreading. To address this, we are working on developing a general approach that allows the test suite and testbed app to run in separate processes. This will include using proxy objects in place of Toga objects in the test suite that will wrap the respective object in the testbed app, forwarding commands to it in order to change its state and retrieve data.&lt;/p&gt;
&lt;p&gt;Additionally, to verify the rendered state of the testbed app, we plan to use Playwright to inspect the browser's DOM and compare it against what the test suite expects. This setup should allow the web platform to be effectively tested while still using the existing test suite.&lt;/p&gt;
&lt;p&gt;More technical details and discussion can be found in our &lt;a href="https://github.com/beeware/toga/discussions/3440"&gt;Discussion Post&lt;/a&gt; on Toga and the associated &lt;a href="https://github.com/beeware/toga/issues/3545"&gt;Issue Ticket&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;PyScript Briefcase and Toga Dependencies&lt;/h3&gt;
&lt;p&gt;During Mitchell’s development of the DateInput Web Widget, we discovered some issues resulting from how PyScript APIs were being used. This issue was resolved separately but sparked broader discussions about the ownership of PyScript, Shoelace, and Bootstrap within the wider BeeWare architecture. Currently, the Briefcase web template includes these directly in &lt;code&gt;index.html&lt;/code&gt;, but they should ideally be managed as dependencies of Toga.&lt;/p&gt;
&lt;p&gt;We’re proposing to shift ownership of these dependencies to Toga and other toolkits, enabling them to define their own configurations and inserts while keeping Briefcase focused purely on packaging. This would allow for clearer version control, better modularity, and easier maintenance across the ecosystem. This approach builds on prior work (&lt;a href="https://github.com/beeware/briefcase/pull/1285"&gt;briefcase#1285&lt;/a&gt;, &lt;a href="https://github.com/beeware/toga/pull/1945"&gt;toga#1945&lt;/a&gt; and &lt;a href="https://github.com/beeware/briefcase-web-static-template/pull/9"&gt;briefcase-web-static-template#9&lt;/a&gt;) and introduces a mechanism for toolkit-managed inserts and configuration. We plan on reviving parts of these to allow for Toga to specify PyScript versioning.&lt;/p&gt;
&lt;p&gt;More technical details and discussion can be found in our &lt;a href="https://github.com/beeware/briefcase/discussions/2283"&gt;Discussion Post&lt;/a&gt; on Briefcase and the associated &lt;a href="https://github.com/beeware/briefcase/issues/2337"&gt;Issue Ticket&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Briefcase Web Development Optimisations&lt;/h3&gt;
&lt;p&gt;While contributing to Toga's web widgets, we noticed that testing even small changes requires rebuilding all project wheels (with &lt;code&gt;briefcase run web -r -u&lt;/code&gt;), which can take a significant amount of time. This makes local development slow and interrupts the feedback loop needed for efficient frontend iteration.&lt;/p&gt;
&lt;p&gt;To improve this we're going to be working on extending the &lt;code&gt;dev&lt;/code&gt; command to be platform aware and make it so &lt;code&gt;dev web&lt;/code&gt; utilises editbale installs to serve your project to the brower making it so with simple refresh of the browser you can quickly see your changes instead of waiting for a full wheel rebuild.&lt;/p&gt;
&lt;p&gt;More technical details and discussion can be found in our &lt;a href="https://github.com/beeware/briefcase/discussions/2282"&gt;Discussion Post&lt;/a&gt; on Briefcase and the associated &lt;a href="https://github.com/beeware/briefcase/issues/2334"&gt;Issue Ticket&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>May 2025 Status Update</title><link href="http://beeware.org/news/buzz/may-2025-status-update/" rel="alternate"/><updated>2025-06-02T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:0a1f4268-fa09-3186-87cb-dc2427a46942</id><content type="html">&lt;p&gt;During May, BeeWare saw a number of major improvements - many of which came as a result of our attendance at PyCon US 2025.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We attended PyCon US! We gave presentations at the Language Summit and the Packaging Summit, presented a tutorial, presented in the main conference track, and spent time in the Anaconda booth demonstrating BeeWare. After all that, we ran a 3 day sprint, during which 19 new contributors earned their challenge coins, and a bunch of existing contributors returned to contribute as well. Many of the contributions described in this blog post come from PyCon US contributions.&lt;/li&gt;
&lt;li&gt;Our proposed changes to &lt;a href="https://github.com/mesonbuild/meson/pull/14541"&gt;Meson&lt;/a&gt; and &lt;a href="https://github.com/mesonbuild/meson-python/pull/731"&gt;Meson-python&lt;/a&gt; have all been accepted, and will be included in the next releases of those tools. There have been some other conversations with the Meson team that have led to some minor improvements in the features added to support mobile binary packaging.&lt;/li&gt;
&lt;li&gt;We made a major set of updates to the BeeWare website, &lt;a href="https://github.com/beeware/beeware.github.io/pull/629"&gt;transitioning all the content to Markdown&lt;/a&gt;, and &lt;a href="https://github.com/beeware/beeware.github.io/pull/637"&gt;moving the translation infrastructure to Weblate&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We modified the Briefcase new project wizard to &lt;a href="https://github.com/beeware/briefcase/pull/2271"&gt;draw default values from a user's Git configuration, where possible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We modified Briefcase's handling of licenses to &lt;a href="https://github.com/beeware/briefcase/pull/2272"&gt;use SPDX standard abbreviations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We optimised the handling of signing on macOS to &lt;a href="https://github.com/beeware/briefcase/pull/2302"&gt;remove a redundant ad hoc signing pass when packaging an app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We improved &lt;a href="https://github.com/beeware/briefcase/pull/2305"&gt;warnings for users who have an old version of Python&lt;/a&gt;, which would result in them having an old version of Briefcase, but be unaware of this fact.&lt;/li&gt;
&lt;li&gt;We modified Briefcase to &lt;a href="https://github.com/beeware/briefcase/pull/2308"&gt;use the system certificate store&lt;/a&gt;. This should remove a very common source of errors on some corporate-managed VPNs. We also improved error handling to &lt;a href="https://github.com/beeware/briefcase/pull/2318"&gt;provide more context for any remaining SSL or related connection errors&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We improved error messages when &lt;a href="https://github.com/beeware/briefcase/pull/2303"&gt;one of the required wheels can't be found on iOS and macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3472"&gt;corrected the events that are generated by Tables on Windows&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3471"&gt;improved the error handling when an app doesn't return valid window content as part of its startup method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3467"&gt;added a mechanism for detecting dark mode on Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3359"&gt;significantly improved the handling of type annotations&lt;/a&gt;, allowing for Toga's lazy loading main module.&lt;/li&gt;
&lt;li&gt;We made some modifications to the WebView widget, &lt;a href="https://github.com/beeware/toga/pull/3400"&gt;adding support for setting content at time of construction&lt;/a&gt;, and &lt;a href="https://github.com/beeware/toga/pull/3401"&gt;simplifying the interface for setting static content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Our student contributors have continued to work on Toga's web backend. They've added new &lt;a href="https://github.com/beeware/toga/pull/3405"&gt;TimeInput&lt;/a&gt; widget, and they've begun planning some larger contributions to Briefcase and Toga to improve the tools for testing the Web backend. There should be a blog post in a couple of weeks that details their plans for the remainder of the year.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;For most this year, we've been trying to get the pieces in place to support binary packaging on mobile platforms. We're now at a point where the code required to support iOS is mostly in place; and the code to support Android is &lt;em&gt;almost&lt;/em&gt; in place; however, it will be difficult to make further progress until those changes are available in public releases.&lt;/p&gt;
&lt;p&gt;So, in June, we'll be changing focus. We're aiming to take a look at Briefcase, with 2 major improvements in mind. Firstly, we want to upgrade our Windows packaging story, and upgrade our WiX support from WiX 3 to a current version. This should resolve some issues with packaging large apps and apps with lots of files; it should also enable us to package applications for ARM64. Secondly, we've had some requests to expose Briefcase's packaging and signing infrastructure so it can be used on projects that &lt;em&gt;aren't&lt;/em&gt; built with Briefcase - we're hoping to add this as well.&lt;/p&gt;
&lt;p&gt;We're also hoping to follow up on some of our discussion with the Python core team at PyCon, and begin the process of integrating the production of iOS and Android binary artefacts into Python releases. This will hopefully also involve integrating iOS and Android into CPython's pre-merge CI tooling, which will hopefully limit the incidence of changes that are landed into CPython that break iOS and Android.&lt;/p&gt;
&lt;p&gt;Lastly, we'll continue to work on Python Emscripten support. Last month, we thought we were one issue away from a working buildbot; however, some new issues have emerged since then. We still hope to have a working buildbot before 3.14 is finalised, which will restore Emscripten to Tier 3 status.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? We curate issues that should be approachable for first-time contributors to BeeWare. They're all relatively minor changes, but would provide a big improvement to the lives of BeeWare users:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you're interested in the tooling for deploying applications to various platforms, take a look at &lt;a href="https://github.com/beeware/briefcase/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22good%20first%20issue%22"&gt;Briefcase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Or, if you're interested in GUI widgets, take a look at &lt;a href="https://github.com/beeware/toga/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22good%20first%20issue%22"&gt;Toga&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These lists can also be filtered by platform - so you can find issues that are specific to your preferred operating system. Pick one of these tickets, drop a comment on the ticket to let others know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide on setting up a Briefcase development environment&lt;/a&gt;; but if you need any additional assistance or guidance, you can ask on the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>April 2025 Status Update</title><link href="http://beeware.org/news/buzz/april-2025-status-update/" rel="alternate"/><updated>2025-05-02T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:ba7ac760-4ef6-3e24-a386-cf2fa9d43c70</id><content type="html">&lt;p&gt;April was a shortened development month due to the Easter break, plus
some other employer-related travel commitments, but we've still been
able to make some important progress in the BeeWare ecosystem.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We contributed changes to &lt;a href="https://github.com/numpy/meson/pull/19"&gt;the Meson
buildsystem&lt;/a&gt; that support
building on iOS; we have a &lt;a href="https://github.com/mesonbuild/meson/pull/14541"&gt;second set of
changes&lt;/a&gt; in review. We
also have an &lt;a href="https://github.com/mesonbuild/meson-python/pull/731"&gt;iOS support PR for
Meson-python&lt;/a&gt;,
the library that provides the PEP 517 build interface for Meson-based
Python projects. Work on the &lt;a href="https://github.com/numpy/numpy/pull/28759"&gt;patch for NumPy to support iOS
builds&lt;/a&gt; also continued.&lt;/li&gt;
&lt;li&gt;We landed some changes to CPython's iOS testbed to &lt;a href="https://github.com/python/cpython/pull/133132"&gt;accommodate
changes introduced in Xcode
16.3&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We modified CPython's iOS compiler shims to ensure &lt;a href="https://github.com/python/cpython/pull/133184"&gt;better support for
enforcing minimum iOS version
levels&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We contributed some improvements to CPython's build system to clean up
&lt;a href="https://github.com/python/cpython/pull/133081"&gt;warnings due to over-specified linking
requirements&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We modified CPython's usage of the HACL* hashing library to &lt;a href="https://github.com/python/cpython/pull/133226"&gt;use a
safer memory clearing implementation on
iOS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We made some improvements to CPython's Android build script to &lt;a href="https://github.com/python/cpython/pull/133193"&gt;make
it more resilient to network
failures&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/pip/25.1/"&gt;pip 25.1 was released&lt;/a&gt;, including
support for Android packaging.&lt;/li&gt;
&lt;li&gt;We completed work on a patch to allow the &lt;a href="https://github.com/pypa/cibuildwheel/pull/2317"&gt;declaration of tools that
are needed by the iOS build
process&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've submitted the first parts of a &lt;a href="https://github.com/pypa/cibuildwheel/pull/2349"&gt;patch to add Android build
support to
cibuildwheel&lt;/a&gt;. This is
getting close to being ready to submit for review, but still requires
some additional work.&lt;/li&gt;
&lt;li&gt;We added &lt;a href="https://github.com/beeware/Python-Apple-support/pull/270"&gt;support for
visionOS&lt;/a&gt;;
support for MacCatalyst &lt;a href="https://github.com/freakboy3742/cpython/pull/8"&gt;is also
underway&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3344"&gt;updated the Textual
backend&lt;/a&gt;. This resolved a
number of small issues that had emerged as a result of changes in
Textual.&lt;/li&gt;
&lt;li&gt;Briefcase has been modified to accept &lt;a href="https://github.com/beeware/briefcase/pull/2229"&gt;more names for change log
files&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Briefcase can now &lt;a href="https://github.com/beeware/briefcase/pull/2239"&gt;enforce a minimum OS version on iOS, macOS and
Android&lt;/a&gt;. This is an
important feature for ensuring the availability of OS-level features.&lt;/li&gt;
&lt;li&gt;Our student contributors have been investigating the current state of
Toga's web backend, and Briefcase's tools for running and testing that
backend. They've already landed a new
&lt;a href="https://github.com/beeware/toga/pull/3338"&gt;DateInput&lt;/a&gt;, and
&lt;a href="https://github.com/beeware/toga/pull/3362"&gt;ScrollContainer&lt;/a&gt; widget,
and they've started the process of updating the web backend to make
better use of Pyscript APIs, &lt;a href="https://github.com/beeware/toga/pull/3345"&gt;resolving a number of errors with event
handling&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Our focus for May will be preparing for and attending PyCon US. We've
already spent some time in April getting prepared for the
&lt;a href="https://us.pycon.org/2025/schedule/presentation/78/"&gt;talk&lt;/a&gt; and
&lt;a href="https://us.pycon.org/2025/schedule/presentation/147/"&gt;tutorial&lt;/a&gt; that
we're presenting, as well as a presentation to the Language Summit; we
also hope to be attending the Packaging Summit to discuss issues related
to cross-platform build environments. We'll be around the Anaconda booth
in the main hall at various times, and we'll be at the first three days
of the sprints. Tickets are still available - we hope to see you there!&lt;/p&gt;
&lt;p&gt;Allowing for travel time, just attending PyCon US will take up almost 2
weeks of May. For the rest of the month, we'll be continuing to work on
binary packaging - iOS patches for NumPy (including the tools to build
NumPy) are almost complete. Android support in cibuildwheel is also
progressing; once those changes are in place, and a cibuildwheel version
with iOS and Android support has been officially released, we will be
able to start officially submitting patches to upstream projects to
support iOS and Android.&lt;/p&gt;
&lt;p&gt;Progress on Python Emscripten support stalled this month due to other
commitments. The Emscripten buildbot is still ready to launch, with one
last technical issue to resolve. We hope we'll be able to resolve this
before or at PyCon US.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? We curate issues that should be approachable for
first-time contributors to BeeWare. They're all relatively minor
changes, but would provide a big improvement to the lives of BeeWare
users:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you're interested in the tooling for deploying applications to
various platforms, take a look at
&lt;a href="https://github.com/beeware/briefcase/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22good%20first%20issue%22"&gt;Briefcase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Or, if you're interested in GUI widgets, take a look at
&lt;a href="https://github.com/beeware/toga/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22good%20first%20issue%22"&gt;Toga&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These lists can also be filtered by platform - so you can find issues
that are specific to your preferred operating system. Pick one of these
tickets, drop a comment on the ticket to let others know you're looking
at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide on setting up a
Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>2025Q2 Roadmap</title><link href="http://beeware.org/news/buzz/2025q2-roadmap/" rel="alternate"/><updated>2025-04-03T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:7c024cb9-f390-3210-ad31-f739351b94cb</id><content type="html">&lt;p&gt;In Q1, BeeWare hit some major milestones for support of iOS and Android
on mobile platforms; but we still have more work to do. As always, this
roadmap should be read as a guide to what we aim to focus on over the
coming quarter, rather than a hard commitment of features that will be
made available on a specific deadline.&lt;/p&gt;
&lt;h2&gt;Q1 progress&lt;/h2&gt;
&lt;p&gt;In Q1, we made major progress in the state of binary packaging for iOS
and Android. PyPI now accepts binary wheel uploads; and we have uploaded
wheels for one package (pyspamsum) to prove that this support works.
We've also contributed changes in cibuildwheel that supports the
creation of iOS binary wheels. We need to wait until those changes are
in an official cibuildwheel release before we can contribute patches
upstream for other projects, but we have patches for a couple of
projects ready to submit as soon as there is an official release to use.
We've completed some preparatory work in CPython and pip to support
building Android binary wheels, but the changes to cibuildwheel to
support Android wheels are still in the early stages of development.&lt;/p&gt;
&lt;p&gt;Unfortunately, our collaboration with the PyScript team didn't work out
as expected; the opportunity to work with the PyScript team that we
anticipated did not eventuate. However, a group of students from Curtin
University will be working on Toga's web backend as part of their final
year capstone project. This will include making modifications to
Briefcase to support testing web-based apps. This project will run until
the end of the year; we look forward to seeing the progress they're able
to make.&lt;/p&gt;
&lt;p&gt;However, we &lt;em&gt;have&lt;/em&gt; made good progress on Emscripten support in CPython.
A buildbot for Emscripten is almost ready to launch; having a stable
buildbot is a major milestone in restoring Emscripten to Tier 3 support
in CPython. Draft PEPs defining the Emscripten platform (PEP 776) and
Emscripten wheel tagging (PEP 783) are currently in discussion.&lt;/p&gt;
&lt;h2&gt;Q2 priorities&lt;/h2&gt;
&lt;p&gt;In Q2, we're planning to continue working on binary packaging for mobile
platforms. This work will take three forms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We'll continue working on the cibuildwheel patch to support building
Android wheels. Now that the iOS patch has landed in cibuildwheel,
we're in a position to use that patch as a template for the analogous
changes needed to support Android.&lt;/li&gt;
&lt;li&gt;We'll continue to work on generating patches to third-party projects
to prove that the tooling we've developed for mobile binary wheels is
sufficient to support the entire Python ecosystem. We're currently
working on Numpy; Cryptography will likely be the next project we look
into.&lt;/li&gt;
&lt;li&gt;We will start the process of formalising and standardising the work
that we've done to support iOS and Android packaging. With PyCon US
approaching rapidly, we want to get these discussions underway so that
we can make the most of the opportunity provided by having a large
portion of the Python community in one place. There are two major
areas that require formalisation - the production of official binaries
for iOS and Android support; and the state of cross-platform build
environments.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to the work we're doing on mobile binary wheels, we're
expecting to work on improving Briefcase, with a view to making
Briefcase's tooling for packaging, signing and notarization useful as
standalone utilities, without the need to use Briefcase to package the
entire app.&lt;/p&gt;
&lt;h2&gt;Longer term goals&lt;/h2&gt;
&lt;p&gt;The long term goals of BeeWare remain largely the same. Once we've
developed a compelling story for mobile binary packaging, we'll be able
to turn our focus back to Toga. There's a number of navigation and data
organization widgets that need to be developed; we also need to improve
documentation of some common development patterns that are sources of
common questions in BeeWare support channels. Unless pull requests are
submitted from the broader community, it is unlikely that we'll make any
substantial progress on this front until the end of this year, or
perhaps early next year.&lt;/p&gt;
&lt;p&gt;We're also intending to look at tooling other than &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;venv&lt;/code&gt; for
building Briefcase packages. Integration with Conda is one obvious goal,
as it provides rich tooling for distributing complex binary
requirements. &lt;code&gt;uv&lt;/code&gt; is another tool that might fit well in the Briefcase
development story. Again, it is unlikely that we'll make any progress on
this front before the end of this year.&lt;/p&gt;
</content></entry><entry><title>March 2025 Status Update</title><link href="http://beeware.org/news/buzz/march-2025-status-update/" rel="alternate"/><updated>2025-04-02T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:a1d31233-f9d9-3f0d-92af-6bcaae35a316</id><content type="html">&lt;p&gt;March has seen a big release for Toga, and a number of other notable
improvements in the BeeWare ecosystem.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/toga/0.5.0/"&gt;Toga 0.5.0 has been released&lt;/a&gt;!
It's been over 5 months since our last feature release of Toga; this
release includes a number of major improvements to Toga's style layer,
and some significant improvements in iOS and macOS memory handling.
This release includes a number of backwards incompatible changes;
check the &lt;a href="https://toga.readthedocs.io/en/stable/background/project/releases.html#backward-incompatible-changes"&gt;Toga 0.5.0 release
notes&lt;/a&gt;
for details.&lt;/li&gt;
&lt;li&gt;We added a new &lt;a href="https://github.com/beeware/toga/pull/3114"&gt;Toga-Positron
bootstrap&lt;/a&gt;. This bootstrap
is a Briefcase plugin that provides an easy way to start a new project
that uses a web browser as the primary UI. This is effectively the
equivalent of Electron-style apps - but the code is entirely written
in Python, and works on iOS and Android. It also allows for hybrid
apps: as the underlying app is a Toga app, you can mix Toga widgets
into the layout that is being used. The bootstrap allows you to
convert a Django website or static web server into a mobile app; it
also provides a way to generate a "single site browser" - converting a
single public URL into a standalone app on your desktop.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3273"&gt;modified the way that style properties are applied to Toga
widgets&lt;/a&gt;. Style updates are
now applied in batch updates, dramatically reducing the amount of
repeated work required when changing the appearance of a widget.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3293"&gt;improved the UX of the WinForms Table
widget&lt;/a&gt;, ensuring that the
selected row is still visible when a table doesn't have focus.&lt;/li&gt;
&lt;li&gt;We improved Toga's &lt;a href="https://github.com/beeware/toga/pull/3270"&gt;handling of the asyncio event loop on
Windows&lt;/a&gt;. This change
ensures that WinForms apps always clean up the event loop on exit;
previously, it was possible for warnings to be raised on application
exit, caused by open sockets and unawaited co-routines.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3268"&gt;modified the handling of alignment style
properties&lt;/a&gt; to ensure that
when text &lt;em&gt;direction&lt;/em&gt; is changed, the layout of the app is
re-evaluated.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3217"&gt;added support for controlling inter-line spacing in multiline text
on a canvas&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3118"&gt;corrected some issues with background color handling on
Android&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3256"&gt;corrected some issues with supporting PyGObject on Linux
distributions that are based on Debian 12 (including Ubuntu
22.04)&lt;/a&gt;. This was necessary
because of a backwards incompatible change introduced into the
PyGObject 3.52.1 release; unfortunately, users of older Linux
distributions may need to make some modifications to their projects.&lt;/li&gt;
&lt;li&gt;The pull request &lt;a href="https://github.com/pypa/cibuildwheel/pull/2286"&gt;adding iOS support to
cibuildwheel&lt;/a&gt; has been
merged. With this change, a simple package can build binary wheels for
iOS with a single command: &lt;code&gt;CIBW_PLATFORM=ios cibuildwheel&lt;/code&gt;. This PR
then &lt;a href="https://github.com/pypa/cibuildwheel/pull/2337"&gt;required a follow-up investigation and
fix&lt;/a&gt; to correct an
intermittent issue that was seen when running the cibuildwheel tests
in CI.&lt;/li&gt;
&lt;li&gt;We've started work on a follow-up PR to cibuildwheel, &lt;a href="https://github.com/pypa/cibuildwheel/pull/2317"&gt;adding support
for explicitly declaring safe cross-build
tools&lt;/a&gt;. This is a use
case that was identified during the development of PR for iOS support.&lt;/li&gt;
&lt;li&gt;We corrected a &lt;a href="https://github.com/beeware/briefcase/pull/2212"&gt;long standing issue with PTH file handling in
Briefcase&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We added the ability to invoke &lt;code&gt;briefcase build&lt;/code&gt; and
&lt;code&gt;briefcase package&lt;/code&gt; on &lt;a href="https://github.com/beeware/briefcase/pull/2201"&gt;a single application in a Briefcase
project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We began work on a patch to support generating iOS binary wheels for
NumPy. This is a work in progress; we've got a set of patches that
allows us to &lt;em&gt;compile&lt;/em&gt; NumPy, but the test suite won't run yet.&lt;/li&gt;
&lt;li&gt;We created a process to make an official &lt;a href="https://github.com/python/cpython/pull/131532"&gt;binary release of Python for
Android&lt;/a&gt;, which should
be available on python.org starting with Python 3.14. This will reduce
duplicated effort across Python on Android tools, and ensure binary
compatibility in the packaging ecosystem.&lt;/li&gt;
&lt;li&gt;We submitted pull requests adding Android support to
&lt;a href="https://github.com/pypa/packaging/pull/880"&gt;packaging&lt;/a&gt; and
&lt;a href="https://github.com/pypa/pip/pull/13303"&gt;pip&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Binary packaging will continue to be an area of focus in April. In
addition to finishing the work on the "safe cross-build tools" patch, we
will continue to work on porting "real world" packages (like NumPy) to
discover any gaps that exist in the mobile packaging story. During
April, we also hope to submit a PR to support Android in cibuildwheel;
and to start a discussion with the rest of the Python packaging
community about the use of cross-platform build environments.&lt;/p&gt;
&lt;p&gt;We'll also continue to work on Python Emscripten support. The Emscripten
buildbot is almost ready to launch; we have one last technical issue to
resolve, and then we'll be able to add Emscripten to the CPython
buildbot fleet.&lt;/p&gt;
&lt;p&gt;There's also good news for Toga's Web backend - a group of students from
Curtin University will be working on Toga's web backend as part of their
final year capstone project. This will include making modifications to
Briefcase to support testing web-based apps. Some of the improvements to
Toga and Briefcase that landed this month are the result of those
students becoming familiar with BeeWare's contribution process. This
project will run until the end of the year; we look forward to seeing
the progress they're able to make.&lt;/p&gt;
&lt;p&gt;Looking a little further ahead - in May, we'll be attending PyCon US!
We're presenting a
&lt;a href="https://us.pycon.org/2025/schedule/presentation/78/"&gt;talk&lt;/a&gt; and a
&lt;a href="https://us.pycon.org/2025/schedule/presentation/147/"&gt;tutorial&lt;/a&gt;; and
we'll be there for the first 3 days of the sprints. We'll have a
presence at the Anaconda booth in the main hall; we'll be attending
other events (such as the language summit) during the conference; and
we're hoping to plan some open spaces. Ticket sales are open - we hope
to see you there!&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? We curate issues that should be approachable for
first-time contributors to BeeWare. They're all relatively minor
changes, but would provide a big improvement to the lives of BeeWare
users:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you're interested in the tooling for deploying applications to
various platforms, take a look at
&lt;a href="https://github.com/beeware/briefcase/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22good%20first%20issue%22"&gt;Briefcase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Or, if you're interested in GUI widgets, take a look at
&lt;a href="https://github.com/beeware/toga/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22good%20first%20issue%22"&gt;Toga&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These lists can also be filtered by platform - so you can find issues
that are specific to your preferred operating system. Pick one of these
tickets, drop a comment on the ticket to let others know you're looking
at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide on setting up a
Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>February 2025 Status Update</title><link href="http://beeware.org/news/buzz/february-2025-status-update/" rel="alternate"/><updated>2025-03-03T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:2e44edb8-1781-396b-8ead-be294a614d33</id><content type="html">&lt;p&gt;February may be the shortest month - but it's been a month of big
progress for BeeWare!&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The biggest news for the month is that &lt;a href="https://github.com/pypi/warehouse/pull/17559"&gt;it is now possible to upload
iOS and Android wheels to
PyPI&lt;/a&gt;! This is
ultimately a very small change adding a list of allowed tags to the
underlying PyPI codebase - but it is an important step towards the
goal of having the Python ecosystem support iOS and Android as a first
class citizen.&lt;/li&gt;
&lt;li&gt;We submitted a pull request &lt;a href="https://github.com/pypa/cibuildwheel/pull/2286"&gt;adding iOS support to
cibuildwheel&lt;/a&gt;. With
this change, a simple package can build binary wheels for iOS with a
single command: &lt;code&gt;CIBW_PLATFORM=ios cibuildwheel&lt;/code&gt;. As proof, we &lt;a href="https://pypi.org/project/pyspamsum/1.0.7/#files"&gt;built
and published iOS wheels for a simple binary
package&lt;/a&gt;. For
completeness, we also built and uploaded Android wheels using our
&lt;a href="https://github.com/chaquo/chaquopy/blob/master/server/pypi/README.md"&gt;existing Chaquopy-based build
tooling&lt;/a&gt;;
in the near future, we're hoping to replace that with a
cibuildwheel-based approach as well.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/beeware.github.io/pull/578"&gt;completed a major refactor of the BeeWare
website&lt;/a&gt;. This
dramatically simplifies the structure of some parts of the website -
most notably, the projects page. A huge thanks to community member
&lt;a href="https://kattni.com"&gt;Kattni&lt;/a&gt; for all their hard work on this refactor.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://pypi.org/project/briefcase/0.3.22/"&gt;released Briefcase
0.3.22&lt;/a&gt;. This is a bug fix
release to silence a warning raised during builds caused by the
release of pip 25.0. This warning had the potential to become an error
at an unknown point in the future, so we decided to push out a
low-feature release to avoid that possibility.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://pypi.org/project/toga/0.4.9/"&gt;released Toga 0.4.9&lt;/a&gt;. This
release contains only 1 change over the 0.4.8 release - it imposes an
upper bound on the version of Travertino that it specifies as a
requirement. This ensures that when we release the next version of
Travertino, we don't need to accommodate compatibility with Toga 0.4
APIs.&lt;/li&gt;
&lt;li&gt;We added &lt;a href="https://github.com/beeware/toga/pull/3087"&gt;initial support for GTK4 to
Toga&lt;/a&gt;. This is only the
very initial phases of GTK4 support - most widgets aren't currently
supported - but the basic infrastructure that allows a GTK4 app to
start &lt;em&gt;at all&lt;/em&gt; now exists. We now need to go through the process of
porting every GTK widget for GTK4 compatibility. Thanks to the work we
did on the Toga 0.4 widget audit, we have a comprehensive test suite
that we can use to evaluate progress on this task.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/2484"&gt;corrected some issues with background color handling on
Windows&lt;/a&gt;, including adding
support for transparency on widget backgrounds. This also included
adding support for &lt;a href="https://github.com/beeware/toga/pull/3140"&gt;alpha blending to
Travertino&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3181"&gt;corrected a long-standing issue that caused instability in Toga's
iOS tests&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/python/cpython/issues/129200"&gt;corrected a problem with the CPython iOS test
runner&lt;/a&gt; that
prevented multiple test runners starting at the same time, and
&lt;a href="https://github.com/python/cpython/issues/130292"&gt;another problem that was caused when running the runner under CI
conditions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We upgraded the CPython iOS buildbot to run on macOS Sonoma, and Xcode
16.4; this some issues with iOS 18 compatibility that we have
resolved.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;In March we will continue to work on binary packaging. Although it is
now possible to upload binary wheels to PyPI, that capability isn't much
use unless projects are able to build those wheels in the first place.
In the process of developing the pull request for cibuildwheel, we've
identified a gap in the &lt;a href="https://peps.python.org/pep-0517/"&gt;PEP 517&lt;/a&gt;
specification associated with building more complex binary packages, and
a set of missing features in virtual environments in a cross-platform
build configuration. We have some ideas for how to fill these gaps; but
we need to do some more experimentation to prove that those approaches
will work as expected. The eventual goal will be to author a PEP to
address these gaps in the PEP 517 standard. We should also be able to
begin the process of adding Android binary wheel support, mirroring the
changes we've made for iOS over the past months.&lt;/p&gt;
&lt;p&gt;We'll also continue to work on Python Emscripten support. The Emscripten
buildbot is almost ready to launch; we have one last technical issue to
resolve, and then we'll be able to add Emscripten to the CPython
buildbot fleet.&lt;/p&gt;
&lt;p&gt;Unfortunately, it looks like the work we were planning on Toga's Web
backend will be deferred. We believed we may have had an opportunity to
work with another group at Anaconda to improve Toga's web backend, but
that opportunity looks like it will not eventuate. We're still
interested in improving the web backend, but we probably won't be able
to commit significant resources to that project in the near future.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2251"&gt;Update the Toga testbed test suite to use Pixel 7 Pro device
sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular
IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/737"&gt;Add an option to select the Android base image when creating new
emulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/3032"&gt;Add an API to request that an app be given
focus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2974"&gt;Investigate the source of a Table column resize issue on
Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/2071"&gt;Correct the handling of double quotes in formal
names&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>January 2025 Status Update</title><link href="http://beeware.org/news/buzz/january-2025-status-update/" rel="alternate"/><updated>2025-02-03T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:0cfa014a-f175-3d10-b51e-830c963c9c42</id><content type="html">&lt;p&gt;It's the start of a new year, and we've already seen some big
improvements to BeeWare!&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We &lt;a href="https://pypi.org/project/briefcase/0.3.21/"&gt;released Briefcase
0.3.21&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We modified Briefcase to &lt;a href="https://github.com/beeware/briefcase/pull/2101"&gt;use the native iOS platform support that was
added in pip v24.3&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We made &lt;a href="https://github.com/beeware/briefcase/pull/2110"&gt;substantial improvements to Briefcase's macOS notarization
tools&lt;/a&gt;. It is now
possible to suspend and resume a Briefcase notarization attempt.&lt;/li&gt;
&lt;li&gt;We made &lt;a href="https://github.com/beeware/briefcase/pull/2096"&gt;Briefcase's check of system tools more resilient on
Debian-based systems&lt;/a&gt;,
accounting for situations where users have installed all the
constituent pieces of the &lt;code&gt;build-essential&lt;/code&gt; meta package, but haven't
actually installed &lt;code&gt;build-essential&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We modified the Briefcase bootstrap API to &lt;a href="https://github.com/beeware/briefcase/pull/2114"&gt;give the bootstrap access
to the Briefcase console and logging
tools&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/2124"&gt;simplified the handling of console, input and logging in
Briefcase&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/2121"&gt;promoted Linux on ARM64 to a fully supported platform in
Briefcase&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/2121"&gt;improved error reporting when the underlying tools used by
Briefcase fail&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/2853"&gt;resolved some memory leaks in Toga's iOS
backend&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3068"&gt;added an API to Toga's WebView for retrieving
cookies&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3107"&gt;modified the constructor of Toga widgets to allow for style
definitions to be provided as keyword arguments to the widget, rather
than requiring a separate Pack
object&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3113"&gt;added aliases for some common horizontal and vertical alignment
style properties to Pack&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3116"&gt;added Row and Column
functions&lt;/a&gt; as aliases for a
Box with horizontal and vertical direction styles, respectively.&lt;/li&gt;
&lt;li&gt;We added &lt;a href="https://github.com/beeware/toga/pull/2096"&gt;event handlers for changes in focus and visibility on Toga
Window objects&lt;/a&gt;. This also
provides a mechanism for mobile apps to respond to being moved to and
from a background state.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3086"&gt;migrated the Travertino codebase into the Toga
repository&lt;/a&gt;, and &lt;a href="https://github.com/beeware/toga/pull/3129"&gt;got
Travertino's test suite to 100% branch
coverage&lt;/a&gt;. This should make
it easier to coordinate changes in Travertino with the corresponding
changes in Toga.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/3009"&gt;corrected some issues with background color handling on
iOS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We modified Rubicon ObjC to &lt;a href="https://github.com/beeware/rubicon-objc/pull/558"&gt;add support for recent changes to the way
Python manages asyncio event
loops&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We formally published
&lt;a href="https://pypi.org/project/setuptools-dynamic-dependencies/"&gt;setuptools-dynamic-dependencies&lt;/a&gt;.
This is a setuptools plugin that allows dependencies to be specified
as dynamic properties. This is a tool that we've used for a while to
ensure that &lt;code&gt;toga-cocoa==X&lt;/code&gt; has a dependency on &lt;code&gt;toga-core==X&lt;/code&gt;; it's
now been formally published on PyPI for anyone to use.&lt;/li&gt;
&lt;li&gt;We continued to work on binary iOS packaging. We're almost ready to
submit some changes to &lt;code&gt;cibuildwheel&lt;/code&gt; to formally add support for
building iOS packages.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;In February, we'll continue to work on binary packaging - we hope to be
able to submit pull requests to &lt;code&gt;cibuildwheel&lt;/code&gt; adding iOS support in the
coming weeks. We may also begin the process of adding Android binary
wheel support, mirroring the changes we've made for iOS.&lt;/p&gt;
&lt;p&gt;We'll continue to work on Python Emscripten support. We're almost ready
to stand up an Emscripten buildbot; this may happen in February. Lastly,
we'll continue to work on Toga's Web backend, with the eventual aim of
getting the web backend to the same level of support as the other Toga
backends.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2251"&gt;Update the Toga testbed test suite to use Pixel 7 Pro device
sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular
IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/737"&gt;Add an option to select the Android base image when creating new
emulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/3032"&gt;Add an API to request that an app be given
focus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2974"&gt;Investigate the source of a Table column resize issue on
Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/2071"&gt;Correct the handling of double quotes in formal
names&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>2025Q1 Roadmap</title><link href="http://beeware.org/news/buzz/2025q1-roadmap/" rel="alternate"/><updated>2025-01-07T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:4ada5397-729e-3b88-86be-205dfc856a7d</id><content type="html">&lt;p&gt;Progress in Q4 was slower than anticipated, but there have been some
notable success in achieving BeeWare's overall project goals. As always,
this roadmap should be read as a guide to what we aim to focus on over
the coming quarter, rather than a hard commitment of features that will
be made available on a specific deadline.&lt;/p&gt;
&lt;h2&gt;Q4 progress&lt;/h2&gt;
&lt;p&gt;Our goal for Q4 was to have at least one third-party package producing
Android and iOS packages as part of their release process. We were
unable to achieve this goal, for four reasons.&lt;/p&gt;
&lt;p&gt;Firstly, we underestimated the chain of downstream dependencies that
needed to be addressed before it would be possible to submit mobile
packaging PRs to upstream projects. We correctly identified &lt;code&gt;pip&lt;/code&gt; and
&lt;code&gt;cibuildwheel&lt;/code&gt; as two projects that would need to be updated; however,
we didn't anticipate that those projects would themselves have upstream
dependencies and issues that would require patching. The process of
coming up to speed with the development tooling of multiple upstream
projects, navigating the review processes of each of those projects, and
sequencing changes over multiple projects so they are easier to merge
has taken much longer than we anticipated.&lt;/p&gt;
&lt;p&gt;Secondly, we underestimated how much work would be needed on the target
projects themselves to make them ready for mobile support. We picked
Pillow as one of our target projects because of its complex chain of
binary dependencies. However we soon discovered that the way those
binary dependencies were compiled for &lt;em&gt;macOS&lt;/em&gt; required significant
alteration before working on an iOS patch would be possible.&lt;/p&gt;
&lt;p&gt;Third, the release of Xcode 16 included an unexpected surprise - it
broke the mechanism we were using to gather results from test suites
running on the iOS simulator. This required a significant change in
CPython; however, as a result, we now have a much better mechanism for
collecting test results, and the test harness the CPython uses to run
its own tests can now be used to run test suites for any other Python
project.&lt;/p&gt;
&lt;p&gt;Lastly, we were presented with an opportunity to work closely with the
PyScript team on web support, to the benefit of both projects. This
redirected some of the resources that we originally anticipated would be
used for Android binary packaging. However, it does mean that some
significant improvements to Toga's web backend have been made, with more
on the horizon in the new year.&lt;/p&gt;
&lt;p&gt;Despite these challenges, we have made significant progress. &lt;code&gt;pip&lt;/code&gt; now
includes full support for iOS wheel tags. The patch adding a major
feature to &lt;code&gt;cibuildwheel&lt;/code&gt; that is a pre-requisite for iOS support has
been accepted; we've been told this patch should be merged within days.
We've submitted changes to Pillow that allow macOS builds to be
completely isolated from Homebrew, and the patches required to support
cross-platform builds of Pillow's binary dependencies have been merged.
This leaves 2 patches that need to be merged - a patch to cibuildwheel
adding support for building on iOS; and the patch to Pillow adding an
iOS build configuration. These patches have been prepared, and are
mostly ready for submission upstream; using these patches, it is
possible to fully build and test Pillow wheels for iOS with
cibuildwheel.&lt;/p&gt;
&lt;h2&gt;Q1 priorities&lt;/h2&gt;
&lt;p&gt;In Q1, we will continue to work on binary packaging for mobile
platforms. We will continue to work on landing the patches to
&lt;code&gt;cibuildwheel&lt;/code&gt; and Pillow for iOS support; once that work has concluded,
we hope to start making the analogous changes required to support
Android.&lt;/p&gt;
&lt;p&gt;Q1 will also see the continuation of our collaboration with PyScript.
The major focus for BeeWare in this work will be Toga's Web backend -
and in particular, Toga's testing infrastructure. We're not currently
able to run Toga's testbed project on the web backend (or the Textual
backend, for that matter). We have some ideas for how this could be
addressed; these ideas may not be fully realised by the end of Q1, but
we hope to at least have a concrete plan, and maybe even a prototype in
place.&lt;/p&gt;
&lt;p&gt;Lastly, with the CPython 3.14 development process well underway, there
are two projects that we intend to work on, with the goal of having this
work incorporated into Python 3.14. The first is the creation of
official "embedded" distributions of CPython for more platforms. Python
already produces an embedded build for Windows, and Briefcase is able to
use this distribution as part of the process of creating Windows
binaries. We hope that Python 3.14 will contain analogous builds for
macOS, iOS and Android, removing the need for BeeWare (and other
projects) to maintain independent CPython builds. We've had some initial
discussions with the CPython release team; we hope that by the end of
the quarter, we'll have a plan for how to deliver this work.&lt;/p&gt;
&lt;p&gt;The second CPython feature we'd like to address is handling of
cross-platform virtual environments - that is, creating a virtual
environment that can "pretend" it is running on a different host
platform. This is necessary for cross-platform builds, which require the
ability to create an isolated PEP 517 build environment that can run
Python on the local machine, but report platform-identifying information
as if it were running on the target machine. A version of this
cross-environment virtualization has been necessary to support
&lt;code&gt;cibuildwheel&lt;/code&gt;; however, it would be desirable to upstream this work so
that it can be standardised as part of a stock Python environment. We
hope to start discussions about this with the CPython core team in the
near future.&lt;/p&gt;
&lt;h2&gt;Longer term goals&lt;/h2&gt;
&lt;p&gt;Once we've got a strong story for packaging third-party packages for iOS
and Android, we'll be able to turn our focus back to Toga, and the work
needed to make iOS and Android compelling app development platforms.
There's a number of navigation and data organization widgets that need
to be developed; we also need to improve documentation of some common
development patterns that are sources of common questions in BeeWare
support channels.&lt;/p&gt;
&lt;p&gt;We'll should also be in a position to start working on the long list of
projects in the Python ecosystem that would benefit from having iOS and
Android support upstream. &lt;code&gt;cryptography&lt;/code&gt;, &lt;code&gt;numpy&lt;/code&gt; and &lt;code&gt;pandas&lt;/code&gt; will be
the highest priority for this work, but there's a very long tail of
useful projects that have binary modules; ideally they'd all have iOS
and Android support.&lt;/p&gt;
</content></entry><entry><title>December 2024 Status Update</title><link href="http://beeware.org/news/buzz/december-2024-status-update/" rel="alternate"/><updated>2025-01-06T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:0b8def2c-84a2-3cbe-a4fa-07cc6c8c7580</id><content type="html">&lt;p&gt;Work in December (and the publication of this update!) was slowed by the
end-of-year break; but BeeWare still made some significant progress to
round out the year.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We added a &lt;a href="https://github.com/beeware/toga/pull/2999"&gt;GTK implementation of Geolocation
services&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We made a number of improvements to Pack, Toga's style API. This
includes &lt;a href="https://github.com/beeware/toga/pull/3054"&gt;adding a "justify-content" style
directive&lt;/a&gt;, &lt;a href="https://github.com/beeware/toga/pull/3036"&gt;adding a "gap"
style directive&lt;/a&gt;, and
&lt;a href="https://github.com/beeware/toga/pull/3033"&gt;updating a number of Pack properties to match their CSS
names&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/2942"&gt;standardised the way in which Toga widgets are
instantiated&lt;/a&gt;. This
simplifies the implementation process, and guarantees that the initial
styles added to a widget are always applied.&lt;/li&gt;
&lt;li&gt;We added an API for &lt;a href="https://github.com/beeware/toga/pull/2473"&gt;reporting and controlling the state of Toga
windows&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We began modifying Toga to be &lt;a href="https://github.com/beeware/toga/pull/2976"&gt;compatible with
MicroPython&lt;/a&gt;. MicroPython
is significantly smaller than the full CPython install, reducing the
startup time for web apps.&lt;/li&gt;
&lt;li&gt;We updated &lt;a href="https://github.com/beeware/briefcase/pull/2080"&gt;Briefcase's web template to use a more recent PyScript
version&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We added &lt;a href="https://github.com/beeware/briefcase/pull/2089"&gt;support for console apps in the Briefcase project conversion
wizard&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/2085"&gt;improved error handling when updating Briefcase
templates&lt;/a&gt;, accounting
for some global git configuration options that were causing problems
for some users.&lt;/li&gt;
&lt;li&gt;We added &lt;a href="https://github.com/beeware/briefcase/pull/2059"&gt;explicit support for passing options to
pip&lt;/a&gt; when installing
dependencies with Briefcase. This is mostly useful for specifying
alternative package repositories (with &lt;code&gt;--index-url&lt;/code&gt; or
&lt;code&gt;--extra-index-url&lt;/code&gt;) or local folders that contain wheels (with
&lt;code&gt;--find-links&lt;/code&gt;); but any pip arguments can be passed down to the pip
invocation.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/2075"&gt;corrected an error in the default D-Bus configuration of Flatpak
apps&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We resolved a &lt;a href="https://github.com/beeware/rubicon-objc/pull/543"&gt;long-standing memory management issue in
Rubicon&lt;/a&gt;. This
change removes almost all need for manual memory management of ObjC
objects, making iOS and macOS development much more robust. It also
resolves some memory leak issues on Toga's iOS backend.&lt;/li&gt;
&lt;li&gt;We added support for CPython to &lt;a href="https://github.com/python/cpython/pull/127592"&gt;stream stdout and stderr to the
system log on iOS and
macOS&lt;/a&gt;. This change
included a improved tool for running CPython test suites, making it
possible to stream the output of a CPython test suite while the test
suite is running, and to run the an arbitrary test suite, not just the
CPython test suite.&lt;/li&gt;
&lt;li&gt;Our patch &lt;a href="https://github.com/pypa/cibuildwheel/pull/2062"&gt;adding a test-sources configuration in
cibuildwheel&lt;/a&gt; has been
accepted, and should be merged in a couple of days.&lt;/li&gt;
&lt;li&gt;We reviewed a large number of improvements to Emscripten support in
CPython.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;We'll publish a full Q1 roadmap in a day or two; but our goal for
January will be to continue the work we were doing in December. We'll
continue to push patches upstream to support binary packaging, with iOS
support for Pillow being the immediate goal. We'll continue to work on
Python Emscripten support, and Toga's Web backend, with the eventual aim
of getting the web backend to the same level of support as the other
Toga backends. We're planning to publish new versions of Rubicon ObjC,
Travertino and Toga in the coming days; these are major updates that
will involve some minor backwards compatibilities. Lastly, we've had a
number of reports of bugs with Briefcase's macOS notarization and
Windows packaging which we will be investigating.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2251"&gt;Update the Toga testbed test suite to use Pixel 7 Pro device
sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular
IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/737"&gt;Add an option to select the Android base image when creating new
emulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/3032"&gt;Add an API to request that an app be given
focus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2974"&gt;Investigate the source of a Table column resize issue on
Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/2071"&gt;Correct the handling of double quotes in formal
names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/2006"&gt;Modify the default bootstrap to provide more helpful initial
values&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>November 2024 Status Update</title><link href="http://beeware.org/news/buzz/november-2024-status-update/" rel="alternate"/><updated>2024-12-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:5962c2ab-33de-3c8a-acc5-d90ddd0b1c8c</id><content type="html">&lt;p&gt;In November, BeeWare made more good progress on mobile packaging -
however, that work has revealed a number of upstream tools that need
modification before we can contribute wheels for mobile platforms.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We attended &lt;a href="https://2024.pycon.org.au"&gt;PyCon AU&lt;/a&gt;; video of the talk
we gave on accessing phone hardware from Python &lt;a href="https://www.youtube.com/watch?v=cLNWwNHgTco"&gt;is available on
YouTube&lt;/a&gt;. We also had a
very productive sprint - 9 contributors earned their &lt;a href="https://beeware.org/contributing/challenge-coins/"&gt;challenge
coin&lt;/a&gt;, for
contributions ranging from &lt;a href="https://github.com/beeware/beeware/pull/450"&gt;corrections to the
tutorial&lt;/a&gt;, to the
&lt;a href="https://github.com/beeware/toga/pull/2992"&gt;addition of a dark mode flag to
Toga&lt;/a&gt;. We also gave out one
Yak Herder coin, for someone who helps other people to get their
challenge coin. A huge thank you to everyone that came along and
participated!&lt;/li&gt;
&lt;li&gt;Our patch for Pillow &lt;a href="https://github.com/python-pillow/Pillow/pull/8497"&gt;isolating its build system from Homebrew when
building on macOS&lt;/a&gt;
has been finalised and merged. This is essential for iOS support, as
it's easy for Homebrew macOS ARM64 binaries to leak into iOS builds;
but it also has benefits for macOS builds.&lt;/li&gt;
&lt;li&gt;We've completed work on modifications to the Pillow build system to
support building for iOS. However, testing this work has revealed the
need for additional changes to cibuildwheel and the upstream CPython
support for iOS.&lt;/li&gt;
&lt;li&gt;We've submitted a PR to cibuildwheel to &lt;a href="https://github.com/pypa/cibuildwheel/pull/2062"&gt;add a test-sources
configuration item&lt;/a&gt;.
This feature is required for iOS testing, but can also be used on
other platforms, so we've contributed it independently in order to
make the iOS changes easier to test.&lt;/li&gt;
&lt;li&gt;We've started work on some modifications to how the CPython iOS
testbed project is run. This has become necessary because of &lt;a href="https://github.com/python/cpython/issues/126925"&gt;a change
introduced in Xcode
16&lt;/a&gt;, but in order to
fix the problem, we'll also be able to &lt;a href="https://github.com/python/cpython/issues/126821"&gt;improve the reporting of test
output during a test
run&lt;/a&gt;, and also make
the test harness useful as a generic utility for &lt;em&gt;any&lt;/em&gt; iOS project.&lt;/li&gt;
&lt;li&gt;We've made good progress towards resolving a &lt;a href="https://github.com/beeware/rubicon-objc/pull/543"&gt;long-standing memory
management issue in
Rubicon&lt;/a&gt;. This
change will remove almost all need for manual memory management of
ObjC objects, making iOS and macOS development much more robust.&lt;/li&gt;
&lt;li&gt;We resolved a number of CPython test stability issues on Android. In
most cases, this wasn't an indicator of a broken feature, but of an
unstable test - but as a result of the extensive testing done by
CPython as a project, even a small instability can manifest as a
semi-regular test failure.&lt;/li&gt;
&lt;li&gt;We've started work on &lt;a href="https://github.com/beeware/toga/pull/2976"&gt;modifying Toga's web backend to be compatible
with Micropython&lt;/a&gt;. This
significantly reduces the startup time for a Toga app; we're hoping to
be able to spend a lot more time on the web backend in the coming
year.&lt;/li&gt;
&lt;li&gt;We've &lt;a href="https://github.com/python/steering-council/issues/256"&gt;formally taken on responsibility for restoring Emscripten to
Tier 3 support in
CPython&lt;/a&gt;, and
reviewed a number of patches aimed at restoring Emscripten support.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;December will be a short month because of end-of-year holidays; we'll be
continuing to work on binary packaging. The work we've done porting
Pillow to iOS has revealed a number of gaps in the tooling needed to
develop and test packages for iOS; so we will be working on getting that
upstream tooling in place, using Pillow as a demonstrator for that work.
Our overall goal hasn't changed - to get tools in place so that
third-party projects can officially support iOS and Android - but it's
become clear that there's a lot more upstream work required than we
originally anticipated. However, we'll keep working toward this goal
until creating packages for iOS and Android is as straightforward as any
other platform.&lt;/p&gt;
&lt;p&gt;We'll also be continuing to work on Python Emscripten support, and
Toga's Web backend, with the eventual aim of getting the web backend to
the same level of support as the other Toga backends.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2251"&gt;Update the Toga testbed test suite to use Pixel 7 Pro device
sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular
IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/737"&gt;Add an option to select the Android base image when creating new
emulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2305"&gt;Add an API to entirely replace the style of a
widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2974"&gt;Investigate the source of a Table column resize issue on
Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>October 2024 Status Update</title><link href="http://beeware.org/news/buzz/october-2024-status-update/" rel="alternate"/><updated>2024-11-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:3bc76249-ea74-3dca-ba8d-774d23d28b4d</id><content type="html">&lt;p&gt;In October, BeeWare saw some important releases, plus more good progress
on binary packaging for iOS.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Most importantly, we released &lt;a href="https://pypi.org/project/briefcase/0.3.20/"&gt;Briefcase
0.3.20&lt;/a&gt; and &lt;a href="https://pypi.org/project/toga/0.4.8/"&gt;Toga
0.4.8&lt;/a&gt;, including support for
Python 3.13 - which includes the official support in Python for iOS
and Android! This is a major milestone for BeeWare as a project,
representing a significant portion of the work done over the last 12
months.&lt;/li&gt;
&lt;li&gt;We've prepared an &lt;a href="https://github.com/freakboy3742/cibuildwheel/tree/ios-support"&gt;initial patch to cibuildwheel that is able to build
and test simple iOS
wheels&lt;/a&gt;.
This patch isn't ready to submit upstream, but it is able to build
simple iOS wheels.&lt;/li&gt;
&lt;li&gt;We've submitted a patch to Pillow to &lt;a href="https://github.com/python-pillow/Pillow/pull/8497"&gt;isolate its build system from
Homebrew when building on
macOS&lt;/a&gt;. This is
essential for iOS support, as it's easy for Homebrew macOS ARM64
binaries to leak into iOS builds; but it also has benefits for macOS
builds.&lt;/li&gt;
&lt;li&gt;We've made &lt;a href="https://github.com/multi-build/multibuild"&gt;a number of improvements to
multibuild&lt;/a&gt;, the tooling
that Pillow uses to compile non-Python binary dependencies.&lt;/li&gt;
&lt;li&gt;We've &lt;a href="https://github.com/python/cpython/pull/126169"&gt;modified the CPython iOS testbed
project&lt;/a&gt; so that it can
be used as a testbed for &lt;em&gt;any&lt;/em&gt; iOS Python project.&lt;/li&gt;
&lt;li&gt;We've &lt;a href="https://github.com/beeware/briefcase/pull/2033"&gt;improved error reporting when Briefcase can't clone a
template&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've switched to using &lt;code&gt;httpx&lt;/code&gt; instead of &lt;code&gt;requests&lt;/code&gt; for &lt;a href="https://github.com/beeware/briefcase/pull/2041"&gt;Briefcase's
internal download
handling&lt;/a&gt;. This
provides slightly better error handling, better options for improving
HTTP/2 usage, and we're now consistently using &lt;code&gt;httpx&lt;/code&gt; in Briefcase
and in our example code.&lt;/li&gt;
&lt;li&gt;We've modified Toga to &lt;a href="https://github.com/beeware/toga/pull/2686"&gt;lazily load
components&lt;/a&gt;, rather than
importing everything into the &lt;code&gt;toga&lt;/code&gt; namespace at startup. This should
improve application startup times, especially on platforms like mobile
and web where this startup time is noticeable.&lt;/li&gt;
&lt;li&gt;We resolved an issue causing &lt;a href="https://github.com/beeware/toga/pull/2893"&gt;intermittent test failures when testing
Toga on Wayland&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;We will be continuing to work on binary packaging in November. We're
using Pillow as a demonstrator for this work - it's a package that has a
significant binary component, is widely used (including on mobile), but
has a non-trivial build process (largely due to the non-Python binary
dependencies). The hope is that by the time we're able to compile Pillow
for iOS, we will have resolved many of the issues facing other binary
packages. Our goal remains to have at least &lt;em&gt;some&lt;/em&gt; third-party projects
officially supporting iOS and Android by the end of the year, but this
may be impeded by the sequence of dependencies that need to land and be
published before upstream projects can accept iOS and Android patches.&lt;/p&gt;
&lt;p&gt;We'll also be speaking at &lt;a href="https://2024.pycon.org.au"&gt;PyCon AU&lt;/a&gt; at the
end of the month, including attending both days of the sprints. If
you're able to make it to Narrm/Melbourne, we hope we'll see you there!&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2251"&gt;Update the Toga testbed test suite to use Pixel 7 Pro device
sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1270"&gt;Add support for custom PyPI
repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular
IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/737"&gt;Add an option to select the Android base image when creating new
emulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2305"&gt;Add an API to entirely replace the style of a
widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1876"&gt;Correct the handling of quotation marks in Android
apps&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>2024Q4 Roadmap</title><link href="http://beeware.org/news/buzz/2024q4-roadmap/" rel="alternate"/><updated>2024-10-02T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:10dd2b41-f023-3662-89b5-5c2a39279898</id><content type="html">&lt;p&gt;Q3 has seen some major progress against long term goals of the BeeWare
project. As always, this roadmap should be read as a guide to what we
aim to focus on over the coming quarter, rather than a hard commitment
of features that will be made available on a specific deadline.&lt;/p&gt;
&lt;h2&gt;Q3 progress&lt;/h2&gt;
&lt;p&gt;In Q3 the biggest milestone we achieved was the finalisation of Tier 3
support for Android in CPython. The last of the compatibility and
documentation issues associated with Android have been resolved, and
Android buildbots are now running for both x86_64 and ARM64. Python
3.13.0 is due for release in about a week; we should be in a position to
support this release very soon after the official release.&lt;/p&gt;
&lt;p&gt;We've also made significant progress on binary packaging. We've
backported all the Python 3.13 patches for iOS into BeeWare's support
for Python 3.9-3.12, and we've updated our Mobile Forge infrastructure
to generate binary wheels for a number of popular packages. We've
developed iOS compatibility patches for pip and crossenv; these patches
have been submitted and received initial reviews; we'll continue to work
with those projects to land these patches upstream.&lt;/p&gt;
&lt;h2&gt;Q4 priorities&lt;/h2&gt;
&lt;p&gt;In Q4, we'll be focussing on the tools and documentation needed to for
third-party Python packages to add Android and iOS support to their
official CI and release processes. In addition to contributing to tools
like &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;cibuildwheel&lt;/code&gt;, we'll develop the tools and documentation
needed so that it is easy to add CI configurations for mobile platforms.
The hope is that by the end of the year, there will be at least one
third-party package that produces Android and iOS wheels without any
direct involvement of the BeeWare team.&lt;/p&gt;
&lt;h2&gt;Longer term goals&lt;/h2&gt;
&lt;p&gt;Once we've got a strong story for packaging third-party packages for iOS
and Android, we'll be able to turn our focus back to Toga, and the work
needed to make iOS and Android compelling app development platforms.
There's a number of navigation and data organization widgets that need
to be developed; we also need to improve documentation of some common
development patterns that are sources of common questions in BeeWare
support channels.&lt;/p&gt;
&lt;p&gt;There are also further improvements that we'd like to see in Python
itself. This year we've been able to get Android and iOS to Tier 3
support; getting those platforms to Tier 2 is an obvious goal for future
Python releases. We'd also like to contribute the tooling needed so that
Python is able to distribute official binary releases of iOS and
Android, and add an official macOS artefact that mirrors the "Windows
embedded" installer. We've had discussions with the Python core team
about how this could be achieved; over the coming year, we hope to land
these changes.&lt;/p&gt;
</content></entry><entry><title>September 2024 Status Update</title><link href="http://beeware.org/news/buzz/september-2024-status-update/" rel="alternate"/><updated>2024-10-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:d276991c-f687-33a4-ad57-0010a0c25f7a</id><content type="html">&lt;p&gt;In September, BeeWare hit an important milestone for Android support,
made good progress on packaging for iOS, and landed some significant
changes to Toga.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Android is &lt;a href="https://peps.python.org/pep-0011/#tier-3"&gt;now officially a Tier 3 platform in
CPython&lt;/a&gt;! Over the last
month, we've resolved a number of bugs that were preventing us from
deploying a reliable buildbot for Android (on both x86_64 and ARM64);
as a result, the CPython buildbot fleet now contains Android
buildbots. The Android-related changes to documentation have also been
merged; Python 3.13.0rc3 (due for release any day now) will
incorporate all these changes.&lt;/li&gt;
&lt;li&gt;We completed the &lt;a href="https://github.com/beeware/mobile-forge/pull/55"&gt;updates to Mobile Forge to support the new official
iOS wheel format&lt;/a&gt;,
and published updated wheels in this format for the packages for which
we have recipes. As part of these changes, we've also added CI checks
to Mobile Forge.&lt;/li&gt;
&lt;li&gt;We've &lt;a href="https://github.com/pypa/pip/pull/12962"&gt;submitted a patch to support iOS in
pip&lt;/a&gt;. This patch also requires
some patches to
&lt;a href="https://github.com/pypa/packaging/pull/832"&gt;packaging&lt;/a&gt; and
&lt;a href="https://github.com/pypa/distlib/pull/231"&gt;distlib&lt;/a&gt; that pip includes
as vendored copies.&lt;/li&gt;
&lt;li&gt;We've &lt;a href="https://github.com/benfogle/crossenv/pull/117"&gt;submitted a patch to
crossenv&lt;/a&gt; that allows
cross-compiling Python packages for iOS. There is some additional work
required before this patch can land - crossenv's testing framework is
currently broken, so it's not currently possible to verify changes
in CI. We'll be working on restoring this testing support in the very
near future.&lt;/li&gt;
&lt;li&gt;We attended the CPython core team summit. During this week-long
sprint, we were able to resolve a number of open questions about
Python support on mobile, and begin planning for work that will
hopefully be incorporated into the Python 3.14 release.&lt;/li&gt;
&lt;li&gt;We released &lt;a href="https://pypi.org/project/toga/0.4.7/"&gt;Toga 0.4.7&lt;/a&gt;,
incorporating fixes for a number of bugs discovered in the recent
0.4.6 release, as well as some minor feature additions.&lt;/li&gt;
&lt;li&gt;We transitioned Toga's GTK backend to use &lt;a href="https://github.com/beeware/toga/pull/2550"&gt;PyGObject's native asyncio
support&lt;/a&gt;. This allowed us
to deprecate &lt;a href="https://github.com/beeware/gbulb"&gt;Gbulb&lt;/a&gt;, the GTK
asyncio plugin that we've been maintaining for several years.&lt;/li&gt;
&lt;li&gt;We corrected an issue with the &lt;a href="https://github.com/beeware/toga/pull/2822"&gt;use of recent Textual versions in
Toga&lt;/a&gt;, and &lt;a href="https://github.com/beeware/toga/pull/2823"&gt;added a
bare-bones runtime test&lt;/a&gt; to
ensure that the problem doesn't re-occur. This also required a fix for
&lt;a href="https://github.com/beeware/briefcase/pull/1992"&gt;macOS console app testing in
Briefcase&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We made some &lt;a href="https://github.com/beeware/toga/pull/2831"&gt;usability improvements to the rendering of Toga's
documentation&lt;/a&gt;, and
modified Toga's ReadTheDocs configuration to &lt;a href="https://github.com/beeware/toga/pull/2833"&gt;encourage search engines
to return the stable documentation by
default&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We modified the handling of Toga's app icons on macOS to &lt;a href="https://github.com/beeware/toga/pull/2852"&gt;improve
compatibility with
PyInstaller&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We corrected a number of issues with WebView handling, including
&lt;a href="https://github.com/beeware/toga/pull/2815"&gt;ensuring that DOM storage is always
available&lt;/a&gt;, and &lt;a href="https://github.com/beeware/toga/pull/2781"&gt;improving
error handling when the WebView cannot be initialised on
Windows&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We added protection against an edge case of asynchronous Task handling
that could lead to the &lt;a href="https://github.com/beeware/toga/pull/2814"&gt;premature garbage collection of long lived
tasks&lt;/a&gt;. We've also had some
discussions with the CPython core team about &lt;a href="https://github.com/python/cpython/pull/121264"&gt;fixing this problem in
Python itself&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We spoke at &lt;a href="https://pybay.org"&gt;PyBay&lt;/a&gt; on building mobile apps in
Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;In October, we will continuing working on binary package support for
mobile platforms. In addition to responding to any review feedback on
the patches we've already submitted, we'll be working on new patches for
&lt;code&gt;cibuildwheel&lt;/code&gt; and &lt;code&gt;meson-python&lt;/code&gt;, as well as tooling to make it easy
for third-party libraries to run CPython test suites on mobile
platforms. We should also be able finalise Briefcase's Python 3.13
support for Android, and start work on Android packaging. Supporting
packaging for mobile platforms is a long term project which we expect to
continue for several months; the hope is that by the end of the year, we
will be able to contribute patches to third-party projects so that iOS
and Android wheels become officially produced, rather than
BeeWare-maintained artefacts.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2251"&gt;Update the Toga testbed test suite to use Pixel 7 Pro device
sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1270"&gt;Add support for custom PyPI
repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular
IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/737"&gt;Add an option to select the Android base image when creating new
emulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2305"&gt;Add an API to entirely replace the style of a
widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1876"&gt;Correct the handling of quotation marks in Android
apps&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>August 2024 Status Update</title><link href="http://beeware.org/news/buzz/august-2024-status-update/" rel="alternate"/><updated>2024-09-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:7f59c1f8-3959-3d88-8c2d-22584b6544b1</id><content type="html">&lt;p&gt;August has seen some good progress on BeeWare's support for Python 3.13,
plus a number of long-awaited features landing in a stable release of
Toga.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We've completed the process of backporting the CPython changes for iOS
compatibility to Python 3.9 through 3.12. We've published support
packages and stub binaries that incorporate these changes, and made
the &lt;a href="https://github.com/beeware/briefcase/pull/1934"&gt;changes to Briefcase needed to support these new
versions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've begun work on updating Mobile Forge and related binary tooling
to support the new official binary tag and framework format required
by the PEP-compliant patch for iOS support. So far, we're able to
compile simple binary packages like &lt;code&gt;lru-dict&lt;/code&gt;, and non-Python
dependencies like &lt;code&gt;libjpeg&lt;/code&gt;; we're working on restoring binary support
for more complex binary dependencies.&lt;/li&gt;
&lt;li&gt;We've landed the &lt;a href="https://github.com/python/cpython/pull/121595"&gt;Android test runner
script&lt;/a&gt;, fixed a number
of issues that have arisen in CPython's Android support since the
original patches landed, and &lt;a href="https://buildbot.python.org/#/builders/1594"&gt;deployed an Android CPython
buildbot&lt;/a&gt;. This buildbot
has revealed some edge cases (primarily in socket and signal handling)
that only appear to manifest under the unusual load conditions
generated by a buildbot; so, we've temporarily disabled the buildbot
while we investigate the cause of these problems.&lt;/li&gt;
&lt;li&gt;We completed work on &lt;a href="https://github.com/beeware/toga/pull/2666"&gt;a new API for document-based
apps&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We completed work on &lt;a href="https://github.com/beeware/toga/pull/2768"&gt;an API for status icon
apps&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We released &lt;a href="https://pypi.org/project/toga/0.4.6/"&gt;Toga 0.4.6&lt;/a&gt;. This
includes the support for document-based apps, status icon apps, and a
number of other long-awaited features, such as apps without menubars,
available in a stable release.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/2764"&gt;updated the support for WebView on
Windows&lt;/a&gt; to a more recent
version, and &lt;a href="https://github.com/beeware/toga/pull/2778"&gt;resolved an issue with compatibility with Windows Store
Python&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We diagnosed and contributed fixes for a number of issues in tools
that BeeWare depends on for our build tooling. This includes updates
to CI configurations to support Sphinx 8, &lt;a href="https://github.com/crate/sphinx_csv_filter/pull/49"&gt;fixes for Sphinx 8 support
in a Sphinx
plugin&lt;/a&gt;, and
&lt;a href="https://github.com/twisted/towncrier/issues/632"&gt;diagnosing issues with a recent Towncrier
update&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We presented a keynote at &lt;a href="https://kiwipycon.nz"&gt;Kiwi PyCon&lt;/a&gt; on the
future of Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;In September, we'll be continuing work on binary package support for
mobile platforms. Once we've restored support for binary wheels using
the new binary tag and framework format, and added support for Python
3.13, we'll start upstreaming the changes we've made so that the wider
Python ecosystem can start supporting iOS and Android. We'll also start
working on the fixes to tools like &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;cibuildwheel&lt;/code&gt;, and
&lt;code&gt;meson-python&lt;/code&gt; that need to have explicit iOS support. We expect that
this work will be ongoing for several months, but some of the work
should be submitted upstream for review by the end of the month.&lt;/p&gt;
&lt;p&gt;We'll also be presenting at talk at &lt;a href="https://pybay.org"&gt;PyBay&lt;/a&gt; in San
Francisco on mobile app development in Python, followed by the CPython
core team sprint.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2251"&gt;Update the Toga testbed test suite to use Pixel 7 Pro device
sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1270"&gt;Add support for custom PyPI
repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular
IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/737"&gt;Add an option to select the Android base image when creating new
emulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2305"&gt;Add an API to entirely replace the style of a
widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1876"&gt;Correct the handling of quotation marks in Android
apps&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>July 2024 Status Update</title><link href="http://beeware.org/news/buzz/july-2024-status-update/" rel="alternate"/><updated>2024-08-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:7d863070-d5ba-3f36-b0e0-328691ef5f40</id><content type="html">&lt;p&gt;July saw a lot of our attention being consumed by the upcoming Python
3.13 release; but we've also seen some other improvements to the BeeWare
suite.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We've resolved a number of issues with iOS and Android compatibility
in CPython 3.13. Although patches for iOS and Android compatibility
landed months ago, a number of changes have been landed since then
which have inadvertently broken compatibility with these platforms.
These issues usually indicate a subtle issue with the implementation
of the feature that has been added - but diagnosing and correcting the
source of the problem can often take days. There have also been some
small improvements made to the iOS patches, such as a configuration
option &lt;a href="https://github.com/python/cpython/pull/121947"&gt;ensuring App Store compliance for both iOS and
macOS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've begun the process of backporting the CPython changes for iOS
compatibility to the older supported CPython releases. So far, we've
completed the port to 3.12, and the 3.11 port is mostly complete;
backports for 3.10 and 3.9 should be underway shortly. This includes
&lt;a href="https://github.com/beeware/Python-Apple-support/pull/191"&gt;significant changes to the
Python-Apple-support&lt;/a&gt;
repository, switching the build of the macOS support package to be
based on the official CPython download, and adding a CI test suite
that can be used to simplify the process of making a new release.&lt;/li&gt;
&lt;li&gt;We've almost completed adding a &lt;a href="https://github.com/python/cpython/pull/121595"&gt;test runner script for
Android&lt;/a&gt;. This will
form the basis for an Android CPython buildbot in the very near
future.&lt;/li&gt;
&lt;li&gt;We've added support for &lt;a href="https://github.com/beeware/cpython-apple-source-deps/commit/f2bb2149098083f84da3993db86d1106b90d9456"&gt;using an externally managed libmpdec
implementation&lt;/a&gt;
to the iOS patch. This is a change that was &lt;a href="https://github.com/python/cpython/issues/115119"&gt;recently introduced to
CPython&lt;/a&gt;, and will
become required in CPython 3.15.&lt;/li&gt;
&lt;li&gt;We've &lt;em&gt;almost&lt;/em&gt; completed work on &lt;a href="https://github.com/beeware/toga/pull/2666"&gt;a new API for document-based
apps&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've developed an &lt;a href="https://github.com/beeware/toga/issues/97"&gt;initial design and prototype for status icon
apps&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've added an API to make it &lt;a href="https://github.com/beeware/toga/pull/2714"&gt;easier to add and remove commands from
a Toga app&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We corrected an issue that was causing &lt;a href="https://github.com/beeware/toga/pull/2730"&gt;intermittent Toga CI failures
on macOS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've improved Briefcase's &lt;a href="https://github.com/beeware/briefcase/pull/1915"&gt;validation of the version of Git that a
user has installed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've &lt;a href="https://github.com/beeware/briefcase/pull/1910"&gt;corrected an issue with the way macOS signs
apps&lt;/a&gt;. This was
causing problems with apps that have particularly complex application
layouts.&lt;/li&gt;
&lt;li&gt;We've modified Briefcase to use the &lt;a href="https://github.com/beeware/briefcase/pull/1929"&gt;newly available "stripped" Python
Standalone binaries on
Linux&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've &lt;a href="https://github.com/beeware/briefcase/pull/1846"&gt;improved the validation of document type declarations in a
Briefcase project&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;In August, we'll be continuing preparations for the upcoming Python 3.13
release, and working on the mobile Python binary packaging ecosystem.
The initial release candidate for Python 3.13 will be released very
soon; with any luck, this means there should be less inadvertent
breakages to diagnose, so we can focus on improvements to tools like
&lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;cibuildwheel&lt;/code&gt;, &lt;code&gt;meson-python&lt;/code&gt; and more. We expect that this work
will take most of the rest of the quarter to release; but there should
be some initial signs of progress by the end of the month.&lt;/p&gt;
&lt;p&gt;We'll also be at &lt;a href="https://kiwipycon.nz"&gt;Kiwi PyCon&lt;/a&gt;, presenting a
keynote about the future of Python.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2251"&gt;Update the Toga testbed test suite to use Pixel 7 Pro device
sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1270"&gt;Add support for custom PyPI
repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular
IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/737"&gt;Add an option to select the Android base image when creating new
emulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2305"&gt;Add an API to entirely replace the style of a
widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1876"&gt;Correct the handling of quotation marks in Android
apps&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>2024Q3 Roadmap</title><link href="http://beeware.org/news/buzz/2024q3-roadmap/" rel="alternate"/><updated>2024-07-02T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:73d2d002-10ec-36e0-b26c-6c9739f2d2bd</id><content type="html">&lt;p&gt;We're halfway through the year, and BeeWare has seen another quarter of
significant progress. As always, this roadmap should be read as a guide
to what we aim to focus on over the coming quarter, rather than a hard
commitment of features that will be made available on a specific
deadline.&lt;/p&gt;
&lt;h2&gt;Q2 progress&lt;/h2&gt;
&lt;p&gt;The biggest news for the quarter is that iOS is now officially a Tier 3
supported platform in CPython. All the patches required for iOS
compatibility have been landed, and a buildbot is in place; as of
3.13.0b1, CPython will build for iOS without any patching. Android
support is close behind; the only missing piece is the buildbot.&lt;/p&gt;
&lt;p&gt;We made some major improvements to the BeeWare tutorial, adding sections
on customization of the packaged app, and handling permissions for apps.
We were able to use these changes as part of a well-received tutorial at
PyCon US. We also ran a very successful booth and sprint at PyCon US.&lt;/p&gt;
&lt;p&gt;We also completed a lot of improvements in Briefcase and Toga, expanding
the types of apps that can be supported. Briefcase can now package
console apps; and Toga now has an official API for apps that don't have
menu bars, background apps, and apps that aren't governed by the
lifecycle of a single "main" window. These have been the subject of
long-standing feature requests (some of them almost as old as Toga
itself), so it's great to be able to finally address these limitations.&lt;/p&gt;
&lt;p&gt;The one area where we weren't able to make an progress was in packaging
for mobile platforms. However, we did have some very productive
discussions at PyCon US, so we're confident we'll be able to make good
progress on this in the coming quarter.&lt;/p&gt;
&lt;h2&gt;Q3 priorities&lt;/h2&gt;
&lt;p&gt;The highest priority for Q3 is to get ready for the Python 3.13 release
in early October. This involves finalising the work on the Android
buildbot so that Android is officially Tier 3; preparing Briefcase and
the Python builds that BeeWare supports to be ready for the 3.13
release; and doing as much work as we can on the packaging ecosystem so
that package maintainers can publish wheels for iOS and Android.&lt;/p&gt;
&lt;p&gt;We'll also be attending &lt;a href="https://kiwipycon.nz"&gt;Kiwi PyCon&lt;/a&gt; in August,
and attending the Python Core Team summit in September.&lt;/p&gt;
&lt;h2&gt;Longer term goals&lt;/h2&gt;
&lt;p&gt;Getting the Python ecosystem to support iOS and Android is requires a
lot more than just adding patches to CPython and some related tools.
There will be a lot of education and support work required to help the
community adopt iOS and Android; and there is certain to be ongoing
maintenance as Python and the platforms evolve. There are also many ways
that Python mobile support could be made even better, including the
publication of official iOS and Android binaries, and potentially
getting to Tier 2 (or even Tier 1) support.&lt;/p&gt;
&lt;p&gt;There's also a lot of work that can be done to Toga to make iOS and
Android compelling platforms to develop for. Toga is still missing some
key widgets to support navigation and data organization; and even when
these widgets exist, there will be a need for documentation and examples
to demonstrate how to build apps for these platforms. We anticipate
we'll be looking at these towards the end of the year. We also
anticipate that we'll start looking more seriously at Toga's web
backend, attempting to bring it to a level of support comparable to the
desktop and mobile platforms.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;It's been another busy quarter with a lot of progress, but as always,
there's still plenty to do. Completing official support for iOS and
Android means the foundational work needed to support mobile platforms
will be complete; we can then focus on what we - and the community -
build on that foundation.&lt;/p&gt;
</content></entry><entry><title>June 2024 Status update</title><link href="http://beeware.org/news/buzz/june-2024-status-update/" rel="alternate"/><updated>2024-07-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:d5c031ad-9918-3171-9ead-c576bfd1d711</id><content type="html">&lt;p&gt;In June, BeeWare made a lot of progress, landing lots of new features -
many of which have been the subject of requests and discussions for a
long time.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/1781"&gt;added support for packaging console apps to
Briefcase&lt;/a&gt;. This
involved adding a new &lt;code&gt;.pkg&lt;/code&gt; packaging type for macOS, as well as a
number of other improvements to the stub app and MSI packaging on
Windows. In addition to providing a way to package console apps on
macOS, the addition of &lt;code&gt;.pkg&lt;/code&gt; format means it is now possible to
distribute apps using centralised device management tooling (such as
Kandji or FleetDM).&lt;/li&gt;
&lt;li&gt;We modified Briefcase to &lt;a href="https://github.com/beeware/briefcase/pull/1849"&gt;distribute the stub binaries as standalone
artefacts, rather than including them in the app
template&lt;/a&gt;. We also
&lt;a href="https://github.com/beeware/briefcase/pull/1855"&gt;significantly optimised how Briefcase uses
templates&lt;/a&gt;. Between
these two changes, the download size required for a first project on
macOS has been reduced from around 200MB, to less than 4MB.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/1864"&gt;isolated Briefcase's use of
Cookiecutter&lt;/a&gt; so that
all of Briefcase's cached content is contained in Briefcase's own
cache folder.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/1856"&gt;added support for distribution certificates on
macOS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/2585"&gt;modified Toga's APIs to use namedtuple types for Size and Position
references&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We corrected a number of stability issues with Toga's testbed CI, and
&lt;a href="https://github.com/beeware/toga/pull/2670"&gt;added CI testing for Wayland on
Linux&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We completed a &lt;a href="https://github.com/beeware/toga/pull/2252"&gt;major overhaul of typing in Toga's API
surface&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/2642"&gt;added support for conditional coverage in Toga's
testing&lt;/a&gt;. It is now
possible to get a clean coverage report without running the test suite
on every Python version and every platform.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/2636"&gt;added an official API for customizing the system-installed menu
items&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/1930"&gt;added an API for detecting the screens available for an app to
use, and for setting the position of windows relative to those
screens&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/2649"&gt;added support for "simple"
apps&lt;/a&gt; - apps that don't
have menu bars.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/2651"&gt;added support for apps whose lifecycle isn't tied to a single
"Main" window&lt;/a&gt;, such as
background apps (apps that don't have any windows) and document-based
apps.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/2669"&gt;added support for app modal
dialogs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Work on Toga's App interface isn't quite finished - we're expecting to
finalise the Document API in the near future. Once that work is
complete, our focus will be the mobile Python binary packaging
ecosystem. The work we've done so far this year has led to CPython 3.13
formally supporting iOS and Android as Tier 3 supported platforms; the
next step is ensuring that the rest of the community can build iOS and
Android packages. This will involve improvements to tools like &lt;code&gt;pip&lt;/code&gt;,
&lt;code&gt;cibuildwheel&lt;/code&gt;, &lt;code&gt;meson-python&lt;/code&gt; and more. We expect that this work will
take most of the rest of the quarter to release; but there should be
some initial signs of progress by the end of the month.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2251"&gt;Update the Toga testbed test suite to use Pixel 7 Pro device
sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1270"&gt;Add support for custom PyPI
repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular
IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/737"&gt;Add an option to select the Android base image when creating new
emulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2305"&gt;Add an API to entirely replace the style of a
widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1876"&gt;Correct the handling of quotation marks in Android
apps&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>May 2024 Status Update</title><link href="http://beeware.org/news/buzz/may-2024-status-update/" rel="alternate"/><updated>2024-06-03T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:c66225fd-df0b-372a-acc0-cc3e41cd980e</id><content type="html">&lt;p&gt;BeeWare activity in May was dominated by preparing for and attending
PyCon US in Pittsburgh. That event generated a lot of activity in the
BeeWare project - but we've also added some other significant
improvements.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We attended PyCon US. We presented on the &lt;a href="https://us.pycon.org/2024/events/language-summit/"&gt;state of mobile support in
CPython to the Language
Summit&lt;/a&gt;; we
&lt;a href="https://us.pycon.org/2024/schedule/presentation/41/"&gt;presented a
tutorial&lt;/a&gt; to over
30 attendees; we ran a booth in Community Row; we &lt;a href="https://us.pycon.org/2024/schedule/presentation/40/"&gt;presented a
talk&lt;/a&gt; on writing
a data visualisation app with BeeWare tools; and we ran an extremely
successful sprint. At the peak, we had over 30 people sprinting on
BeeWare projects; and we handed out over 20 challenge coins to first
time contributors. Many of the new features in this status update can
be attributed to contributions from sprint participants.&lt;/li&gt;
&lt;li&gt;We modified Toga's Window API to allow &lt;a href="https://github.com/beeware/toga/pull/2314"&gt;setting the content of the
window when the window is
constructed&lt;/a&gt;, and &lt;a href="https://github.com/beeware/toga/pull/2591"&gt;improved
the APIs for replacing children in an existing window
layout&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We modified how validation of TextInput widgets are handled so that
&lt;a href="https://github.com/beeware/toga/pull/2596"&gt;change handlers aren't invoked until validation has been
performed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We modified how the DetailedList is created on Android so that &lt;a href="https://github.com/beeware/toga/pull/2595"&gt;the
dependency on the native SwipeRefreshLayout widget only exists if your
app actually uses a DetailedList
widget&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/2590"&gt;improved the error handling around camera permissions on
macOS&lt;/a&gt;, and ensured that
&lt;a href="https://github.com/beeware/briefcase/pull/1820"&gt;Briefcase will generate the right permissions for macOS
Sonoma&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We diagnosed some issues associated with code signing on macOS &lt;a href="https://github.com/beeware/briefcase/issues/1808"&gt;when
running on iCloud-mirrored
drives&lt;/a&gt;, and when
&lt;a href="https://github.com/beeware/briefcase/issues/1831"&gt;Git has been configured to preserve Windows
newlines&lt;/a&gt;. We also
&lt;a href="https://github.com/beeware/briefcase/pull/1825"&gt;improved the error handling when notarisation
fails&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/1807"&gt;formally documented the plugin extension points that Briefcase
provides&lt;/a&gt;. With this
formally documented interface, Pygame-CE and
&lt;a href="https://github.com/beeware/briefcase/pull/1834"&gt;PPB&lt;/a&gt;, have taken
formal ownership of their Briefcase bootstraps.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/1812"&gt;formally adopted PEP 621 format for specifying license files in
Briefcase&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/1824"&gt;loosened the restrictions on bundle
identifiers&lt;/a&gt;, and
&lt;a href="https://github.com/beeware/briefcase/pull/1811"&gt;improved handling of applications with special characters in their
formal names&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We developed a draft implementation of a change that will &lt;a href="https://github.com/beeware/briefcase/pull/1781"&gt;allow
Briefcase to package console
applications&lt;/a&gt;. We
expect this change will land in the next week or so, and be released
soon after that.&lt;/li&gt;
&lt;li&gt;We started work on &lt;a href="https://github.com/beeware/briefcase/pull/1849"&gt;removing binary stubs from the macOS and Windows
app templates&lt;/a&gt;. This
was starting to become a significant performance issue for first-time
Briefcase users.&lt;/li&gt;
&lt;li&gt;We improved the mechanism for invoking methods in Rubicon ObjC, making
it possible to &lt;a href="https://github.com/beeware/rubicon-objc/pull/462"&gt;invoke methods with repeated argument
names&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;In June, we're expecting to see progress in three main areas.&lt;/p&gt;
&lt;p&gt;Firstly, we'll be finalising the work on packaging console applications.
We expect to see a Briefcase release by mid month that will incorporate
this, and all the other improvements that have landed over the last
month.&lt;/p&gt;
&lt;p&gt;Secondly, we'll be working on the APIs for the Toga App and Window
classes. We've already done &lt;a href="https://github.com/beeware/toga/pull/2244"&gt;a lot of prototyping work in this
area&lt;/a&gt;; once this work is
complete, Toga should have support for apps without a menubar in their
main window, support for status bar apps without a main window, vastly
improved abilities to customise standard menu items, and a stable API
for document-based apps.&lt;/p&gt;
&lt;p&gt;Thirdly, we'll start looking at the broader CPython binary packaging
ecosystem. The work we've done so far this year has led to CPython 3.13
formally supporting iOS and Android as Tier 3 supported platforms; the
next step is ensuring that the rest of the community can build iOS and
Android packages. This will involve improvements to tools like &lt;code&gt;pip&lt;/code&gt;,
&lt;code&gt;cibuildwheel&lt;/code&gt;, &lt;code&gt;meson-python&lt;/code&gt; and more. We expect that this work will
take much longer than a month to complete, but we hope to be able to
share some progress in June.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2251"&gt;Update the Toga testbed test suite to use Pixel 7 Pro device
sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1270"&gt;Add support for custom PyPI
repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular
IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/394"&gt;Correctly handle incomplete project
deletions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/737"&gt;Add an option to select the Android base image when creating new
emulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2305"&gt;Add an API to entirely replace the style of a
widget&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>April 2024 Status Update</title><link href="http://beeware.org/news/buzz/april-2024-status-update/" rel="alternate"/><updated>2024-05-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:5bd8f895-4317-3dd6-b854-91ea22d08f03</id><content type="html">&lt;p&gt;This month has seen BeeWare reach one major milestone, almost reach a
second, as well as landing several smaller improvements.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;iOS is &lt;a href="https://peps.python.org/pep-0011/#tier-3"&gt;officially a Tier 3 supported platform for
CPython&lt;/a&gt;! All the patches
needed to support iOS have been merged, and a &lt;a href="https://buildbot.python.org/all/#/builders/1380"&gt;buildbot has been
deployed&lt;/a&gt; to verify
that CPython can run on iOS. As a result, &lt;a href="https://peps.python.org/pep-0730/"&gt;PEP 730 has been moved into
"Final" status&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Android support in CPython is getting very close to completion. The
last three patches (adding a &lt;a href="https://github.com/python/cpython/pull/117878"&gt;test harness for running the test suite
on Android&lt;/a&gt;,
&lt;a href="https://github.com/python/cpython/pull/118063"&gt;redirecting stdout and stderr to the Android
log&lt;/a&gt;, and &lt;a href="https://github.com/python/cpython/pull/118352"&gt;updating
sysconfig to support
Android&lt;/a&gt;) are currently
in review; once those have been merged, and a buildbot has been
deployed, Android should also be at Tier 3 status.&lt;/li&gt;
&lt;li&gt;We landed a new &lt;a href="https://github.com/beeware/toga/pull/2462"&gt;Geolocation service for
Toga&lt;/a&gt;, providing access to
GPS data on mobile devices and macOS.&lt;/li&gt;
&lt;li&gt;We made some &lt;a href="https://github.com/beeware/toga/pull/2527"&gt;modifications to how Toga handles application
icons&lt;/a&gt;, removing the need
to duplicate the icon in application data. These changes are in final
review.&lt;/li&gt;
&lt;li&gt;We added a new wizard to &lt;a href="https://github.com/beeware/briefcase/pull/1231"&gt;add a Briefcase configuration to an existing
Python project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/1751"&gt;modified how Briefcase handles splash screens on mobile
devices&lt;/a&gt;, and
corrected some issues with icons seen on recent Android releases.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/rubicon-objc/pull/446"&gt;corrected a problem in Rubicon
ObjC&lt;/a&gt; caused by a
change to the &lt;code&gt;ctypes&lt;/code&gt; module in CPython 3.13. It might be possible to
upstream this fix to CPython itself; but for now, Rubicon ObjC is able
to support Python 3.13.0a6.&lt;/li&gt;
&lt;li&gt;We drafted a new tutorial step about &lt;a href="https://github.com/beeware/beeware/pull/327"&gt;customising application
appearance&lt;/a&gt;. This update
is in review, and should be live in the near future.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;The bulk of May will be taken up by preparing for and attending PyCon
US. We're presenting a
&lt;a href="https://us.pycon.org/2024/schedule/presentation/40/"&gt;talk&lt;/a&gt; and a
&lt;a href="https://us.pycon.org/2024/schedule/presentation/41/"&gt;tutorial&lt;/a&gt;; we're
also &lt;a href="https://us.pycon.org/2024/events/language-summit/"&gt;presenting at the Language
Summit&lt;/a&gt;, we will have
a booth in the community section of the Expo Hall, and we'll be there
for the first 3 days of the sprints. If you're coming to Pittsburgh and
you'd like to attend that tutorial session, &lt;a href="https://us.pycon.org/2024/attend/information/"&gt;ticket sales are
open!&lt;/a&gt;. We're also hoping
that we'll be able to wrap up the work on Android support in CPython,
and start work on supporting command line applications in Briefcase.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2251"&gt;Update the Toga testbed test suite to use Pixel 7 Pro device
sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1270"&gt;Add support for custom PyPI
repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular
IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/394"&gt;Correctly handle incomplete project
deletions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/737"&gt;Add an option to select the Android base image when creating new
emulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1472"&gt;Print notarisation log failures when building macOS
apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2301"&gt;Add an API to replace a child of a
widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2305"&gt;Add an API to entirely replace the style of a
widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2307"&gt;Add the ability to define content when creating a
window&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>2024Q2 Roadmap</title><link href="http://beeware.org/news/buzz/2024q2-roadmap/" rel="alternate"/><updated>2024-04-03T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:5596f753-f74e-31b8-b0da-960c58e6e73a</id><content type="html">&lt;p&gt;Q1 2024 has seen some major progress - but as always, there's still
plenty of work to do. As always, this roadmap should be read as a guide
to what we aim to focus on over the coming quarter, rather than a hard
commitment of features that will be made available on a specific
deadline.&lt;/p&gt;
&lt;h2&gt;Q1 progress&lt;/h2&gt;
&lt;p&gt;The first quarter of 2024 has seen significant progress towards getting
iOS and Android to Tier 3 supported status in CPython. &lt;a href="https://peps.python.org/pep-0738/"&gt;PEP
738&lt;/a&gt; has been formally accepted by
the CPython steering committee, and the vast majority of the changes
needed to support &lt;a href="https://github.com/python/cpython/issues/114099"&gt;iOS&lt;/a&gt;
and &lt;a href="https://github.com/python/cpython/issues/116622"&gt;Android&lt;/a&gt; have
either been merged, or received substantial review from the CPython core
team.&lt;/p&gt;
&lt;p&gt;We've also made progress on a number of long standing feature requests
in Toga. We've added an OptionContainer for Android, so tab-based UIs
can be used on all platforms. We've added a MapView widget that works on
all desktop and mobile platforms. We've also added the start of hardware
APIs, including Camera and Geolocation APIs.&lt;/p&gt;
&lt;h2&gt;Q2 priorities&lt;/h2&gt;
&lt;p&gt;Our Q2 goals are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Get iOS and Android to Tier 3 supported status&lt;/strong&gt;. We expect to
finish upstreaming the patches we have for CPython early in the
quarter. However, Tier 3 status also requires CI infrastructure to
verify that the platforms are stable. In Q2, we will commission
buildbots so that CPython's CI is able to verify the ongoing stability
of iOS and Android as a platform.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extend the BeeWare tutorial&lt;/strong&gt;. The BeeWare tutorial provides a good
introduction to using Briefcase and Toga, but there are a number of
common support questions that aren't covered by the tutorial, and some
features that we've added since the tutorial last saw significant
edits. We're going to revisit the tutorial, adding some extra steps to
cover these new features and common issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Attend PyCon US 2024&lt;/strong&gt; We're presenting a tutorial and a talk; we
will have a booth in the community section; we'll be there for the
full duration of the sprints; and we're also expecting to attend the
language summit. It's going to be a busy 2 weeks - we hope we see you
there!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Start working on packaging for mobile platforms&lt;/strong&gt;. PEP 730 and PEP
738 cover the core of CPython itself, but Python is much more than
just the core interpreter and standard library. There's also the
ecosystem of third-party libraries, many of which have binary
components. In this quarter, we're going to start looking at the
changes that are needed to make it easy for the community to start
packaging wheels for iOS and Android.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modify the App class to support other types of apps&lt;/strong&gt;. This includes
adding an API for a "Simple App" that doesn't have a menu bar,
finalising the API for document-based apps, and providing an API for
system tray apps.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Longer term goals&lt;/h2&gt;
&lt;p&gt;Completing PEP 730 and 738 is a major milestone - but there's still a
lot of work to be done. It will take a lot of time and community
education before iOS and Android binary packages are widely available.
We intend to do whatever we can to support the community, ranging from
documentation, to tooling support, to submitting patches to upstream
packages.&lt;/p&gt;
&lt;p&gt;One of the ways to accelerate this transition will be to make iOS and
Android compelling platforms to support. This means adding more
capabilities to Toga, so that there aren't any capability gaps for a
user writing an app. It also means writing more documentation and
tutorials so that common app development tasks are well explained.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;This month marks 2 years since full-time work began on BeeWare; and 10
years since the first commits on the project. We've come a long way in
that time - from a collection of cobbled-together proof of concept
demonstrators to a fully tested GUI platform, with equally tested
deployment tooling, and official support in CPython itself. The future
for Python as a GUI development platform on desktop and mobile has never
looked better, and we're excited to see what the coming years will
bring.&lt;/p&gt;
</content></entry><entry><title>March 2024 Status Update</title><link href="http://beeware.org/news/buzz/march-2024-status-update/" rel="alternate"/><updated>2024-04-02T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:a2dd4659-2ebb-318d-a06d-9f512edf9bba</id><content type="html">&lt;p&gt;This month, we have less to report by raw feature count - but the
changes we &lt;em&gt;have&lt;/em&gt; made represent extremely significant progress.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Our primary focus this month has been making the changes to CPython
needed to add support for
&lt;a href="https://github.com/python/cpython/issues/114099"&gt;iOS&lt;/a&gt; and
&lt;a href="https://github.com/python/cpython/issues/116622"&gt;Android&lt;/a&gt;. We've made
major progress towards this goal: all the patches required for iOS
have been merged; a large number of patches have been submitted for
Android, with only a small number still required. This month, we have:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/115918"&gt;Added test exclusions to support running the test suite on
Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/115955"&gt;Fixed some issues with the process of building an Android
libPython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/116215"&gt;Modified sys.platform identification for Android so it returns
"android" not
"linux"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/116674"&gt;Added an API to get device and OS information on
Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/116379"&gt;Modified ctypes so it can load libraries on
Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/116423"&gt;Modified a signals test to make it more reliable on more
platforms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/116426"&gt;Added a build script and instructions for Android
builds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/116454"&gt;Added a custom module loader so that iOS apps can load binary
modules from
Frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/116758"&gt;Modified test_doctest to support platforms that don't support
subprocesses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/117052"&gt;Modified the standard library to support
iOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/117057"&gt;Added documentation for the iOS
platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/117299"&gt;Corrected some additional test failures introduced on
Android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://peps.python.org/pep-0738/"&gt;PEP 738&lt;/a&gt;, adding official Android
support to CPython, has been formally approved by the Python Steering
Council.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/python/devguide/pull/1296"&gt;updated the CPython Developer Guide to describe the iOS
development process&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/1687"&gt;improved Briefcase's handling of stdout for some
tools&lt;/a&gt;. We're hoping
this will fix - or at least make it easier to diagnose - a mode of
failure we've had reported for the Android emulator on Windows.&lt;/li&gt;
&lt;li&gt;We added &lt;a href="https://github.com/beeware/briefcase/pull/1676"&gt;color to Android's log
output&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/2415"&gt;corrected the handling of key shortcuts on Window and
GTK&lt;/a&gt;, adding a lot of key
combinations that weren't previously possible to represent.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/2463"&gt;restructured the Toga documentation landing
page&lt;/a&gt;, making it easier to
find the documentation you're likely to need.&lt;/li&gt;
&lt;li&gt;We landed the &lt;a href="https://github.com/beeware/toga/pull/2379"&gt;MapView
widget&lt;/a&gt;, and have completed
most of the work on a new &lt;a href="https://github.com/beeware/toga/pull/2462"&gt;Geolocation
service&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;In April, we're hoping to wrap up the work on iOS and Android patches
for CPython, and add buildbots for those platforms. With the buildbots
in place, iOS and Android will officially be Tier 3 supported CPython
platforms. We also plan to revisit the BeeWare tutorial, adding some
more steps in preparation for a &lt;a href="https://us.pycon.org/2024/schedule/presentation/41/"&gt;tutorial presentation at PyCon
US&lt;/a&gt; in May. If
you're coming to Pittsburgh and you'd like to attend that tutorial
session, &lt;a href="https://us.pycon.org/2024/attend/information/"&gt;ticket sales are
open!&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2251"&gt;Update the Toga testbed test suite to use Pixel 7 Pro device
sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1270"&gt;Add support for custom PyPI
repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular
IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/394"&gt;Correctly handle incomplete project
deletions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/737"&gt;Add an option to select the Android base image when creating new
emulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1472"&gt;Print notarisation log failures when building macOS
apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2301"&gt;Add an API to replace a child of a
widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2305"&gt;Add an API to entirely replace the style of a
widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2307"&gt;Add the ability to define content when creating a
window&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>February 2024 Status Update</title><link href="http://beeware.org/news/buzz/february-2024-status-update/" rel="alternate"/><updated>2024-02-29T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:68c85915-b323-388e-a5bb-1c9930d21c0d</id><content type="html">&lt;p&gt;February may be the shortest month, but that doesn't mean we've got any
less progress to report!&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://peps.python.org/pep-0738/"&gt;PEP 738&lt;/a&gt;, adding official Android
support to CPython, has been formally submitted to the Python Steering
Council for approval.&lt;/li&gt;
&lt;li&gt;We've started landing patches in CPython to add formal support for
&lt;a href="https://github.com/python/cpython/issues/114099"&gt;iOS&lt;/a&gt; and
&lt;a href="https://github.com/python/cpython/issues/71052"&gt;Android&lt;/a&gt;. There are
more patches in review, and more to come, but so far we've landed
patches that:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/114876"&gt;Fix the compilation of the grp module on
Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/114889"&gt;Disable tests that can't run on mobile
platforms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/115120"&gt;Refactor the CPython build system to allow for some of the oddities
of iOS as a platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/115390"&gt;Add build targets for compiling iOS-compatible
frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/115780"&gt;Correct the linking of extension modules on
Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/115917"&gt;Enable the concurrent.futures tests on platforms that don't support
multiprocessing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We added macOS ARM64 machines to our CI capabilities for
&lt;a href="https://github.com/beeware/toga/pull/2404"&gt;Toga&lt;/a&gt; and
&lt;a href="https://github.com/beeware/briefcase/pull/1652"&gt;Briefcase&lt;/a&gt;. We've
officially supported ARM64 on macOS for some time, but we've been
unable to test this support as part of our CI and release procedure -
we've had to do ad-hoc testing on the machines we're using to develop
on a day to day basis. As a result of improvements to GitHub's CI
infrastructure, we're now able to perform automated testing. As part
of these changes, we've also added testing for Python 3.13 (which will
be released around October of this year).&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/1930"&gt;added an API for detecting the displays attached to a computer,
and specifying the location of windows relative to those
displays&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/2387"&gt;added a pluggable API for image
formats&lt;/a&gt;. With this API,
any third party library that has an internal format for images can
implement support so that Toga can convert to and from images in that
format.&lt;/li&gt;
&lt;li&gt;We've significantly improved shortcut key handling on GTK and
WinForms, including &lt;a href="https://github.com/beeware/toga/pull/2415"&gt;improved coverage of non-alphanumeric
keys&lt;/a&gt;, and support for
&lt;a href="https://github.com/beeware/toga/pull/2232"&gt;numpad keys&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've &lt;a href="https://github.com/beeware/toga/pull/2379"&gt;added a MapView
widget&lt;/a&gt;. This widget is in
final review, but should land very soon.&lt;/li&gt;
&lt;li&gt;We've improved error handling when the &lt;a href="https://github.com/beeware/briefcase/pull/1630"&gt;Android emulator fails to
start&lt;/a&gt;. This should
hopefully make it easier to identify the source of any emulator
failures.&lt;/li&gt;
&lt;li&gt;We've added the ability to run &lt;a href="https://github.com/beeware/briefcase/pull/1603"&gt;Linux apps that have been built for
different platforms&lt;/a&gt;.
Using Docker, it's now possible to run a Fedora system app on an
Ubuntu machine, or any other combination of supported platforms.&lt;/li&gt;
&lt;li&gt;We've added the ability to &lt;a href="https://github.com/beeware/briefcase/pull/1661"&gt;pass extra arguments to Docker when
building images&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've &lt;a href="https://github.com/beeware/briefcase/pull/1649"&gt;improved the console output for non-interactive
consoles&lt;/a&gt; on some
long-running commands.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;In March, we will continue to focus on iOS and Android patches for
CPython; if all goes extremely well, the bulk of patches should be
upstream (or at least submitted for review) by the end of the month.
While we're waiting for CPython patches to be reviewed, we'll be adding
geolocation APIs to Toga.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2251"&gt;Update the Toga testbed test suite to use Pixel 7 Pro device
sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1270"&gt;Add support for custom PyPI
repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular
IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/394"&gt;Correctly handle incomplete project
deletions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/737"&gt;Add an option to select the Android base image when creating new
emulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1472"&gt;Print notarisation log failures when building macOS
apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2301"&gt;Add an API to replace a child of a
widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2305"&gt;Add an API to entirely replace the style of a
widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2307"&gt;Add the ability to define content when creating a
window&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>January 2024 Status Update</title><link href="http://beeware.org/news/buzz/january-2024-status-update/" rel="alternate"/><updated>2024-02-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:24b8caca-5534-30eb-8e14-9985a45a89cb</id><content type="html">&lt;p&gt;January has seen some long awaited and high profile features added to
BeeWare.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://peps.python.org/pep-0738/"&gt;PEP 738&lt;/a&gt;, formalizing the
introduction of Android as a Tier 3 platform in CPython, has been
formally accepted as a draft. We're now revising the draft following
community feedback, in anticipation of submitting the PEP for formal
approval in the near future.&lt;/li&gt;
&lt;li&gt;We added a cross-platform Camera API to Toga. This API has been
&lt;a href="https://github.com/beeware/toga/pull/2266"&gt;implemented for iOS and
macOS&lt;/a&gt;; the &lt;a href="https://github.com/beeware/toga/pull/2353"&gt;implementation
for Android&lt;/a&gt; is in final
review.&lt;/li&gt;
&lt;li&gt;We added an &lt;a href="https://github.com/beeware/toga/pull/2350"&gt;OptionContainer widget for
Android&lt;/a&gt;. This now means
that OptionContainer is available on every desktop and mobile
platform.&lt;/li&gt;
&lt;li&gt;We added the ability to &lt;a href="https://github.com/beeware/toga/pull/2310"&gt;define a button with an
Icon&lt;/a&gt;. In addition, we've
added some &lt;a href="https://github.com/beeware/toga/pull/2348"&gt;major clarifications to the documentation about the
difference between an Icon and an
Image&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/2320"&gt;reworked the way that widget IDs are
handled&lt;/a&gt;. This change was
required due to a bug caused by the interaction of Python's garbage
collector and the widget registry that prevented the re-use of widget
IDs in some situations. The new implementation means that the widget
registry behaves a lot more like a browser's DOM - a widget can only
be discovered by ID when it is actually part of a widget layout.&lt;/li&gt;
&lt;li&gt;We added Briefcase support for &lt;a href="https://github.com/beeware/briefcase/pull/1596"&gt;Python 3.12 on
Android&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We added a mechanism for &lt;a href="https://github.com/beeware/briefcase/pull/1599"&gt;defining app
permissions&lt;/a&gt; in your
Briefcase project.&lt;/li&gt;
&lt;li&gt;We added the ability for Android projects to &lt;a href="https://github.com/beeware/briefcase/pull/1610"&gt;declare the native
Android libraries that they depend
on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've been polishing the CPython patches necessary to support iOS and
Android, in anticipation of submitting these patches upstream. To
follow progress on this work, subscribe to the CPython tickets for
&lt;a href="https://github.com/python/cpython/issues/114099"&gt;iOS support&lt;/a&gt; and
&lt;a href="https://github.com/python/cpython/issues/71052"&gt;Android support&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;In February, we'll be focusing on the iOS and Android patches to
CPython, and the finalisation of &lt;a href="https://peps.python.org/pep-0738/"&gt;PEP
738&lt;/a&gt;. While we're waiting for CPython
patches to be reviewed, we'll be looking into geolocation and mapping
functionality.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2251"&gt;Update the Toga testbed test suite to use Pixel 7 Pro device
sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1270"&gt;Add support for custom PyPI
repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular
IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/394"&gt;Correctly handle incomplete project
deletions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/737"&gt;Add an option to select the Android base image when creating new
emulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1472"&gt;Print notarisation log failures when building macOS
apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2301"&gt;Add an API to replace a child of a
widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2305"&gt;Add an API to entirely replace the style of a
widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2307"&gt;Add the ability to define content when creating a
window&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>2024Q1 Roadmap</title><link href="http://beeware.org/news/buzz/2024q1-roadmap/" rel="alternate"/><updated>2024-01-10T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:399d0963-fe14-334f-9dd7-de0037271dac</id><content type="html">&lt;p&gt;It's the start of a new year, which means it's time to cast our minds
forward to what BeeWare will bring in the coming year. 2023 saw some
major milestones in stability and features; in 2024, we're going to
build on that foundation. As always, this roadmap should be read as a
guide to what we aim to focus on over the coming quarter, rather than a
hard commitment of features that will be made available on a specific
deadline.&lt;/p&gt;
&lt;h2&gt;Q4 progress&lt;/h2&gt;
&lt;p&gt;During the last quarter of 2024, we finally finished our audit and
testing of Toga. We now have 100% branch coverage on every line of
Toga's core, and on the macOS, Windows, GTK, Android and iOS backends.
We published &lt;a href="https://pypi.org/project/toga/0.4.0/"&gt;Toga 0.4&lt;/a&gt;,
incorporating all these changes - but it also meant that we were able to
start adding &lt;em&gt;new&lt;/em&gt; features to Toga, including an OptionContainer widget
on iOS, and a draft of a Camera API for iOS and macOS. Toga's new test
framework has made adding these new features must easier - for example,
we were able to very rapidly identify (and resolve) gaps in
functionality in the new iOS OptionContainer widget by running the
existing test suite on a new implementation. We expect that this testing
foundation will continue to serve us well as we add more features in the
coming year.&lt;/p&gt;
&lt;p&gt;The other major development for the quarter was the start of the
upstreaming process for Python on mobile platforms.
&lt;a href="https://peps.python.org/pep-0730/"&gt;PEP730&lt;/a&gt;, proposing the addition of
iOS to the Tier 3 supported list of CPython core, has been ratified by
the steering council; and
&lt;a href="https://discuss.python.org/t/pep-738-adding-android-as-a-supported-platform/40975"&gt;PEP738&lt;/a&gt;,
proposing the same for Android, is in draft form. The first patch
contributing towards iOS support has already landed.&lt;/p&gt;
&lt;h2&gt;Q1 priorities&lt;/h2&gt;
&lt;p&gt;Our Q1 goals are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Complete upstreaming iOS and Android support patches to CPython
core&lt;/strong&gt;. We will finalise PEP738 and submit it for ratification; and
we'll continue upstreaming the iOS and Android patches that we've been
maintaining independently. This work has a hard deadline of May 7, as
that is when Python 3.13.0b1 is planned, which is the feature cutoff
for Python 3.13 development, so making sure we hit that deadline will
be our main priority.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Add OptionContainer for Android&lt;/strong&gt;. The implementation on iOS was
relatively straightforward; we have no reason to believe that the
Android implementation will be any more complicated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Complete the implementation of the Camera API&lt;/strong&gt;. We have a draft PR
implementing a Camera API on macOS and iOS; we'll extend this API to
Android, and complete the work on Briefcase that is needed to add
support for permissions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Add an API for geolocation, and a Map widget&lt;/strong&gt;. Geolocation is
another major hardware features that is common on phones; we need to
write a cross-platform layer for that hardware, plus add a native
mapping widget to show off this capability.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Longer term goals&lt;/h2&gt;
&lt;p&gt;For the remainder of this year, you can expect to see three major themes
in BeeWare development.&lt;/p&gt;
&lt;p&gt;Firstly, we're going to continue to work upstreaming the work BeeWare
has done in the mobile space into the wider CPython community. Once iOS
and Android have been incorporated into CPython core, the focus will
move to the packaging ecosystem. This means adding official support to
upload iOS and Android packages to PyPI, and making it easy for third
party projects to incorporate iOS and Android builds into their release
processes.&lt;/p&gt;
&lt;p&gt;Secondly, we'll be increasing our efforts in education and training.
BeeWare has a tutorial that we're extremely proud of - but there are
many things we could add to that tutorial, and there are plenty of "How
To" and topic guides that could be written for those who have finished
the tutorial and want to try more advanced ideas.&lt;/p&gt;
&lt;p&gt;Thirdly, we'll continue to expand the capabilities of Toga. There are a
handful of high profile widgets and capabilities that have been
patiently waiting for us to have a stable platform to build on, and the
spare capacity to implement them - features like a Radio Button widget,
Trees and Tables on mobile platforms, a cross-platform Settings API, and
cross-platform cloud file access.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;2024 promises to be a very exciting year for BeeWare. For the last 2
years, we've been focused on consolidating and stabilizing existing
features. That work is coming to a close, which will allow us to turn
our attention to building new features that show off the stable
foundation we've built, and to providing the resources that will allow
more users to try BeeWare for themselves.&lt;/p&gt;
</content></entry><entry><title>December 2023 Status Update</title><link href="http://beeware.org/news/buzz/december-2023-status-update/" rel="alternate"/><updated>2023-12-31T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:b5114579-d374-3753-af9d-02b7e5e0b29f</id><content type="html">&lt;p&gt;December has been a short month due to end-of-year holidays, but BeeWare
has still made some important progress.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://peps.python.org/pep-0730/"&gt;PEP730&lt;/a&gt;, formalizing the
introduction of iOS as a Tier 3 platform in CPython, has been
&lt;a href="https://github.com/python/steering-council/issues/218#issuecomment-1839333665"&gt;ratified by the CPython Steering
Council&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/python/cpython/pull/112738"&gt;first patch to CPython that explicitly mentions
iOS&lt;/a&gt; has been merged.
This is a relatively minor change that is required for building
cross-platform binary modules; we'll start submitting more substantial
patches in the new year.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://peps.python.org/pep-0738/"&gt;PEP738&lt;/a&gt;, formalizing the
introduction of Android as a Tier 3 platform in CPython, has been
drafted, and is &lt;a href="https://discuss.python.org/t/pep-738-adding-android-as-a-supported-platform/40975"&gt;currently under
discussion&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chaquo.com/chaquopy/chaquopy-version-15-0-1/"&gt;Chaquopy 15 was
released&lt;/a&gt;,
adding support for Python 3.12 on Android. This release also improves
compatibility with Android Studio's transition away from Groovy,
towards Kotlin for configuration.&lt;/li&gt;
&lt;li&gt;An &lt;a href="https://github.com/beeware/toga/pull/2259"&gt;implementation of OptionContainer was added for
iOS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A number of improvements were made to image handling, including
&lt;a href="https://github.com/beeware/toga/pull/2263"&gt;optimizations when creating images from internal
APIs&lt;/a&gt;, and a &lt;a href="https://github.com/beeware/toga/pull/2276"&gt;correction to
flexible image resizing
behavior&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/beeware/toga/pull/2291"&gt;long standing bug that would cause macOS tables to
crash&lt;/a&gt; was resolved.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/beeware/toga/pull/2260"&gt;ability to define platform-specific
icons&lt;/a&gt; was added to Toga.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/toga/0.4.1/"&gt;Toga 0.4.1 was released&lt;/a&gt;,
incorporating the features and bug fixes from the last 2 months.&lt;/li&gt;
&lt;li&gt;Work has begun on a &lt;a href="https://github.com/beeware/toga/pull/2266"&gt;cross-platform Camera
API&lt;/a&gt; . This currently works
on iOS, with a draft implementation on macOS. Before this work can
land, we need to &lt;a href="https://github.com/beeware/briefcase/issues/547"&gt;add support in Briefcase for declaring
permissions&lt;/a&gt;; a
design for this has been proposed, and will be implemented early in
the new year.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;When we return from the end-of-year break, we'll be back into developing
Toga. In the near future, you should see an OptionContainer on Android,
and permission support in Briefcase; once that work is wrapped, we'll
start looking at more more hardware APIs and missing widgets. You should
also start to see more patches land in CPython to support iOS, and the
finalisation of &lt;a href="https://peps.python.org/pep-0738/"&gt;PEP 738&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2251"&gt;Update the Toga testbed test suite to use Pixel 7 Pro device
sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1270"&gt;Add support for custom PyPI
repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular
IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/394"&gt;Correctly handle incomplete project
deletions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/737"&gt;Add an option to select the Android base image when creating new
emulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1472"&gt;Print notarisation log failures when building macOS
apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2301"&gt;Add an API to replace a child of a
widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2305"&gt;Add an API to entirely replace the style of a
widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2307"&gt;Add the ability to define content when creating a
window&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>November 2023 Status Update</title><link href="http://beeware.org/news/buzz/november-2023-status-update/" rel="alternate"/><updated>2023-12-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:830b2374-c2e9-375c-83e9-015b21f3a1f7</id><content type="html">&lt;p&gt;November has been a month of focus on the code that enables us to run
Python on iOS and Android - but there has still been some other high
profile developments in other parts of BeeWare.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://peps.python.org/pep-0730/"&gt;PEP730&lt;/a&gt;, formalizing the
introduction of iOS as a Tier 3 platform in CPython, has been
&lt;a href="https://github.com/python/steering-council/issues/218"&gt;submitted to the Python Steering Council for
ratification&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;One of the major topics covered by the &lt;a href="https://discuss.python.org/t/pep-730-adding-ios-as-a-supported-platform/35854"&gt;discussion about
PEP730&lt;/a&gt;
was the use of a deprecated compiler argument. This led to some
re-examination of how CPython could be delivered on iOS without using
that argument. As a result of that discussion, modifications to &lt;a href="https://github.com/beeware/Python-Apple-support/pull/191"&gt;use
CPython as a dynamically loaded
framework&lt;/a&gt;
have been prepared. Although the original focus of this work was iOS,
the same change will be also used for macOS - which means BeeWare no
longer needs to compile a macOS support package (although we will
still be lightly re-packaging the official CPython installer).&lt;/li&gt;
&lt;li&gt;We modified Toga's Image APIs so that &lt;a href="https://github.com/beeware/toga/pull/2231"&gt;Pillow images can be used as
source data&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/2230"&gt;switched CI testing of Android apps to use a Linux
machine&lt;/a&gt;. This wasn't
previously possible, because GitHub didn't expose the necessary
permissions in their Linux images; however, now that &lt;em&gt;is&lt;/em&gt; possible,
our Android tests run up to 5 times faster, and are less likely to be
held up in CI because of availability of macOS testing machines.&lt;/li&gt;
&lt;li&gt;We corrected an issue on macOS where an OS-level setting controlling
the use of tabs could &lt;a href="https://github.com/beeware/toga/pull/2218"&gt;cause test failures in the Toga test
suite&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;There have been some extended discussions and draft PRs related to
Toga's &lt;a href="https://github.com/beeware/toga/pull/2244"&gt;Application base
class&lt;/a&gt;, and the addition of
support for &lt;a href="https://github.com/beeware/toga/pull/2238"&gt;status icons&lt;/a&gt;.
These PRs are still in active development, but they will open up some
interesting possibilities for Toga apps when they are completed.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/pull/1550"&gt;Briefcase&lt;/a&gt;,
&lt;a href="https://github.com/beeware/toga/pull/2229"&gt;Toga&lt;/a&gt; and &lt;a href="https://github.com/beeware/rubicon-objc/pull/387"&gt;Rubicon
ObjC&lt;/a&gt; were all
modified to use PEP621 metadata, removing the need for &lt;code&gt;setup.cfg&lt;/code&gt;,
&lt;code&gt;setup.py&lt;/code&gt;, and &lt;code&gt;MANIFEST.in&lt;/code&gt; files. As part of this change, we wrote
a new &lt;a href="https://github.com/beeware/setuptools_dynamic_dependencies"&gt;setuptools
plugin&lt;/a&gt; to
allow for dependencies to be dynamically defined.&lt;/li&gt;
&lt;li&gt;We modified Briefcase so that &lt;a href="https://github.com/beeware/briefcase/pull/1552"&gt;answers to the new project
wizard&lt;/a&gt; and &lt;a href="https://github.com/beeware/briefcase/pull/1542"&gt;values
for configuration settings when running
commands&lt;/a&gt; can be
overridden at the command line. This is mostly useful for testing
purposes - it's now possible to generate a project and build it
against a local template or support package build without needing to
modify a &lt;code&gt;pyproject.toml&lt;/code&gt; file or override input handling.&lt;/li&gt;
&lt;li&gt;We refactored the new project wizard so that &lt;a href="https://github.com/beeware/briefcase/pull/1524"&gt;support for GUI toolkits
is generated by an extensible
plugin&lt;/a&gt;. Although we
still ship with support for Toga, PySide, Pygame and PPB, this support
is provided through a public interface, allowing other GUI toolkits to
provide Briefcase with toolkit-specific modifications to the new
project.&lt;/li&gt;
&lt;li&gt;We switched the default Android skin used by Briefcase from the &lt;a href="https://github.com/beeware/briefcase/pull/1554"&gt;Pixel
3a device skin to the Pixel 7
skin&lt;/a&gt;. This is an
entirely cosmetic change, but it does mean that screenshots will use a
device that looks a little more modern.&lt;/li&gt;
&lt;li&gt;We've made significant progress on the &lt;a href="https://github.com/chaquo/chaquopy/milestone/3"&gt;modifications to Chaquopy to
support CPython 3.12&lt;/a&gt;.
This support will hopefully be released at the same time as the
upcoming Android Studio "Hedgehog" release.&lt;/li&gt;
&lt;li&gt;We've made significant progress on running CPython's unit test suite
on iOS in a CI configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;We won't see as much progress as normal in December as a result of the
end-of-year holidays. However, before we sign off for the year, we're
hoping to start looking at OptionContainer on mobile platforms, and
possibly start looking at Camera API support.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/2251"&gt;Update the Toga testbed test suite to use Pixel 7 Pro device
sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1270"&gt;Add support for custom PyPI
repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular
IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/394"&gt;Correctly handle incomplete project
deletions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/737"&gt;Add an option to select the Android base image when creating new
emulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1472"&gt;Print notarisation log failures when building macOS
apps&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>October 2023 Status Update</title><link href="http://beeware.org/news/buzz/october-2023-status-update/" rel="alternate"/><updated>2023-11-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:95b88748-d1ca-3d2f-b288-d494408b264c</id><content type="html">&lt;p&gt;In October, we've (finally!) reached a major milestone - but there's
still lots of work to be done!&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;We finally finished the Toga audit!!&lt;/em&gt;. We now have 100% test coverage
of all Toga code on macOS, Windows, Linux/GTK, iOS and Android, with a
consistent and fully documented API across all widgets. This has been
a truly mammoth project, resolving countless bugs, adding dozens of
new features, and improving platform support (especially on Windows
and Android). Once we've finalised a couple of housekeeping issues, we
will release Toga 0.4 incorporating all these changes. This will
hopefully occur later this week.&lt;/li&gt;
&lt;li&gt;We attended the &lt;a href="https://discuss.python.org/t/2023-core-dev-sprint-in-brno-october-9-14/22868/21"&gt;Python Core Team
Sprint&lt;/a&gt;
at the RedHat offices in Brno, Czechia. As a result of this
attendance, we produced a draft of &lt;a href="https://discuss.python.org/t/pep-730-adding-ios-as-a-supported-platform/35854"&gt;PEP
730&lt;/a&gt;,
which is the first step towards formalizing support for iOS in
CPython. An analogous Android PEP will be drafted once we've sorted
out the process around the iOS PEP (as this is the first time a
platform has gone through a formal process to be added to PEP 11's
Tier 3 list).&lt;/li&gt;
&lt;li&gt;We reworked the build system for Apple support packages to &lt;a href="https://github.com/beeware/cpython-apple-source-deps"&gt;separate
the compilation of
dependencies&lt;/a&gt;
(like BZip2 and OpenSSL) from the compilation of Python itself. These
libraries are updated infrequently, and on a completely different
cadence to CPython itself, so treating them as re-usable resources
rather than something that needs to be compiled at the same time as
Python will significantly improve CPython build times.&lt;/li&gt;
&lt;li&gt;We released &lt;a href="https://pypi.org/project/briefcase/0.3.16/"&gt;Briefcase
0.3.16&lt;/a&gt;, formalizing our
support for Python 3.12, and adding the new support for dynamic
libraries on iOS. This release also formally downgrades our support
for AppImage, following extended problems in supporting AppImage as an
output format.&lt;/li&gt;
&lt;li&gt;We released &lt;a href="https://pypi.org/project/rubicon-objc/0.4.7/"&gt;Rubicon ObjC
0.4.7&lt;/a&gt;, formalising our
support for Python 3.12.&lt;/li&gt;
&lt;li&gt;We modified Briefcase to ensure that &lt;a href="https://github.com/beeware/briefcase/pull/1475"&gt;macOS apps are universal by
default&lt;/a&gt;, with an
&lt;a href="https://github.com/beeware/briefcase/issues/1482"&gt;option to request a single-architecture
build&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We added a &lt;a href="https://github.com/beeware/briefcase/pull/1470"&gt;deep debug logging
level&lt;/a&gt; to Briefcase,
and &lt;a href="https://github.com/beeware/briefcase/pull/1503"&gt;simplified the output of many other commands to ensure that
important warnings aren't
lost&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/2151"&gt;added support for Undo and Redo operations on macOS text
widgets&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/1399"&gt;added support for user-registered fonts on iOS and
macOS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We made some modifications to &lt;a href="https://github.com/beeware/toga/pull/2066"&gt;improve Toga's memory management when
creating and destroying
windows&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Now that we've &lt;em&gt;finally&lt;/em&gt; finished the widget audit, we can finally
release Toga 0.4, and start using the foundation that we've spent the
last 12 months building.&lt;/p&gt;
&lt;p&gt;In November, we'll start the work of upstreaming iOS patches to CPython
core. The PEP we've drafted is nearing a form where it can be submitted
to the Steering Council for approval, but the drafting process has
raised a couple of technical issues that need to be investigated.
However, while we wait for formal acceptance of the PEP, we will
continue working on building continuous integration for our iOS CPython
builds, and begin preparing patches that can be merged into CPython.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1115"&gt;Provide an option to override app settings from the command
line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1270"&gt;Add support for custom PyPI
repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular
IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/394"&gt;Correctly handle incomplete project
deletions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/737"&gt;Add an option to select the Android base image when creating new
emulators&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>2023Q4 Roadmap</title><link href="http://beeware.org/news/buzz/2023q4-roadmap/" rel="alternate"/><updated>2023-10-03T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:0d2d2d1d-5d6f-3a5b-964d-149f3cfd8ccc</id><content type="html">&lt;p&gt;As 2023 rolls to a close, BeeWare is more stable than ever, and is
progressing well. However, there's still lots of work to be done. As
always, this roadmap should be read as a guide to what we aim to focus
on over the coming quarter, rather than a hard commitment of features
that will be made available on a specific deadline.&lt;/p&gt;
&lt;h2&gt;Q3 progress&lt;/h2&gt;
&lt;p&gt;During Q3, Toga testing continued to be a major focus area. We've
completed testing on macOS, GTK and Linux; and testing on Windows and
Android is nearing completion. Along the way, we've resolved dozens of
bugs, discovered (and resolved) dozens more, and we've been able to
eliminate a bunch of inconsistencies in naming and usage between
widgets. We've also substantially improved the API documentation for
widgets.&lt;/p&gt;
&lt;p&gt;As noted in our monthly status reports, progress has been slower than
expected because of the large number of edge cases and platform
inconsistencies that we've found along the way. We're still a couple of
weeks away from completing this work; but once it's all completed, we'll
be able to publish a new version of Toga.&lt;/p&gt;
&lt;p&gt;This quarter, we've also resolved a major known limitation on iOS -
binary module packaging. We are now able to confirm that BeeWare is able
to produce apps with dynamically loaded binary modules that the iOS App
Store will accept through their review process. In the process of
resolving this limitation, we've started developing a Forge for mobile
packages, significantly improving the tooling for building binary wheels
for iOS.&lt;/p&gt;
&lt;h2&gt;Q4 priorities&lt;/h2&gt;
&lt;p&gt;Our Q4 goals are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Finalize Toga's test suite&lt;/strong&gt;. For real this time - we'll have 100%
branch coverage on every line of Toga's core, and on the macOS,
Windows, GTK, Android and iOS backends. Once we've released a version
of Toga that includes all these fixes, we'll be able to publish a plan
for the road to 1.0.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python 3.12 support&lt;/strong&gt;. We're expecting Python 3.12.0 to drop any
day. We've already done some preliminary work on Python 3.12 support,
but we'll need to finalise that work once the final release is
available.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Start upstreaming iOS and Android support to CPython&lt;/strong&gt;. This
quarter, we'll begin the process of upstreaming the patches for iOS
and Android support that we've been maintaining to CPython core, and
developing the CI infrastructure to run CPython's full test suite on
iOS and Android. The eventual goal is for iOS and Android to be Tier 3
supported platforms in Python 3.13. This will take a while to
finalise, but we've got around 8 months until the feature freeze for
Python 3.13, so we're confident we can make this happen. We're
attending the CPython Core Team sprint this month to kick start this
effort.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OptionContainer widget for iOS and Android&lt;/strong&gt;. One of the big gaps
identified during the Toga audit was the lack of content navigation
widgets on iOS and Android. This quarter, we're going to start
addressing this gap, adding an OptionContainer widget. This widget
already exists for macOS, GTK and Windows, so we have an API design -
we just need to find a way to make this API work on mobile platforms.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Image Capture&lt;/strong&gt;. We're finally going to start addressing device
hardware capabilities. We're going to start with image capture - the
ability to select an image from either the photo library, or take an
image with the camera, and have that image available to Python code.
As well as implementing this API, we're going to need to tackle
permission handling in Briefcase so that apps can declare that they
need access to the camera in a cross-platform way.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Longer term goals&lt;/h2&gt;
&lt;p&gt;Over the last 18 months, a major focus has been ensuring that the tools
we have are stable, tested, and fit for purpose. Looking forward, we'll
be able to build on this foundation, adding more widgets (especially for
app content navigation), and filling out notable gaps in widget platform
support (such as Tree and Table widgets on mobile). We'll also start
building out hardware support APIs (such as geolocation and
accelerometers).&lt;/p&gt;
&lt;p&gt;However, in addition to adding new features, we're going to start
drawing attention to the features we already have. The Toga audit has
enabled us to revise our API documentation, but API documentation is
only a small part of the overall documentation story. Now that we have a
stable base to work with, we're going to start improving our tutorials
and HowTo documentation, lowering the barrier to entry for new
developers.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Toga and Briefcase are more stable than ever, and we've addressed all
the major technical challenges that existed when full-time work on
BeeWare started early last year. Now we can begin the work of building
on the foundation that we've established, ensuring that everyone in the
Python community can build native applications for their devices.&lt;/p&gt;
</content></entry><entry><title>September 2023 Status Update</title><link href="http://beeware.org/news/buzz/september-2023-status-update/" rel="alternate"/><updated>2023-09-30T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:162f6d11-3acf-37d5-923b-480e11f3c256</id><content type="html">&lt;p&gt;September has been a month of slow, but significant progress.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We've resolved the issues around the iOS App Store rejecting BeeWare
apps - and, by way of proof, we've updated our demo app, &lt;a href="https://apps.apple.com/au/app/travel-tips/id1336372310#?platform=iphone"&gt;Travel
Tips&lt;/a&gt;.
We've also updated the &lt;a href="https://play.google.com/store/apps/details?id=com.keith_magee.traveltips"&gt;Android version of the
app&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've completely reworked the tooling for building binary packages for
iOS. &lt;a href="https://github.com/beeware/mobile-forge"&gt;Mobile Forge&lt;/a&gt; is our
new project for maintaining iOS binary builds. It provides a much more
robust environment for performing cross-compilation, making use of
&lt;a href="https://github.com/benfogle/crossenv"&gt;crossenv&lt;/a&gt;, rather than bespoke
site package overrides. Getting crossenv working has also required us
to do a deep audit of the various ways that Python reflects describes
the platform it is running on, from the obvious ones like the
&lt;code&gt;platform&lt;/code&gt; and &lt;code&gt;sys&lt;/code&gt; modules, down to &lt;code&gt;sysconfig&lt;/code&gt; and the tags that
are used by &lt;code&gt;pip&lt;/code&gt; to determine wheel compatibility.&lt;/li&gt;
&lt;li&gt;We've completed an &lt;a href="https://github.com/beeware/Python-Apple-support"&gt;initial port of the iOS patches to Python
3.12.0rc3&lt;/a&gt;. We're
still hunting some edge cases, but initial signs are promising that
we'll be in a position to do a near "zero day" release of Python 3.12
support for iOS.&lt;/li&gt;
&lt;li&gt;For Android, we've re-enabled &lt;a href="https://github.com/chaquo/chaquopy/pull/937"&gt;Fortran
support&lt;/a&gt; in the package
build system, and used it to &lt;a href="https://github.com/chaquo/chaquopy/pull/949"&gt;upgrade
SciPy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We were anticipating that would would complete the Toga Audit this
month; however, that unfortunately hasn't happened. We've hit a bunch
of complications with getting fonts and canvas support working on
Windows and Android, and the process of getting those platforms
working has revealed some inconsistencies in macOS, iOS and GTK font
handling. However, we have completed the audit of
&lt;a href="https://github.com/beeware/toga/pull/2019"&gt;DetailedList&lt;/a&gt; and
&lt;a href="https://github.com/beeware/toga/pull/1903"&gt;Font&lt;/a&gt;, and the audit of
&lt;a href="https://github.com/beeware/toga/pull/2029"&gt;Canvas&lt;/a&gt; is &lt;em&gt;almost&lt;/em&gt;
complete.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/2112"&gt;decoupled the WinForms event loop from the main form in a Toga
app&lt;/a&gt;. This doesn't have any
immediate impact on existing Toga apps - but it means we're now in a
position to have windowless apps, such as system tray apps.&lt;/li&gt;
&lt;li&gt;We completed the &lt;a href="https://github.com/beeware/briefcase/pull/1290"&gt;fixes needed to support Briefcase on Python
3.12&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We made some &lt;a href="https://github.com/beeware/briefcase/pull/1425"&gt;significant improvements to subprocess encoding
handling&lt;/a&gt;. This should
significantly improve the user experience of Windows users, and users
from non-English speaking countries.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/1449"&gt;formally downgraded our support for AppImage to "Best
effort"&lt;/a&gt;. AppImage has
proven increasingly difficult to work with as a format; now that we
have native system packages and Flatpak as options, the effort needed
to maintain AppImage support is better spent elsewhere. We'll still
merge fixes to AppImage support if a PR is provided, but we're no
longer actively fixing bugs, or running AppImage configurations in CI.&lt;/li&gt;
&lt;li&gt;We added &lt;a href="https://github.com/beeware/briefcase/pull/1468"&gt;filters to Xcode output to hide ignorable
warnings&lt;/a&gt;. Xcode
builds have always been a little noisy; the new Xcode 15 release added
even more noise. The filter means that these warnings will no longer
distract from successful build output.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Unfortunately, we didn't complete the Toga audit in September as we
anticipated. As mentioned, we hit a number of complications and
inconsistencies in font handling, especially in the Canvas widget, which
slowed progress. We'll keep working on this audit in October; and once
we're done, we'll make a release a new version of Toga. This release
will include a number of backwards-incompatible changes identified as
part of the audit, so be prepared for a bumpier-than-usual upgrade
process.&lt;/p&gt;
&lt;p&gt;Once the audit is complete, we'll also be looking at a technical
limitation that the widget audit has revealed on Android. A number of
Toga's Android widgets aren't as fully featured as they could be, due to
the fact that accessing the full API would require subclassing a Java
base class. This is an area where Chaquopy has some limitations; so
we're going to try and address these limitations.&lt;/p&gt;
&lt;p&gt;We'll also begin the work of upstreaming patches to CPython core. We've
been invited to attend the CPython Core Team Sprint this month, which
will be great opportunity to lay out the roadmap for formal iOS and
Android support in CPython 3.13. This will also involve working on
improving the CI infrastructure for building Android and iOS packages.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1115"&gt;Provide an option to override app settings from the command
line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1270"&gt;Add support for custom PyPI
repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular
IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/394"&gt;Correctly handle incomplete project
deletions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/737"&gt;Add an option to select the Android base image when creating new
emulators&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>August 2023 Status Update</title><link href="http://beeware.org/news/buzz/august-2023-status-update/" rel="alternate"/><updated>2023-09-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:1fde782a-6bba-3811-95a7-1bc27e83a424</id><content type="html">&lt;p&gt;August has seen an important milestone reached in our Toga work, and
some exciting new features.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We attended &lt;a href="http://2023.pycon.org.au"&gt;PyCon AU 2023&lt;/a&gt;, and presented a
new talk about the fundamentals of building GUI apps in Python; the
video of this presentation is &lt;a href="https://www.youtube.com/watch?v=DH6rkImiZtc"&gt;already
online&lt;/a&gt;. At the sprints,
8 new contributors earned their challenge coins, for a range of small
and large fixes.&lt;/li&gt;
&lt;li&gt;The Toga Audit is complete on macOS, iOS and GTK! The last pieces were
the audit of &lt;a href="https://github.com/beeware/toga/pull/2058"&gt;Window&lt;/a&gt; and
&lt;a href="https://github.com/beeware/toga/pull/2075"&gt;App&lt;/a&gt;; with those PRs (and
some others that are outstanding), we have 100% code coverage for
Toga's codebase. Windows and Android are catching up rapidly - we've
completed the audit of
&lt;a href="https://github.com/beeware/toga/pull/1996"&gt;OptionContainer&lt;/a&gt;,
&lt;a href="https://github.com/beeware/toga/pull/2011"&gt;Table&lt;/a&gt;, and
&lt;a href="https://github.com/beeware/toga/pull/2017"&gt;Tree&lt;/a&gt;, as well as a major
revamp of &lt;a href="https://github.com/beeware/toga/pull/2020"&gt;how layouts are
calculated&lt;/a&gt;, which ensures
that minimum window sizes are enforced, and layouts on High DPI
displays are correct.&lt;/li&gt;
&lt;li&gt;We added a &lt;a href="https://github.com/beeware/toga/pull/2065"&gt;Textual backend for
Toga&lt;/a&gt;. This means the same
Toga application will now run on 3 desktop platforms, 2 mobile
platforms, as a single page web app, and in a terminal window. As with
the web backend, there's still a lot of work to fill out all the
widgets, but we've got enough in place to run the BeeWare tutorial app
and the first 2 Toga tutorial steps.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/1360"&gt;improved the architecture and word size checks that Briefcase
performs when building
apps&lt;/a&gt;. This
effectively adds support for 32-bit x86 and ARM platforms; we're
limited in our ability to perform automatic tests to verify these
platforms work as advertised, and upstream tooling isn't always up to
the task (for example, Linuxdeploy doesn't support ARM at any word
size) - but Briefcase now performs much more robust checks, and will
make a best effort when support &lt;em&gt;should&lt;/em&gt; exist.&lt;/li&gt;
&lt;li&gt;We added &lt;a href="https://github.com/beeware/briefcase/pull/1417"&gt;support for openSUSE (and other SUSE-derived
distributions)&lt;/a&gt; to
Briefcase.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/1397"&gt;updated the version of the Android command line tools that
Briefcase uses&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We resolved a long standing issue with the use of &lt;a href="https://github.com/beeware/rubicon-objc/pull/357"&gt;Objective C blocks
on M1 hardware&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Based on current progress, it seems highly likely that the Toga audit
will be complete on Windows and Android by the end of September. This
will bring the Toga audit to completion, providing a very stable
foundation for future work on Toga. It also means you can expect a new
Toga release in the coming month, incorporating the myriad bug fixes and
improvements that the audit has revealed. This release will include a
number of backwards-incompatible changes identified as part of the
audit, so be prepared for a bumpier-than-usual upgrade process.&lt;/p&gt;
&lt;p&gt;So - what comes after the audit? Firstly, we'll be looking into iOS App
Store submission - we've been made aware that although Briefcase apps
work fine on both device and simulator, the App Store has been rejecting
apps because of an internal layout issue. We have already begun work on
this, and thanks to a contribution from the community, we have a very
strong foundation for this work. We'll also start looking at Python 3.12
support, and making preparations for upstreaming our iOS patches into
CPython core.&lt;/p&gt;
&lt;p&gt;We'll also be looking at a technical limitation that the widget audit
has revealed on Android. A number of Toga's Android widgets aren't as
fully featured as they could be, due to the fact that accessing the full
API would require subclassing a Java base class. This is an area where
Chaquopy has some limitations; so we're going to try and address these
limitations.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1115"&gt;Provide an option to override app settings from the command
line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1270"&gt;Add support for custom PyPI
repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular
IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/1980"&gt;Switch Toga's Android backend to use native Chaquopy
syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>July 2023 Status Update</title><link href="http://beeware.org/news/buzz/july-2023-status-update/" rel="alternate"/><updated>2023-08-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:2820a89b-0faa-378f-b3a0-4f91ca8d71c5</id><content type="html">&lt;p&gt;The year rolls on, and so does progress on BeeWare!&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We attended &lt;a href="http://europython.eu"&gt;EuroPython 2023&lt;/a&gt;, presenting on
Briefcase, attending the WASM summit, and running a very successful 2
day sprint.&lt;/li&gt;
&lt;li&gt;We've completed the audit of all Toga widgets on macOS, iOS and GTK!
We've also completed the audit of
&lt;a href="https://github.com/beeware/toga/pull/1969"&gt;ScrollContainer&lt;/a&gt; and
&lt;a href="https://github.com/beeware/toga/pull/1984"&gt;SplitContainer&lt;/a&gt; on Windows
and Android.&lt;/li&gt;
&lt;li&gt;We've added support for &lt;a href="https://github.com/beeware/briefcase/pull/1331"&gt;Docker Desktop and rootless Docker on
Linux&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've added the ability to get &lt;a href="https://github.com/beeware/briefcase/pull/1389"&gt;detailed logs from the tools used by
Briefcase to build
apps&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've corrected some &lt;a href="https://github.com/beeware/briefcase/pull/1375"&gt;warnings generated by pip when installing Python
packages on Linux&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've added support for &lt;a href="https://github.com/beeware/briefcase/pull/1377"&gt;generating APKs as an output format for
Android&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've improved error reporting when &lt;a href="https://github.com/beeware/briefcase/pull/1378"&gt;an application can't start on
Android due to the device being too
old&lt;/a&gt;, or &lt;a href="https://github.com/beeware/briefcase/pull/1356"&gt;the Android
device clock isn't in sync with the developer's
laptop&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We added &lt;code&gt;__repr__&lt;/code&gt; and &lt;code&gt;__str__&lt;/code&gt; implementations for Objective C
structures like &lt;a href="https://github.com/beeware/rubicon-objc/pull/340"&gt;NSRect, NSRange, NSPoint and
more&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/2027"&gt;formally dropped support for Python 3.7 in
Toga&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We improved error handling when &lt;a href="https://github.com/beeware/toga/pull/2047"&gt;an app doesn't define a main window
as part of it's startup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Type annotations in Toga &lt;a href="https://github.com/beeware/toga/pull/2044"&gt;have been significantly
improved&lt;/a&gt;. We've been
adding type annotations as part of the widget audit, but some types
(such as callbacks) weren't as specific as they could have been. We're
now using Protocols to define some of the more complex types in Toga.&lt;/li&gt;
&lt;li&gt;We added an
&lt;a href="https://github.com/beeware/toga/pull/2050"&gt;ActivityIndicator&lt;/a&gt; and
&lt;a href="https://github.com/beeware/toga/pull/2051"&gt;Divider&lt;/a&gt; widget
implementation in the Web backend.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;The widget testing audit is now complete on macOS, iOS and GTK. An audit
of App and Window functionality is all that stands in the way of 100%
test coverage on those three platforms; it seems likely we'll get there
by the end of this month. Android and Windows coverage is close behind,
but might take a little longer.&lt;/p&gt;
&lt;p&gt;Part of the reason for this delay is that we need to address an
important change in the most recent release of Android Studio. Over the
last few years, the Android ecosystem has been in the process of
migrating its build system from Groovy to Kotlin; Android Studio Giraffe
makes Kotlin the default for new projects, so we need to make sure we're
compatible with that change. The widget audit has also highlighted that
we need to improve our handling of subclass inheritance in Java; we're
hoping to make some changes that will enable us to fill in a few more
gaps in widget API coverage on Android.&lt;/p&gt;
&lt;p&gt;We'll also be at &lt;a href="https://2023.pycon.org.au"&gt;PyCon AU 2023&lt;/a&gt; from August
18-22. We're presenting on Saturday; and we'll be there for the full
duration of the sprints. See you in Tarntanya/Adelaide!&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1115"&gt;Provide an option to override app settings from the command
line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1270"&gt;Add support for custom PyPI
repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular
IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/1979"&gt;Switch Toga's WinForms backend to use native WinForms
imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/toga/issues/1980"&gt;Switch Toga's Android backend to use native Chaquopy
syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>2023Q3 Roadmap</title><link href="http://beeware.org/news/buzz/2023q3-roadmap/" rel="alternate"/><updated>2023-07-04T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:6d790618-618f-36cf-b885-9ac46f13830d</id><content type="html">&lt;p&gt;2023 is halfway done, and BeeWare continues to make steady progress. As
always, this roadmap should be read as a guide to what we aim to focus
on over the coming quarter, rather than a hard commitment of features
that will be made available on a specific deadline.&lt;/p&gt;
&lt;h2&gt;Q2 progress&lt;/h2&gt;
&lt;p&gt;As with Q1, our focus in Q2 was on Toga testing. This has been a mammoth
project; but it's finally nearing completion. All but 2 widgets (Canvas
and DetailedList) have 100% branch coverage on macOS, iOS and GTK, while
Android and Windows are only 5 more widgets behind (ScrollContainer,
SplitContainer, OptionContainer, Table and Tree). Along the way, we've
identified and resolved lots of inconsistencies in widget APIs, and
resolved countless bugs. We've also fully documented every widget,
ported the test suite to Pytest, and added type annotations in the code
(mostly for documentation purposes, rather than formal validation).
We've also completed testing and coverage of a lot of the non-widget
functionality that wasn’t strictly planned for this quarter - features
like Images, Icons, Validators, application paths, and colors; plus a
lot of tests (and bugfixes) in the core widget layout. We've also got
the start of some tooling that can be used to test the Web backend.&lt;/p&gt;
&lt;p&gt;Unfortunately, we haven't been able to do any substantial Toga planning.
Once Toga's code is at 100% testing coverage, we'll be in a much better
place to develop those plans. We also haven't been able to add any
native cross-platform hardware support.&lt;/p&gt;
&lt;h2&gt;Q3 priorities&lt;/h2&gt;
&lt;p&gt;Our Q3 goals are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Finalize Toga's test suite&lt;/strong&gt;. By the end of Q3, we should have 100%
branch coverage on every line of Toga's core, and on the macOS,
Windows, GTK, Android and iOS backends.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;iOS Binary packaging&lt;/strong&gt; We've been made aware that Apple is rejecting
Briefcase packaged iOS apps from the iOS App Store because of a
package layout issue associated with binary modules. This is a very
high priority to fix.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kotlin upgrades&lt;/strong&gt; The upcoming Android Studio release is switching
to Kotlin as its preferred language for new Gradle configuration
files; we need to upgrade Chaquopy's tooling to support this.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Add full support for Java inheritance&lt;/strong&gt; In the process of building
Toga's test suite, it's become clear that a number of features can
only be implemented by subclassing Java base classes. Chaquopy's
ability to subclass is currently limited; to unlock all the features
of Android, we need to resolve this limitation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Longer term goals&lt;/h2&gt;
&lt;p&gt;Our longer term goals are also &lt;a href="/news/buzz/2022q4-roadmap"&gt;largely unchanged&lt;/a&gt;.
Toga 1.0 remains an important goal; once we're at 100% test coverage, we
will be in much better place to provide estimates about Toga 1.0.
Upstreaming is an area where we have some good news - as a result of
discussions at Pycon US, we've received support for raising iOS and
Android to the status of Tier 3 supported platforms in CPython, with the
initial goal of having this in place for Python 3.13. You should expect
to see movement on upstreaming towards the end of this year, and early
next year. A forge for mobile packages is also remains an important
goal; the completion of upstreaming work will make the goal of building
a forge much more viable.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;At the end of Q2 2023, Toga's testing journey is nearing completion...
but there's still lots of work to be done. However, the groundwork that
we've been doing over the last 6 months has put us in a very strong
position to develop Toga and the rest of the BeeWare ecosystem going
forward.&lt;/p&gt;
</content></entry><entry><title>June 2023 Status Update</title><link href="http://beeware.org/news/buzz/june-2023-status-update/" rel="alternate"/><updated>2023-06-30T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:448ce00b-e367-3af2-8e80-0def6a7249b2</id><content type="html">&lt;p&gt;We're half way through the year! Work on the widget audit is almost
complete; but that's not all we've been working on.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We've completed the audit of
&lt;a href="https://github.com/beeware/toga/pull/1946"&gt;NumberInput&lt;/a&gt;,
&lt;a href="https://github.com/beeware/toga/pull/1949"&gt;WebView&lt;/a&gt;, &lt;a href="https://github.com/beeware/toga/pull/1951"&gt;DateInput,
TimeInput&lt;/a&gt;,
&lt;a href="https://github.com/beeware/toga/pull/1956"&gt;ImageView&lt;/a&gt; and
&lt;a href="https://github.com/beeware/toga/pull/1955"&gt;Selection&lt;/a&gt; on all
platforms; and we've completed the audit of
&lt;a href="https://github.com/beeware/toga/pull/1969"&gt;ScrollContainer&lt;/a&gt;,
&lt;a href="https://github.com/beeware/toga/pull/1984"&gt;SplitContainer&lt;/a&gt;,
&lt;a href="https://github.com/beeware/toga/pull/1996"&gt;OptionContainer&lt;/a&gt;,
&lt;a href="https://github.com/beeware/toga/pull/2011"&gt;Table&lt;/a&gt; and
&lt;a href="https://github.com/beeware/toga/pull/2017"&gt;Tree&lt;/a&gt; on macOS, iOS and
GTK.&lt;/li&gt;
&lt;li&gt;We've identified and resolved some &lt;a href="https://github.com/beeware/toga/pull/1958"&gt;edge cases in the Pack layout
algorithm&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've &lt;a href="https://github.com/beeware/toga/pull/1964"&gt;improved the implementation of application paths, and audited
the paths being returned on all
platforms&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/2008"&gt;corrected some issues in the Web backend caused by the most recent
PyScript and Pyodide
releases&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've &lt;a href="https://github.com/beeware/toga/pull/1992"&gt;improved the error message that is returned when a widget isn't
implemented on a platform&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've updated Briefcase to &lt;a href="https://github.com/beeware/briefcase/pull/1271"&gt;use Java 17 when building Android
projects&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've added support for the &lt;a href="https://github.com/beeware/briefcase/pull/1307"&gt;ANDROID_HOME environment
variable&lt;/a&gt; when
building Android projects with a pre-existing copy of Android Studio.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;The widget testing audit has been a mammoth project, but the end is very
nearly in sight. There's only 2 widgets (Canvas and DetailedList) that
haven't seen any testing to date; plus there's some non-widget features
(like dialogs, fonts, windows, and basic App functionality) that still
require testing. Once those tests are complete, we'll be moving on to
dealing with some iOS and Android deployment issues that have been
accumulating while we focused on Toga.&lt;/p&gt;
&lt;p&gt;We'll also be at &lt;a href="http://europython.eu"&gt;EuroPython 2023&lt;/a&gt; from July
17-23. We're presenting on Thursday; and we'll be there for the full
duration of the sprints. See you in Prague!&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1157"&gt;Detect a failure when trying to install on an Android device that
is too old&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1146"&gt;Use the on-device clock to filter Android device
logs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1136"&gt;Add an APK packaging target for
Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1115"&gt;Provide an option to override app settings from the command
line&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>May 2023 Status Update</title><link href="http://beeware.org/news/buzz/may-2023-status-update/" rel="alternate"/><updated>2023-06-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:638e2178-7506-3813-a89f-5b0d86970182</id><content type="html">&lt;p&gt;May has been another month of steady progress - mostly on widget
testing, but also in some other key areas of the project.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We've completed the audit of the &lt;a href="https://github.com/beeware/toga/pull/1944"&gt;TextInput,
PasswordInput,&lt;/a&gt; and
&lt;a href="https://github.com/beeware/toga/pull/1938"&gt;MultilineTextInput&lt;/a&gt;
widgets; we've completed the audit of
&lt;a href="https://github.com/beeware/toga/pull/1946"&gt;NumberInput&lt;/a&gt;,
&lt;a href="https://github.com/beeware/toga/pull/1949"&gt;WebView&lt;/a&gt;, &lt;a href="https://github.com/beeware/toga/pull/1951"&gt;DateInput,
TimeInput&lt;/a&gt;, and
&lt;a href="https://github.com/beeware/toga/pull/1955"&gt;Selection&lt;/a&gt; on macOS, iOS
and GTK; and we've begun the audit of
&lt;a href="https://github.com/beeware/toga/pull/1956"&gt;ImageView&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've added documentation and tests for the input validation API as
part of the TextInput audit.&lt;/li&gt;
&lt;li&gt;We've added documentation and tests for ListSource as part of the
Selection audit, and modified the implementation of Selection to use a
ListSource.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/1948"&gt;refactored the implementation of
Dialog&lt;/a&gt; so that it is
architecturally consistent with the rest of Toga; this will hopefully
also lead to an easier testing story.&lt;/li&gt;
&lt;li&gt;We made &lt;a href="https://github.com/beeware/toga/pull/1903"&gt;significant progress in supporting custom fonts on
GTK&lt;/a&gt;, including adding a
GUI test of this capability.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/1093"&gt;completed a refactor of Briefcase's tool
integrations&lt;/a&gt;. This
introduces a consistent API for all tools that Briefcase uses, as well
as introducing type annotations for a lot more of the codebase.&lt;/li&gt;
&lt;li&gt;We've introduced &lt;a href="https://github.com/beeware/briefcase/pull/1262"&gt;conditional coverage to the Briefcase
codebase&lt;/a&gt;. This means
developers who only have access to a single testing platform can get a
100% coverage report on their work before submitting to CI for
cross-platform confirmation.&lt;/li&gt;
&lt;li&gt;We've helped triage a number of bugs in the Python 3.12.0b1 release
(revealed by our testing for
&lt;a href="https://github.com/beeware/briefcase/pull/1290"&gt;Briefcase&lt;/a&gt; and
&lt;a href="https://github.com/beeware/rubicon-objc/issues/313"&gt;Rubicon-ObjC&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;We've modified Briefcase's Flatpak backend to &lt;a href="https://github.com/beeware/briefcase/pull/1272"&gt;require an explicit
runtime&lt;/a&gt;, rather than
falling back to a default runtime that is no longer supported.&lt;/li&gt;
&lt;li&gt;We developed a &lt;a href="https://github.com/beeware/briefcase/pull/1285"&gt;draft implementation of a Briefcase test runner for
the Web backend&lt;/a&gt;. This
is an important first step to being able to unit test Toga's Web
backend; however, there's still a couple of technical challenges
outstanding before we can complete that work.&lt;/li&gt;
&lt;li&gt;We've begun the process of &lt;a href="https://github.com/beeware/briefcase/pull/1271"&gt;upgrading Briefcase's Java support from
Java 8 to Java 17&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;June will be another month with a focus on GUI test coverage. We're
still hoping that this work will be complete by the end of June - we're
averaging 1-2 widgets a week, and we have 8 widgets remaining; however,
every widget is throwing up unique challenges (and revealing deep bugs -
sometimes in the underlying GUI frameworks), so it's possible the audit
work may need to continue into July.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/463"&gt;Add support for the ANDROID_HOME environment
variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1157"&gt;Detect a failure when trying to install on an Android device that
is too old&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1146"&gt;Use the on-device clock to filter Android device
logs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1136"&gt;Add an APK packaging target for
Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1115"&gt;Provide an option to override app settings from the command
line&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>April 2023 Status Update</title><link href="http://beeware.org/news/buzz/april-2023-status-update/" rel="alternate"/><updated>2023-05-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:e8cf5546-50aa-3bce-8cc2-fe144d2d6107</id><content type="html">&lt;p&gt;April was dominated by preparation and attendance at PyCon US 2023 - but
we've seen some good progress over the month.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;p&gt;PyCon US saw a lot of BeeWare activity:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We presented 2 talks at PyCon US - one on
&lt;a href="https://us.pycon.org/2023/schedule/presentation/20/"&gt;Briefcase&lt;/a&gt;, and
one on the &lt;a href="https://us.pycon.org/2023/schedule/presentation/145/"&gt;state of Android support on
Python&lt;/a&gt;. Videos
of these talks should appear on the &lt;a href="https://www.youtube.com/pyconus"&gt;PyCon US Youtube
channel&lt;/a&gt; in the near future.&lt;/li&gt;
&lt;li&gt;We presented at the &lt;a href="https://us.pycon.org/2023/events/language-summit/"&gt;Language
Summit&lt;/a&gt;, where we
received provisional approval to push for iOS and Android to become
Tier 3 supported platforms in CPython 3.13.&lt;/li&gt;
&lt;li&gt;We presented at the &lt;a href="https://us.pycon.org/2023/events/packaging-summit/"&gt;Packaging
Summit&lt;/a&gt;, providing
the needs of packaging from a mobile perspective.&lt;/li&gt;
&lt;li&gt;We had a booth in the community section of the conference show floor.&lt;/li&gt;
&lt;li&gt;We ran a successful sprint where we handed out over a dozen Challenge
Coins. Many of the improvements listed in this status update come from
community contributions, and we have a backlog of other PRs we're
still working on.&lt;/li&gt;
&lt;li&gt;We donated an &lt;a href="https://fosstodon.org/@beeware/110245889923864511"&gt;leather Briefcase to the PyLadies Auction, raising
US$800!&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In non-PyCon activity:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We added the ability to &lt;a href="https://github.com/beeware/briefcase/pull/890"&gt;code sign Windows release
artefacts&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We added a new distribution format for Windows apps - &lt;a href="https://github.com/beeware/briefcase/pull/1183"&gt;simple ZIP
archives&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We modified Briefcase to &lt;a href="https://github.com/beeware/briefcase/pull/1219"&gt;support PEP621 metadata
standards&lt;/a&gt;. Briefcase
predates the definition of PEP621, but there's a lot of overlap in
what PEP621 defines and what Briefcase defines, so it makes sense for
Briefcase to adhere to the common standard. In future, we expect to
see more convergence with PEP621 standards.&lt;/li&gt;
&lt;li&gt;We landed major updates to &lt;a href="https://github.com/beeware/briefcase/pull/1132"&gt;Briefcase's AppImage and Flatpak
backends&lt;/a&gt;. They now
use Indygreg's &lt;a href="https://github.com/indygreg/python-build-standalone"&gt;Standalone
Python&lt;/a&gt;; this
significantly speeds up Flatpak builds, should be more stable on
AppImage, allows us to switch to
&lt;a href="http://github.com/pypa/manylinux"&gt;manylinux&lt;/a&gt; base images - and it
reduces the number of projects that BeeWare is responsible for
maintaining.&lt;/li&gt;
&lt;li&gt;We got 2 more widgets to 100% GUI test coverage. One of these is the
&lt;a href="https://github.com/beeware/toga/pull/1834"&gt;base widget&lt;/a&gt;, so we're now
able to guarantee basic functionality across all widgets.&lt;/li&gt;
&lt;li&gt;We migrated Toga's web backend to use the &lt;a href="https://github.com/beeware/toga/pull/1838"&gt;Shoelace web components
framework&lt;/a&gt;. This is a much
better match for Toga than Bootstrap was, as it is primarily focussed
on rendering &lt;em&gt;widgets&lt;/em&gt;, rather than HTML layout. We only have a
handful of widgets ported over at this point - but the process of
implementing widgets is relatively straightforward, so if you have web
skills and are looking for a way to contribute, this would be a great
place to get involved.&lt;/li&gt;
&lt;li&gt;We added support for &lt;a href="https://github.com/beeware/toga/pull/1894"&gt;cursor
visibility&lt;/a&gt;, &lt;a href="https://github.com/beeware/toga/pull/1863"&gt;full screen
mode&lt;/a&gt; and &lt;a href="https://github.com/beeware/toga/pull/1871"&gt;determining the
current window&lt;/a&gt; on Windows.&lt;/li&gt;
&lt;li&gt;We added an API for &lt;a href="https://github.com/beeware/toga/pull/1880"&gt;catching a 'confirm' action on TextInput
widgets&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We added support for &lt;a href="https://github.com/beeware/toga/pull/1836"&gt;FreeBSD in
Toga&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We made a number of significant improvements to the Tox configurations
to improve reliability, work around a bugs in the release of pip 23.1,
speed up and parallelise test execution, enforce spelling and external
linking in documentation, and to make easier to obtain coverage
reports.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;In May, we'll be continuing our push for GUI test coverage. Our current
aim is to have complete widget coverage by the end of June.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/865"&gt;Modify the handling of app signing
options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/463"&gt;Add support for the ANDROID_HOME environment
variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1157"&gt;Detect a failure when trying to install on an Android device that
is too old&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1146"&gt;Use the on-device clock to filter Android device
logs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1136"&gt;Add an APK packaging target for
Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1115"&gt;Provide an option to override app settings from the command
line&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>2023Q2 Roadmap</title><link href="http://beeware.org/news/buzz/2023q2-roadmap/" rel="alternate"/><updated>2023-04-04T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:8c6f21df-0fed-3554-a131-c5a8d8e90687</id><content type="html">&lt;p&gt;It doesn't feel like it's been three months since our last roadmap
update... but here we are, in April 2023. As always, this roadmap should
be read as a guide to what we aim to focus on over the coming quarter,
rather than a hard commitment of features that will be made available on
a specific deadline.&lt;/p&gt;
&lt;h2&gt;Q1 progress&lt;/h2&gt;
&lt;p&gt;Our focus this quarter has been on testing; however as with our last
report, our progress has not been as significant as we hoped it would
be. Getting the first tests in place has proved to be much more complex
than we anticipated. In order to test widgets &lt;em&gt;at all&lt;/em&gt;, we've had to set
up all the infrastructure that will be necessary to test every other
widget, such as defining the probes to inspect colors and fonts, and to
ensure that the GUI framework has finished applying changes before
performing a test assertion. The process of building the first tests has
exposed a number of problems deeply embedded in the core of Toga -
problems that either aren't observable or are easily masked when you're
writing an application as a user, but can't be avoided when you're
writing a test suite that will run fast and needs to have repeatable
behavior. We're also testing the limits of the features exposed by each
platform - and everything we do needs to be repeated on 5 GUI toolkits
with 5 completely different views of the world.&lt;/p&gt;
&lt;p&gt;The good news is that as of the end of Q1, we're finally getting
traction on the problem. We're about a quarter of the way through the
widgets by count. Admittedly, we've been tackling the simpler widgets
first - but the lessons learned (and bugs fixed) making those simple
widgets work should make testing the more complex widgets easier.
There's also some commonality in the more complex widgets - for example,
TextInput, PasswordInput and NumberInput are all essentially the same
widget, so once tests are built for one of them, the other 2 should fall
out reasonably easily.&lt;/p&gt;
&lt;p&gt;We have also been able to release Toga v0.3.0. This release was almost 5
years in the making.&lt;/p&gt;
&lt;p&gt;Q1 saw some unexpected improvements to Briefcase. We've had persistent
problems supporting AppImage and Flatpak as packaging formats; during
Q1, we couldn't avoid these problems any longer, so we introduced a
System packaging backend, and made this the new default for Linux apps.
We're now able to produce native system packages for Briefcase apps,
supporting almost every Debian, Red Hat or Arch derived distribution.
These packages are already proving more stable: we had no major issues
during a recent tutorial at Everything Open 2023, despite a wide variety
of Linux distributions in the room - something that we've never been
able to say about AppImage.&lt;/p&gt;
&lt;p&gt;However, once again, that means there's a lot left on the Q1 TODO list.
Toga documentation is being slowly updated as we audit each widget;
however, we haven't made any changes to the example apps; we haven't
been able to do any substantial Toga planning; and we haven't been able
to add any native cross-platform hardware support.&lt;/p&gt;
&lt;h2&gt;Q2 priorities&lt;/h2&gt;
&lt;p&gt;Our short term goals are, therefore, largely unchanged from last
quarter:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt; - Completing the Toga GUI testing suite will again be our
primary focus for the quarter.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Planning&lt;/strong&gt; - Once we've got the test harness in place, we'll be in a
much better position to evaluate what work remains to get to v1.0.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt; - The process of systematically building a test
suite also gives us an opportunity to update the API documentation for
each widget as we go. There's still lots of documentation required on
top of the API guide, but complete API documentation will be a big
start.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cross-platform hardware&lt;/strong&gt; - Cross-platform support for device
hardware (especially mobile) is one of the banner features that makes
mobile device support worthwhile. Providing proof that this hardware
support is easy to use will be a key demonstrator for BeeWare as a
platform.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Longer term goals&lt;/h2&gt;
&lt;p&gt;Our longer term goals are also &lt;a href="/news/buzz/2022q4-roadmap"&gt;largely unchanged&lt;/a&gt;.
Upstreaming, Toga 1.0, and a forge for mobile packages are all important
goals for the BeeWare ecosystem. However, we don't expect to make any
significant progress on most of these goals until we have solidified
Toga's testing story. We should, however, see at least the first signs
of progress on upstreaming BeeWare's work on mobile as a result of PyCon
US, where we'll have a chance to raise issues directly with the Python
core team.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Providing a robust GUI testing framework for Toga has definitely proven
to be a lot more complicated than we originally thought. The good news
is that as of the end of Q1 2023, we're finally starting to make good
progress on testing. We hope that by the time of our next status update,
we're able to report that we're nearing the end of our testing journey,
and we can turn our focus to other areas of interest.&lt;/p&gt;
</content></entry><entry><title>March 2023 Status Update</title><link href="http://beeware.org/news/buzz/march-2023-status-update/" rel="alternate"/><updated>2023-04-03T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:23ae8ba6-73bd-31f2-b7d1-4d1a97df2e0b</id><content type="html">&lt;p&gt;March has been a month of slow but steady progress for BeeWare.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Progress on GUI testing in Toga is continuing. We now have 7 widgets
fully tested, with another 2 in progress. As with last month's update,
getting these tests passing has required wrestling a lot of
fundamentals, in particular around the simulation of events such as
mouse clicks. We're also discovering (and fixing) lots of corner cases
in widget implementations that only surface when you're doing rigorous
and repeatable testing.&lt;/li&gt;
&lt;li&gt;We've made some &lt;a href="https://github.com/beeware/toga/pull/1794"&gt;major changes to the way GTK widgets are
rendered&lt;/a&gt;. This change
significantly reduces the amount of re-rendering that is performed by
GTK, as well as resolving a number of long standing issues related to
resizing widgets.&lt;/li&gt;
&lt;li&gt;Thanks to some community contributions, we were were able to add
support for &lt;a href="https://github.com/beeware/toga/pull/1817"&gt;focus events and text
alignment&lt;/a&gt; on GTK's
TextInput widget, and support for &lt;a href="https://github.com/beeware/toga/pull/1821"&gt;text alignment and
fonts&lt;/a&gt; on GTK's NumberInput
widget.&lt;/li&gt;
&lt;li&gt;We landed the implementation of a &lt;a href="https://github.com/beeware/briefcase/pull/1106"&gt;Linux system package
backend&lt;/a&gt; for
Briefcase, which can output DEB and RPM packages. Thanks to a
community contribution, we were also able to add support for &lt;a href="https://github.com/beeware/briefcase/pull/1143"&gt;Arch
packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We modified the &lt;a href="https://github.com/beeware/briefcase/pull/1107"&gt;locations where Briefcase outputs build
artefacts&lt;/a&gt;. This
removes some sources of bugs associated with tools not supporting
spaces in filenames, and makes Briefcase's output consistent with
other tools in the Python ecosystem.&lt;/li&gt;
&lt;li&gt;We made significant progress on &lt;a href="https://github.com/beeware/briefcase/pull/1132"&gt;modifying Briefcase's AppImage and
Flatpak backends&lt;/a&gt; to
use Indygreg's &lt;a href="https://github.com/indygreg/python-build-standalone"&gt;Standalone
Python&lt;/a&gt;, rather
than BeeWare's Linux support package. Standalone Python is becoming a
de facto standard for pre-compiled Python builds (especially on
Linux), so it makes sense for BeeWare to converge on this common
standard. This change will also significantly speed up Flatpak builds,
should be more stable on AppImage, allows us to switch to
&lt;a href="http://github.com/pypa/manylinux"&gt;manylinux&lt;/a&gt; base images - and it
reduces the number of projects that BeeWare is responsible for
maintaining. We're currently waiting on a &lt;a href="https://github.com/linuxdeploy/linuxdeploy-plugin-gtk/pull/45"&gt;fix to the linuxdeploy GTK
plugin&lt;/a&gt;
to be merged before we can land this change.&lt;/li&gt;
&lt;li&gt;Thanks to a community contribution, we added support for
&lt;a href="https://github.com/beeware/briefcase/pull/1125"&gt;PyGame&lt;/a&gt; to Briefcase.&lt;/li&gt;
&lt;li&gt;We migrated BeeWare's CI to &lt;a href="https://github.com/beeware/.github/pull/14"&gt;use the new System packaging
backend&lt;/a&gt; on Linux. This
means that CI is significantly faster, as building system packages
requires a lot less processing than an AppImage.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://pypi.org/project/travertino/"&gt;released Travertino 0.2.0&lt;/a&gt;.
Travertino is the library that underpins Toga's Pack layout algorithm.
It's been several years since we last did a Travertino release, but
some recent bug fixes warranted an update.&lt;/li&gt;
&lt;li&gt;We presented a tutorial at &lt;a href="https://2023.everythingopen.au"&gt;Everything Open
2023&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also made a big change to our social media strategy: we started a
Mastodon account. We've wound down our Twitter usage at the end of last
year; going forward, you can get your bite size BeeWare updates from
&lt;a href="https://fosstodon.org/@beeware"&gt;@beeware@fosstodon.org&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;In terms of technical goals, April will continue our push for GUI test
coverage. However, we're expecting progress to be a little slower,
because of one big event - &lt;a href="https://pycon.us/2023"&gt;PyCon US&lt;/a&gt;. We'll have
a booth in the community section of the conference floor; the core team
are presenting 2 talks; we're presenting at the Language Summit; and
we'll be at the sprints for the first 3 days. Preparing for these talks
will take up a lot of our time in April, as will the event itself - so
progress is likely to be a little slower than normal. If you're going to
be there, come by the booth and say hi! If you'd like to help us to
staff the booth - get in touch &lt;a href="https://beeware.org/bee/chat/"&gt;on
Discord&lt;/a&gt;, &lt;a href="https://fosstodon.org/@beeware"&gt;on
Mastodon&lt;/a&gt;, &lt;a href="mailto:contact@beeware.org"&gt;or
email&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/865"&gt;Modify the handling of app signing
options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/856"&gt;Add the ability to refresh the support package in a
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/853"&gt;Provide protection against creating projects with "semi-reserved"
names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/463"&gt;Add support for the ANDROID_HOME environment
variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1011"&gt;Improve validation of project names in the Briefcase
wizard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1090"&gt;Correct the capture of log messages on the web
backend&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="https://beeware.org/bee/chat/"&gt;BeeWare Discord
server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>February 2023 Status Update</title><link href="http://beeware.org/news/buzz/february-2023-status-update/" rel="alternate"/><updated>2023-03-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:7b98925b-4a8b-3442-93e7-2e963d950b5e</id><content type="html">&lt;p&gt;Although there haven't been a lot of new BeeWare features developed in
February, the work that has been completed represents some important
progress against our overall project goals.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The biggest milestone is that we have achieved 100% test coverage for
our first widget -
&lt;a href="https://github.com/beeware/toga/pull/1761"&gt;Button&lt;/a&gt;! This may sound a
little underwhelming - after all, Toga has had a Button widget for a
long time, and has been fairly reliable. However, getting to this
point has required a lot of smaller (seemingly unrelated) problems to
be solved. It has also required setting up all the infrastructure that
will be necessary to test every other widget, such as defining the
probes to inspect colors and fonts, and to ensure that the GUI
framework has finished applying changes before performing a test
assertion). We've also taken this opportunity to start migrating the
Toga unit tests to &lt;code&gt;pytest&lt;/code&gt;, which promises to significantly improve
our testing capabilities.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/1778"&gt;formalised the relationship between Toga's Pack layout model and
CSS&lt;/a&gt;. This should make it a
lot easier to determine what "correct" layout behavior should be.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/toga/pull/1794"&gt;identified a low level issue with the way that layout is performed
on GTK, and possibly with other
platforms&lt;/a&gt;. We're still
working through the consequences of this change, but it has indirectly
resolved a number of issues we have seen reported with widget layouts,
especially on GTK.&lt;/li&gt;
&lt;li&gt;We've added the &lt;a href="https://github.com/beeware/briefcase/pull/1078"&gt;ability to pass command line arguments to running
apps&lt;/a&gt; from the
&lt;code&gt;briefcase dev&lt;/code&gt; and &lt;code&gt;briefcase run&lt;/code&gt; interface. This was primarily done
to make it easier to run unit test suites; but it can be used for any
other reason you might want to use a command line argument.&lt;/li&gt;
&lt;li&gt;We have a &lt;a href="https://github.com/beeware/briefcase/pull/1106"&gt;draft implementation of a Linux system packaging
backend&lt;/a&gt; for
Briefcase. We've had consistent problems with both AppImage and
Flatpak, most of which can be traced back to resolving links to system
packages. We're not going to remove these backends - when AppImage and
Flatpak work, they're great options - but we're going to change the
default packaging backend on Linux to be system packages (i.e.,
DEB/RPM etc). This makes the simple case of building a package for
your own system much easier, while retaining the ability to build
packages for other distributions as required. We're hoping to land
this PR in the coming month.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/1102"&gt;corrected an issue with threading
modes&lt;/a&gt; that prevented
some Windows apps (especially PySide/Qt apps) from displaying dialogs.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/1113"&gt;corrected an issue with the Briefcase Web
backend&lt;/a&gt; that would
cause intermittent errors when loading a web app.&lt;/li&gt;
&lt;li&gt;We updated our CI infrastructure to make better use of shared task
definitions. BeeWare has a lot of GitHub repositories, and a lot of
common tasks (such as rolling out an app across multiple Python and
operating system versions). Previously, each GitHub repository had an
independent set of CI task definitions; we've now got a central
collection of task definitions that is used by all repositories.&lt;/li&gt;
&lt;li&gt;We cleaned up the &lt;a href="https://github.com/beeware/toga/pull/1762"&gt;table in Toga's documentation describing the state
of support of each widget&lt;/a&gt;.
This allows us to differentiate between widgets that we've fully
tested, and widgets that exist, but haven't been tested.&lt;/li&gt;
&lt;li&gt;Thanks to a community contribution, we've been able to &lt;a href="https://github.com/freakboy3742/chaquopy/pull/4"&gt;publish a
backlog of iOS binary packages for Python
3.8-3.11&lt;/a&gt;. For the
packages we currently support (including Numpy, Pandas, Pillow and
more), we're now able to offer an iOS binary wheel for every published
version for which there is a corresponding macOS wheel, going back to
2019.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;In March, we'll be continuing to improve GUI test coverage. Now that
we've got one widget to 100% coverage, we know we have all the core
testing infrastructure in place, so it should be much easier to
implement tests for the future widgets. By the end of March, we should
have a lot more widgets at 100% coverage.&lt;/p&gt;
&lt;p&gt;We'll also be presenting at &lt;a href="https://2023.everythingopen.au"&gt;Everything Open
2023&lt;/a&gt;. If you're attending, come say hi!&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/865"&gt;Modify the handling of app signing
options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/856"&gt;Add the ability to refresh the support package in a
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/853"&gt;Provide protection against creating projects with "semi-reserved"
names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/463"&gt;Add support for the ANDROID_HOME environment
variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1053"&gt;Add a template branch option when creating a new
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1011"&gt;Improve validation of project names in the Briefcase
wizard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on
macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1090"&gt;Correct the capture of log messages on the web
backend&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>January 2023 Status Update</title><link href="http://beeware.org/news/buzz/january-2023-status-update/" rel="alternate"/><updated>2023-02-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:ecabb394-0c83-37d0-bf60-d898e05e12b1</id><content type="html">&lt;p&gt;BeeWare has had an exciting start to the new year, with a couple of
significant releases&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;p&gt;We had two big releases in January.&lt;/p&gt;
&lt;p&gt;Firstly, we released Briefcase 0.3.12. This is the first Briefcase
release in 3 months, so it includes a lot of improvements, but the most
notable improvements are the new "Testing mode", a major improvement to
the Android build process, and a huge number of bug fixes and
improvements - especially on Windows.&lt;/p&gt;
&lt;p&gt;Secondly - and more importantly - we released Toga 0.3.0! No more dev
releases or &lt;code&gt;--pre&lt;/code&gt; flags for &lt;code&gt;pip&lt;/code&gt; - the stable release of Toga on PyPI
is now closely tracking actual development. It's been over 5 years since
we last released an official stable Toga version, even though we've been
recommending the dev releases for most of that time. However, as a
result of a number of changes that landed this month, we're finally
committing to the 0.3.0 branch properly.&lt;/p&gt;
&lt;p&gt;These releases incorporate changes going back months (and years); but we
made some very specific progress during January:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chaquopy &lt;a href="https://chaquo.com/chaquopy/chaquopy-version-14-0-2/"&gt;had a new
release.&lt;/a&gt;,
significantly improving build times on Android, improving the
rendering of &lt;code&gt;stdout&lt;/code&gt; content in the Android logs, adding some
features that make it easier to expose the original project source
code in the running app bundle, and enabling PEP517 builds of project
dependencies.&lt;/li&gt;
&lt;li&gt;Briefcase is now able to &lt;a href="https://github.com/beeware/briefcase/pull/1058"&gt;reference local source packages when
building Linux AppImage
binaries&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some errors caused by the way the Windows Store version of Python
handles local application data &lt;a href="https://github.com/beeware/briefcase/pull/1054"&gt;have been
corrected&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Briefcase's help text now &lt;a href="https://github.com/beeware/briefcase/pull/1005"&gt;shows the list of platforms and output
formats&lt;/a&gt;, rather than
requiring an additional help call to retrieve that information.&lt;/li&gt;
&lt;li&gt;Some issues with thread and asyncio safety in Rubicon ObjC were
&lt;a href="https://github.com/beeware/rubicon-objc/pull/246"&gt;identified and
resolved&lt;/a&gt;, along
with an issue associated with the way some Objective C classes (such
as NSWindow) are &lt;a href="https://github.com/beeware/rubicon-objc/pull/258"&gt;renamed at
runtime&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Initial GUI testing backends for
&lt;a href="https://github.com/beeware/toga/pull/1707"&gt;macOS&lt;/a&gt;,
&lt;a href="https://github.com/beeware/toga/pull/1749"&gt;iOS&lt;/a&gt; and
&lt;a href="https://github.com/beeware/toga/pull/1755"&gt;GTK&lt;/a&gt; were added.&lt;/li&gt;
&lt;li&gt;A long standing issue with the &lt;a href="https://github.com/beeware/toga/issues/1439"&gt;replacement of root window
content&lt;/a&gt; on GTK and iOS
has been resolved.&lt;/li&gt;
&lt;li&gt;Coverage testing was &lt;a href="https://github.com/beeware/toga/pull/1747"&gt;added to the Toga Android GUI test
backend&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;An API was added to &lt;a href="https://github.com/beeware/toga/pull/1728"&gt;allow scrolling MultilineTextInput
widgets&lt;/a&gt; to the top and
bottom of the widget content.&lt;/li&gt;
&lt;li&gt;The work &lt;a href="https://github.com/beeware/toga/pull/1675"&gt;moving Toga to use
Setuptools-SCM&lt;/a&gt; was
completed. Development versions of Toga will now report a specific
version control commit; release versions have their version determined
by the git tag used to produce the release.&lt;/li&gt;
&lt;li&gt;We completed a major review of the way we're using GitHub issue
labels, and modified those labels to be consistent across all
repositories.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Much of the last 3 months have been spent getting a GUI testing
framework in place for Toga. That work is now in place, so now we'll be
working full time on writing GUI tests for Toga, with the aim of getting
Toga to 100% coverage. Along the way, we'll discover all the edge cases,
bugs, and partially missing implementations that are lurking in the
individual Toga widgets.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/865"&gt;Modify the handling of app signing
options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/856"&gt;Add the ability to refresh the support package in a
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/853"&gt;Provide protection against creating projects with "semi-reserved"
names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/463"&gt;Add support for the ANDROID_HOME environment
variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/986"&gt;Purge cache folders when installing app code in
Briefcase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1053"&gt;Add a template branch option when creating a new
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/1011"&gt;Improve validation of project names in the Briefcase
wizard&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>2023Q1 Roadmap</title><link href="http://beeware.org/news/buzz/2023q1-roadmap/" rel="alternate"/><updated>2023-01-11T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:4108ae51-a5a7-3c55-976f-b9c970b4fe79</id><content type="html">&lt;p&gt;Welcome to a new year! 2022 saw some amazing progress for BeeWare; and
we've got some big plans for 2023. As always, this roadmap should be
read as a guide to what we aim to focus on over the coming quarter,
rather than a hard commitment of features that will be made available on
a specific deadline.&lt;/p&gt;
&lt;h2&gt;Q4 progress&lt;/h2&gt;
&lt;p&gt;Progress in Q4 was not as significant as we originally planned. A
combination of conference travel and holiday leave meant the quarter was
shorter than most; but even then, our goals for the quarter were
extremely optimistic.&lt;/p&gt;
&lt;p&gt;We were able to hit our goal for &lt;strong&gt;Web deployment&lt;/strong&gt;. We've restored the
Toga web backend to a working state, and we've added a Web deployment
backend to Briefcase. There's still a lot of work required before Web
deployment is a viable as a production solution, but the initial pieces
are now in place.&lt;/p&gt;
&lt;p&gt;We were also able to hit our goals on &lt;strong&gt;housekeeping&lt;/strong&gt;. We've made a lot
of improvements to the base infrastructure of repositories, enabling
Black, pre-commit, and towncrier in Toga, and improving coverage
reporting (including getting to 100% branch coverage in Briefcase's test
suite).&lt;/p&gt;
&lt;p&gt;We've made significant progress on improving the &lt;strong&gt;testing&lt;/strong&gt; story for
BeeWare apps. We've added the ability for Briefcase projects to run
normal Python test suites inside a packaged app, and we've demonstrated
that we can use this capability to run CI for iOS and Android apps (as
well as desktop platforms). This feature will be included in the next
Briefcase release.&lt;/p&gt;
&lt;p&gt;Using this new testing capability, we've started building a GUI test
suite for Toga. This is a critical part of ensuring the quality of Toga
going forward; but getting this testing framework in place has revealed
lots of complications and bugs. We're making progress, but there's still
a lot of work to be done.&lt;/p&gt;
&lt;p&gt;Our plans to release Toga v0.3 final have also been delayed. The process
of adding SCM-based versioning to the repository (part of the
housekeeping task) revealed a bug that prevented code running on
Android; fixing that bug became a blocker on the release of Toga v0.3.
We've now resolved that problem, so we should be able to release Toga
v0.3 final as soon as the fix has been released into the BeeWare's
Android tooling.&lt;/p&gt;
&lt;p&gt;Unfortunately, that leaves a lot on the Q4 TODO list. We haven't made
any changes to the example apps; Toga documentation is mostly unchanged;
we haven't been able to do any substantial Toga planning; and we haven't
been able to add any native cross-platform hardware support.&lt;/p&gt;
&lt;h2&gt;Q1 priorities&lt;/h2&gt;
&lt;p&gt;It's probably unsurprising that Q1 2023 will be picking up on items we
didn't get around to in Q4 2022.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt; - Completing the Toga GUI testing suite will be our
primary focus for the quarter.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Planning&lt;/strong&gt; - Once we've got the test harness in place, we'll be in a
much better position to evaluate what work remains to get to v1.0.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt; - The process of systematically building a test
suite also gives us an opportunity to update the API documentation for
each widget as we go. There's still lots of documentation required on
top of the API guide, but complete API documentation will be a big
start.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cross-platform hardware&lt;/strong&gt; - Cross-platform support for device
hardware (especially mobile) is one of the banner features that makes
mobile device support worthwhile. Providing proof that this hardware
support is easy to use will be a key demonstrator for BeeWare as a
platform.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Longer term goals&lt;/h2&gt;
&lt;p&gt;Our longer term goals are largely &lt;a href="/news/buzz/2022q4-roadmap"&gt;unchanged from Q4
2022&lt;/a&gt;. Upstreaming, Toga 1.0, and a forge for mobile
packages are all important goals for the BeeWare ecosystem. However, we
don't expect to make any significant progress on these goals until we
have solidified Toga's testing story.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;The seeming lack of progress made in Q4 was definitely disappointing;
but the work hasn't been wasted. Progress has been slow specifically
because the problems we're trying to solve are hard, and reveal every
gnarled edge case that platforms have to offer. We &lt;em&gt;are&lt;/em&gt; making
progress, though; and once we've got the Toga testing framework
stabilized, we'll be in a much stronger position to make predictions for
future work on Toga.&lt;/p&gt;
</content></entry><entry><title>December 2022 Status Update</title><link href="http://beeware.org/news/buzz/december-2022-status-update/" rel="alternate"/><updated>2022-12-17T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:d4b8c10c-21d5-31f5-bc8c-9219d14d755d</id><content type="html">&lt;p&gt;This status update is a little earlier than our usual end-of-month
report because the team will be taking a well-earned break to spend time
with family and friends over the holiday and new year period. As a
result, we've got less to report than in past months; however, some
significant progress and improvements have been made.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;p&gt;During December:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We continued to &lt;a href="https://github.com/beeware/briefcase/pull/1002"&gt;fine tune Briefcase's recently added test
mode&lt;/a&gt;. This reflects
issues that have been discovered as we continue to build Toga's GUI
test suite.&lt;/li&gt;
&lt;li&gt;We updated Briefcase's Web backend to &lt;a href="https://github.com/beeware/briefcase/pull/1006"&gt;support changes made in the
2022.12.1 release of
PyScript&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We fixed a &lt;a href="https://github.com/beeware/briefcase/pull/993"&gt;bug preventing the use of local file references in
requirements when building Linux
AppImages&lt;/a&gt;. As a side
effect, this change also makes it much easier to get a debug session
inside the Docker container used to build AppImages.&lt;/li&gt;
&lt;li&gt;We merged the &lt;a href="https://github.com/beeware/toga/pull/1687"&gt;first draft of the Toga GUI
testbed&lt;/a&gt;. There is still a
lot of work to be done on this testbed, but it provides a solid
foundation on which we can build tests of Toga's cross-platform GUI
behavior.&lt;/li&gt;
&lt;li&gt;We added support for &lt;a href="https://github.com/beeware/toga/pull/1710"&gt;mouse events on the Canvas on
GTK&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We corrected a bug on Windows where local date formats would cause the
DateInput widget to crash.&lt;/li&gt;
&lt;li&gt;We fixed &lt;a href="https://github.com/beeware/rubicon-objc/pull/238"&gt;a bug in Rubicon that would cause background threads to
stall on iOS&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;There won't be much more progress from the core team for the rest of
this year. We'll still be around to handle critical problems, answer
questions and do code reviews for contributors; but our response times
might be a little slower than normal. We'll publish our Q1 2023 roadmap
when we return in January - but we'll be largely picking up where this
year has left off - improving the testing story for Toga.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great
place to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/865"&gt;Modify the handling of app signing
options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/856"&gt;Add the ability to refresh the support package in a
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/853"&gt;Provide protection against creating projects with "semi-reserved"
names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/463"&gt;Add support for the ANDROID_HOME environment
variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/986"&gt;Purge cache folders when installing app code in
Briefcase&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>November 2022 Status Update</title><link href="http://beeware.org/news/buzz/november-2022-status-update/" rel="alternate"/><updated>2022-12-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:55638425-ec4b-3d08-9602-518cf72c6d5e</id><content type="html">&lt;p&gt;November has brought some very important improvements to BeeWare.
Although these changes don't have an immediate impact for users, they're
going to form a vital part of our work going forward.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;p&gt;During November:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/962"&gt;added a test mode to
Briefcase&lt;/a&gt;. This is a
&lt;em&gt;huge&lt;/em&gt; step forward, as it means we are now able to run automated
tests for iOS and Android, as well as validation tests for packaged
app behaviors. As a proof of concept, we've already begun porting our
&lt;a href="https://github.com/beeware/Python-support-testbed/pull/6"&gt;support package validation
app&lt;/a&gt; - this
is an app that we've historically needed to run manually.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/954"&gt;added the ability for an AppImage to customise the Dockerfile used
to build the project&lt;/a&gt;.
This was required to support the use of Rust-based dependencies (such
as &lt;a href="https://cryptography.io/"&gt;cryptography&lt;/a&gt;) in AppImages; however,
the approach we've taken should allow for any other customisation that
may be required, without the need to maintain a fork of the AppImage
project template.&lt;/li&gt;
&lt;li&gt;We've &lt;a href="https://github.com/beeware/briefcase/pull/974"&gt;added the ability for users to add customisations to the
Android Gradle file for their
projects&lt;/a&gt;. As with the
Dockerfile changes, this allows for small customisations without the
need to use a completely forked template.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/956"&gt;improved the resilience of Briefcase on flaky network
connections&lt;/a&gt;.
Previously, an interrupted download of a support package could leave
Briefcase in a broken state; this should no longer be possible.&lt;/li&gt;
&lt;li&gt;We've &lt;a href="https://github.com/beeware/briefcase/pull/964"&gt;improved type hinting in the Briefcase
codebase&lt;/a&gt;, especially
relating to the ToolCache class.&lt;/li&gt;
&lt;li&gt;We've &lt;a href="https://github.com/beeware/briefcase/pull/966"&gt;improved the handling of Android apps that fail immediately on
app startup&lt;/a&gt;.
Previously, if your app crashed due to something like a Python syntax
error, it was possible for Briefcase to hang in a way that made it
look like the issue was due to Briefcase being unable to start the
app, rather than a user code problem.&lt;/li&gt;
&lt;li&gt;We've &lt;a href="https://github.com/beeware/briefcase/pull/970"&gt;corrected a problem on Windows that was preventing app output
from being captured in the Briefcase
log&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We completed the process of modernising the layout and tooling of the
Toga repository, including the &lt;a href="https://github.com/beeware/toga/pull/1639"&gt;introduction of
Black&lt;/a&gt;,
&lt;a href="https://github.com/beeware/toga/pull/1638"&gt;Towncrier&lt;/a&gt;,
&lt;a href="https://github.com/beeware/toga/pull/1675"&gt;setuptools_scm&lt;/a&gt;, and a
&lt;a href="https://github.com/beeware/toga/pull/1669"&gt;large reorganisation of the code
structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We've &lt;a href="https://github.com/beeware/toga/pull/1687"&gt;begun building the first automated test of Toga's GUI
behavior&lt;/a&gt;. This is still in
the early stages, but it will form the a core part of our testing
infrastructure in the near future.&lt;/li&gt;
&lt;li&gt;We've added preliminary support for Python 3.12 to
&lt;a href="https://github.com/beeware/briefcase/pull/965"&gt;Briefcase&lt;/a&gt;,
&lt;a href="https://github.com/beeware/toga/pull/1677"&gt;Toga&lt;/a&gt; and &lt;a href="https://github.com/beeware/rubicon-objc/pull/231"&gt;Rubicon
ObjC&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've &lt;a href="https://github.com/beeware/rubicon-objc/pull/230"&gt;updated the codebase of Rubicon-ObjC to use
Black&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;December will be a slow month due to the Christmas and New Year break;
however, until then, we'll continue to focus will continue to be on
testing. We'll continue to build out the testing tools that we've worked
on this month, and start building tests using those tools. We also hope
to begin work on a firm 1.0 roadmap for Toga.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here's 8 open issues that would be a great place
to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/865"&gt;Modify the handling of app signing
options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/856"&gt;Add the ability to refresh the support package in a
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/853"&gt;Provide protection against creating projects with "semi-reserved"
names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/463"&gt;Add support for the ANDROID_HOME environment
variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/907"&gt;Add a command summary to briefcase
--help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/906"&gt;Add an option to display the platforms supported by a
command&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>October 2022 Status Update</title><link href="http://beeware.org/news/buzz/october-2022-status-update/" rel="alternate"/><updated>2022-11-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:0ee1a39e-89fa-385a-bffc-116d811c4ad1</id><content type="html">&lt;p&gt;How time flies! Progress in October was a little slower than in past
months; preparing for and attending DjangoCon US, plus some well-earned
holiday leave reduced the amount of time we had to work on new features.
However, we were able to make a number of significant improvements.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;p&gt;During October:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We restored the &lt;a href="https://github.com/beeware/toga/pull/1475"&gt;web backend for
Toga&lt;/a&gt;! Web deployment has
always been part of the BeeWare story, but we hit some technological
challenges with the approach that we were taking in the Toga 0.2
branch. However, with the addition of WASM as an officially supported
platform in CPython 3.11, and the release of PyScript, we have a new
way of getting Python in the browser. We have been able to use these
tools to build a much improved Toga web backend.&lt;/li&gt;
&lt;li&gt;We added support for &lt;a href="https://github.com/beeware/briefcase/pull/898"&gt;deploying Briefcase apps as static web
sites&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We released official support for Python 3.11 on macOS, iOS and Linux -
on the day that Python 3.11 was released!. Python 3.11 support for
Android and Windows is ready to go, and should be published in a day
or two.&lt;/li&gt;
&lt;li&gt;We modified Briefcase to &lt;a href="https://github.com/beeware/briefcase/pull/911"&gt;write its logs into
subdirectory&lt;/a&gt;, instead
of littering them in the project directory.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://2022.djangocon.us/talks/how-to-turn-your-website-into-an-app-and/"&gt;presented a talk at DjangoCon US
2022&lt;/a&gt;.
The video for this talk should be up in around a month. A major
feature of this talk was a demo of an Electron-style "web site as an
app", built entirely in Python. This demo (called Positron) has been
&lt;a href="https://github.com/beeware/toga/pull/1612"&gt;included in the Toga repository as an
example&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We attended the DjangoCon US 2022 sprints, and handed out 4 &lt;a href="https://beeware.org/contributing/challenge-coins/"&gt;challenge
coins&lt;/a&gt; to new
contributors!&lt;/li&gt;
&lt;li&gt;We added the ability to &lt;a href="https://github.com/beeware/toga/pull/1599"&gt;retrieve widgets by
ID&lt;/a&gt; to the Toga API.&lt;/li&gt;
&lt;li&gt;We made a big change to the way that &lt;a href="https://github.com/beeware/toga/pull/1534"&gt;Toga backends are
discovered&lt;/a&gt;. This new
approach has two major advantages - firstly, it means third-parties
can register their own backends; but more importantly, it means that
code no longer needs to explicitly provide a backend. This simplifies
the creation of test cases - but it also means that icons, images and
fonts no longer need to be "late bound". This is an internal detail,
but it significantly simplifies the code using those data types.&lt;/li&gt;
&lt;li&gt;We added the ability to &lt;a href="https://github.com/beeware/toga/pull/1588"&gt;create Image objects from raw
data&lt;/a&gt;, rather than an image
file.&lt;/li&gt;
&lt;li&gt;We started the process of modernising the layout and tooling of the
Toga repository. Some of these changes have already landed; more will
come in the coming days. This ensures that we have a stable foundation
for future work on Toga.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;During November, we continuing to focus on Toga, with a particular focus
on testing. A particular focus will be working out how to test graphical
features of Toga - an area that has historically been managed entirely
with manual testing. Having strong automated testing of graphical
features will be a key milestone in ensuring Toga remains stable in the
long term.&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here's 8 open issues that would be a great place
to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/753"&gt;Improve protection against corrupted or incomplete
downloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/865"&gt;Modify the handling of app signing
options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/856"&gt;Add the ability to refresh the support package in a
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/853"&gt;Provide protection against creating projects with "semi-reserved"
names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/463"&gt;Add support for the ANDROID_HOME environment
variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/882"&gt;Silence an warning that is displayed when an Android emulator has
no skin defined&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>2022Q4 Roadmap</title><link href="http://beeware.org/news/buzz/2022q4-roadmap/" rel="alternate"/><updated>2022-10-04T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:9b71e18d-eb1a-34aa-8bf9-589dd3532e1a</id><content type="html">&lt;p&gt;With Q3 completed, it's time to provide an update on the long term goals
and priorities of the BeeWare project. As always, this roadmap should be
read as a guide to what we aim to focus on over the coming quarter,
rather than a hard commitment of features that will be made available on
a specific deadline.&lt;/p&gt;
&lt;h2&gt;Q3 progress&lt;/h2&gt;
&lt;p&gt;We were able to hit our biggest Q3 goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Linux packaging&lt;/strong&gt; - We've investigated and addressed all the known
issues with Linux packaging. There's &lt;a href="https://github.com/beeware/briefcase/issues/886"&gt;one pending
enhancement&lt;/a&gt; that
would expand the range of third-party binary packages that can be
included in Briefcase projects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windows packaging&lt;/strong&gt; - We've introduced a stub binary for Windows
apps (as well as a Visual Studio target for Windows projects). This
allowed us to significantly improve log capture, so when a Windows app
crashes it's a lot easier to obtain diagnostic information. This
change also corrected &lt;em&gt;most&lt;/em&gt; of the issues with the way Windows apps
were using the site module; however, there is still &lt;a href="https://github.com/beeware/briefcase/issues/381"&gt;one issue related
to the handling of packages that have complex post-installation
processes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Binary modules&lt;/strong&gt; - By far the biggest achievement of Q3. With the
release of Briefcase 0.3.10, we now support binary modules on iOS and
Android. We have also published 40 of the most popular binary modules,
compiled for iOS and Android.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, we didn't hit all our goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt; - Testing support has improved substantially. We have a
much more thorough CI configuration on Briefcase that verifies that
templates generate valid projects. We also have &lt;a href="https://github.com/beeware/Python-support-testbed"&gt;a testbed
project&lt;/a&gt; that we
can use to check that support packages are behaving correctly.
However, we are not yet able to run this test project in CI, so we
don't have automated validation of PRs against the support packages.
We also made very little progress in GUI testing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conda integration&lt;/strong&gt; - We began initial discussions around Conda
integration, on two fronts: firstly, to investigate the possibility of
using Conda as a base for package management in apps; and secondly,
about using conda-forge as a framework for managing community
contributions. Both of these conversations are ongoing; it will likely
take some time before these efforts bear fruit.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Q4 priorities&lt;/h2&gt;
&lt;p&gt;In Q4, we're planning to focus on:&lt;/p&gt;
&lt;h3&gt;Toga&lt;/h3&gt;
&lt;p&gt;The primary focus for Q4 will be Toga. There are a number of pieces of
work involved with this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Housekeeping&lt;/strong&gt; - Basic repository maintenance tasks, like enabling
&lt;span class="title-ref"&gt;black&lt;/span&gt;, introducing pre-commit hooks,
towncrier, and automating release infrastructure.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Example consolidation&lt;/strong&gt; - Toga's examples folder has become a
sprawling collection of code that is part documentation, part testbed.
We need to start consolidating these examples into 2 apps - one that
is a user-facing demonstrator of Toga features, and one that can be
used as a functional test of Toga features.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt; - Modernising and cleaning up the existing test suite, and
working out how to automate GUI tests&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt; - Toga's documentation has lagged behind an
acceptable standard for a long time,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Planning&lt;/strong&gt; - Developing a clear plan for what will be in Toga 1.0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cross-platform hardware&lt;/strong&gt; - While it has always been &lt;em&gt;technically&lt;/em&gt;
possible to support the APIs needed to access device hardware, there
hasn't been a cross-platform API for this work. In Q4, we hope to
demonstrate at least 1 interesting piece of mobile device hardware.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although we won't get to Toga v1.0 in Q4, we &lt;em&gt;will&lt;/em&gt; land a v0.3 final,
after several years of maintaining dev pre-releases as the main way to
use Toga.&lt;/p&gt;
&lt;h3&gt;Web support&lt;/h3&gt;
&lt;p&gt;Toga has historically had support for the Web as a platform; however,
that effort was put on hold because the approach we were taking wasn't
proving viable. However, with the release of Python 3.11, WASM becomes
an officially supported CPython platform. We've also seen the release of
&lt;a href="https://pyscript.net"&gt;PyScript&lt;/a&gt;, demonstrating that client-side Python
in the browser is an extremely viable proposition. The time has come to
resurrect BeeWare's support for the web as a deployment platform. This
will involve getting Toga's web backend into a working state, and adding
a web deployment backend for Briefcase.&lt;/p&gt;
&lt;h2&gt;Longer term goals&lt;/h2&gt;
&lt;p&gt;Looking into next year, the big items on the horizon are:&lt;/p&gt;
&lt;h3&gt;Upstreaming&lt;/h3&gt;
&lt;p&gt;With binary modules now being supported on both iOS and Android, and the
introduction of a &lt;a href="https://peps.python.org/pep-0011/"&gt;Tier 3 support level in
PEP11&lt;/a&gt;, the prospect of elevating iOS
and Android to official supported platforms is seeming increasingly
plausible. Our hope is to go to PyCon US next year in a position to make
a concrete proposal to the CPython core team.&lt;/p&gt;
&lt;h3&gt;Toga 1.0&lt;/h3&gt;
&lt;p&gt;The broad goal for "Toga 1.0" could be considered "Tkinter, but with
some additional bells to show off". We want to deliver a core widget set
of the "essentials", plus some nice features to show off, like WebViews
and camera or GPS integration. We hope to establish the feature list for
Toga 1.0 in Q4; once that plan is in place, we'll have a better idea of
when we will be able to deliver on that plan.&lt;/p&gt;
&lt;h3&gt;A Forge for mobile packages&lt;/h3&gt;
&lt;p&gt;As of today, all binary modules for mobile platforms are being
maintained by the BeeWare team. This isn't a viable solution long term;
we need to move to an environment where the community can manage binary
packages for mobile platforms.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;For the last 6 months, the focus of BeeWare has been on Briefcase and
the support packages - ensuring that we have a feature complete, robust
set of tools for deploying apps on any platform. In Q4, our focus is
shifting to the tools we need to build apps &lt;em&gt;on&lt;/em&gt; those platforms, and
ensuring we have a stable foundation for future development. It's taken
a long time for BeeWare to get this far - but we're getting very close
to unlocking the remarkable potential of the Python ecosystem on mobile
devices.&lt;/p&gt;
</content></entry><entry><title>September 2022 Status Update</title><link href="http://beeware.org/news/buzz/september-2022-status-update/" rel="alternate"/><updated>2022-10-03T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:ba264dae-dc08-37e9-80f7-9d610f61b2fa</id><content type="html">&lt;p&gt;September has been a big month for the BeeWare team. There have been
lots of small updates - but there's one very large, eagerly anticipated
update that has taken several months to complete.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;p&gt;During September:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We added support for binary packages on mobile platforms! There's more
detail related to this than can fit in a bullet point; more details
below.&lt;/li&gt;
&lt;li&gt;We added the ability to &lt;a href="https://github.com/beeware/briefcase/pull/854"&gt;remove files from a templated
app&lt;/a&gt;. This can be used
to trim down a project, removing parts of the Python interpreter that
you don't need (such as standard library modules that you don't need)&lt;/li&gt;
&lt;li&gt;We've changed the way we use templates, switching to using &lt;a href="https://github.com/beeware/briefcase/pull/862"&gt;branches
based on the Briefcase release, rather than the Python
release&lt;/a&gt;. This enables
us to make development changes to templates without affecting the
published stable release.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/801"&gt;reworked the way Briefcase manages integrations with the tools
needed to build apps&lt;/a&gt;.
This was a mammoth project, but as a result the process of verifying
tools is faster, and a number of bugs related to having stale builds
have been resolved.&lt;/li&gt;
&lt;li&gt;We've made a number of improvements to console handling of log
messages, especially on Windows&lt;/li&gt;
&lt;li&gt;We improved error handling in Toga when &lt;a href="https://github.com/beeware/toga/pull/1589"&gt;TLS1.2 or TLS1.3 isn't
supported by Windows&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We started conversations with the teams at Anaconda responsible for
conda about using Conda as a base for Briefcase apps, and on using
Conde-forge style infrastructure to support binary packaging. Nothing
concrete has come from these conversations yet; these conversations
are ongoing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Binary package support you say?&lt;/h3&gt;
&lt;p&gt;All the new binary packaging support is contained in &lt;a href="https://pypi.org/project/briefcase/0.3.10/"&gt;Briefcase
0.3.10&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On Android, binary module support was achieved by moving to
&lt;a href="https://chaquo.com"&gt;Chaquopy&lt;/a&gt; as a base for Android projects. Along
with support for binary modules, this change has the added benefit of
faster startup times, and less bugs at runtime. This means you'll need
to re-generate any Android project - the Python source code should work
as-is, but there's no simple way to convert the Android Gradle project
from the older Rubicon base to the newer Chaquopy base.&lt;/p&gt;
&lt;p&gt;On iOS, we've &lt;a href="https://github.com/beeware/Python-Apple-support/pull/161"&gt;reworked how the support packages are
constructed&lt;/a&gt;,
and &lt;a href="https://github.com/beeware/briefcase/pull/849"&gt;added support for installing binary modules from a BeeWare-specific
package repository that includes builds of iOS binary
wheels&lt;/a&gt;. We've also added
asset signing to the iOS Xcode project - and applied the same changes to
the macOS backends. Of course, this also means you'll need to
re-generate any iOS project to take advantage of these changes.&lt;/p&gt;
&lt;p&gt;While we are now able to support binary packages on mobile platforms,
this doesn't mean that &lt;em&gt;every&lt;/em&gt; binary package is automatically
supported. Binary wheels need to be compiled for mobile platforms, and
compiling for mobile platforms can be complicated. However, we've
compiled ~40 of them most popular packages with binary components
(including numpy, pandas, cryptography, pillow and matplotlib), and made
them available as dependencies. In order to get working builds, some of
these packages are slightly older versions (e.g., cryptography is a
version from before the introduction of the rust dependency); however,
we've endeavoured to provide the most recent versions possible.&lt;/p&gt;
&lt;p&gt;A full list of supported packages can be found &lt;a href="https://chaquo.com/pypi-7.0/"&gt;on the Chaquopy package
repository for Android&lt;/a&gt;, and the &lt;a href="https://anaconda.org/beeware/repo"&gt;BeeWare
repository for iOS&lt;/a&gt;. If your project
uses one of these packages, you only need to add them to the
&lt;span class="title-ref"&gt;requires&lt;/span&gt; definition in your
&lt;span class="title-ref"&gt;pyproject.toml&lt;/span&gt;, then update and re-build
your project, and you're done.&lt;/p&gt;
&lt;p&gt;If there’s a package you want that isn't on this list, you'll need to
request a binary wheel. For Android, &lt;a href="https://github.com/chaquo/chaquopy/issues"&gt;open a ticket on the Chaquopy
repository&lt;/a&gt;. For iOS, &lt;a href="https://github.com/freakboy3742/chaquopy"&gt;open a
ticket on this repository&lt;/a&gt;. If
you're adventurous, you can also try building wheels yourself. The issue
trackers are on a project that has as "forge-like" tool for building
wheels, in the &lt;span class="title-ref"&gt;server/pypi&lt;/span&gt; folder; there
are tools and documentation describing how to build a package. The use
of these projects is a short-term measure; in the longer term, we want
to move to an actual “forge”-style community-managed model for managing
binary packages.&lt;/p&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;For the last few months, the focus of the BeeWare team has been on
Briefcase and the support packages. In October (and the rest of Q4),
we'll be shifting our focus to Toga. The initial focus will be on
improving the foundation of the project - testing and build
infrastructure; but once those pieces are in place, we'll start adding
new features.&lt;/p&gt;
&lt;p&gt;We'll also be at &lt;a href="https://2022.djangocon.us"&gt;DjangoCon US&lt;/a&gt; in San
Diego - and there will be some web-related updates related to the
presentation that will be given at that conference. We hope we'll see
you there!&lt;/p&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here's 10 open issues that would be a great place
to get started with contributing to a BeeWare project. They're all
relatively minor changes, but would provide a big improvement to the
lives of BeeWare users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/883"&gt;Write Briefcase logs into a subdirectory, instead of the project
folder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/753"&gt;Improve protection against corrupted or incomplete
downloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/865"&gt;Modify the handling of app signing
options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/880"&gt;Modify the Briefcase new project wizard to show which repository
and branch it's
using&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode
updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/856"&gt;Add the ability to refresh the support package in a
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/853"&gt;Provide protection against creating projects with "semi-reserved"
names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android
project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/463"&gt;Add support for the ANDROID_HOME environment
variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/beeware/briefcase/issues/882"&gt;Silence an warning that is displayed when an Android emulator has
no skin defined&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others
know you're looking at it, and try your hand at a PR! We have a &lt;a href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide
on setting up a Briefcase development
environment&lt;/a&gt;;
but if you need any additional assistance or guidance, you can ask on
the ticket, or join us on the &lt;a href="/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>August 2022 Status Update</title><link href="http://beeware.org/news/buzz/august-2022-status-update/" rel="alternate"/><updated>2022-09-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:0c8eda3d-9e36-376a-b4ef-77269864a32c</id><content type="html">&lt;p&gt;The main focus of the BeeWare team during August was binary module
support on mobile platforms. Although we haven't got the final results
of this work yet, we have significant progress to report for both iOS
and Android. We've also had a number of other improvements land over the
course of the month.&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;p&gt;During August:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We have continued to work on the changes needed to migrate Android
support to Chaquopy. This has included some &lt;a href="https://github.com/beeware/briefcase-android-gradle-template/pull/52"&gt;major changes to the
Android Gradle
template&lt;/a&gt;,
and developing a Rubicon Java compatibility layer. Eventually, Toga
will migrate to use the Chaquopy APIs directly, but in the interim,
the Rubicon APIs will continue to work.&lt;/li&gt;
&lt;li&gt;We have started updating Chaquopy to support multiple Python versions.
Historically, Chaquopy has only supported a single Python3 version
(3.8); for compatibility with Briefcase, we are adding support for
Python 3.9 and 3.10, as well as preparing the ground for a 3.11
release when Python 3.11 is finalised.&lt;/li&gt;
&lt;li&gt;We have modified the Python Apple support packages to &lt;a href="https://github.com/beeware/Python-Apple-support/pull/161"&gt;provide the
binary portions of the Python standard library as dynamically loaded
binary
modules&lt;/a&gt;,
and modified the
&lt;a href="https://github.com/beeware/briefcase-iOS-Xcode-template/pull/7"&gt;iOS&lt;/a&gt;
and
&lt;a href="https://github.com/beeware/briefcase-macOS-Xcode-template/pull/10"&gt;macOS&lt;/a&gt;
templates to use and sign these binary modules. These changes haven't
landed yet, but they have been tested on simulators and physical
devices. Along the way, we've also updated the support packages to use
OpenSSL 3.&lt;/li&gt;
&lt;li&gt;We have modified Briefcase to &lt;a href="https://github.com/beeware/briefcase/pull/805"&gt;make the Python support package
optional&lt;/a&gt;, at the
discretion of the project template. This was needed because Chaquopy
provides the Python library using a Gradle plugin, rather than
requiring a project to source a pre-compiled support package.&lt;/li&gt;
&lt;li&gt;We have addressed an issue with the way Briefcase handles
&lt;a href="https://github.com/beeware/briefcase/pull/816"&gt;requirements references when they are relative file
references&lt;/a&gt;. Although
this was added to allow rapid debugging of changes to Toga on Android,
it also affected the recently added Linuxdeploy backend.&lt;/li&gt;
&lt;li&gt;We've &lt;a href="https://github.com/beeware/briefcase/pull/846"&gt;added an "open" subcommand to
Briefcase&lt;/a&gt;, making it
easier to open project-based templates in their respective IDEs.&lt;/li&gt;
&lt;li&gt;We've &lt;a href="https://github.com/beeware/briefcase/pull/821"&gt;improved Android log
handling&lt;/a&gt;, ensuring
that more app-specific logs are displayed to the user.&lt;/li&gt;
&lt;li&gt;We've &lt;a href="https://github.com/beeware/briefcase/pull/844"&gt;dramatically improved our CI testing of
Briefcase&lt;/a&gt;. We now
build an app on every platform we support, using every backend.&lt;/li&gt;
&lt;li&gt;We've addressed a number of bugs in the Pack layout algorithm.&lt;/li&gt;
&lt;li&gt;We've continued the process of making Toga widget APIs naming
internally consistent.&lt;/li&gt;
&lt;li&gt;We've fixed some canvas bugs that were causing problems on Windowns
with our native Matplotlib rendering backend,
&lt;a href="https://github.com/beeware/toga-chart"&gt;toga-chart&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've addressed some bugs associated with &lt;a href="https://github.com/beeware/toga/pull/1572"&gt;changing the main content
of a Toga window&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We added an &lt;a href="https://github.com/beeware/toga/pull/1574"&gt;initial implementation of a DetailedList widget on
Windows&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;In September, we hope to wrap up the work on binary dependencies. On
Android, this is mostly a matter of completing the work to support
multiple Python versions. On iOS, we need to develop the tools to manage
the compilation of third-party binary libraries. We have an initial
proof of concept of this; we need to finish these tools, and develop the
infrastructure to distribute. We're also hoping to start conversations
with the Anaconda team about Conda integration with Briefcase, and start
improving GUI testing in Toga.&lt;/p&gt;
</content></entry><entry><title>July 2022 Status Update</title><link href="http://beeware.org/news/buzz/july-2022-status-update/" rel="alternate"/><updated>2022-08-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:de3ac9af-8a78-3b2c-a96c-bb051abf9f8f</id><content type="html">&lt;p&gt;Another month of important updates to the BeeWare project! This month,
our focus was on packaging improvements on Linux and Windows.&lt;/p&gt;
&lt;p&gt;In addition the technical progress, we welcomed &lt;a href="https://github.com/mhsmith"&gt;Malcolm Smith (@mhsmith
on GitHub)&lt;/a&gt; to the Anaconda BeeWare team!
Malcolm brings his considerable experience developing and maintaining
&lt;a href="https://github.com/chaquo"&gt;Chaquopy&lt;/a&gt;, a set of tools and libraries for
building Android applications that use Python. Chaquopy tackles the
"Python on Android" problem from the perspective of adding Python to an
existing Android Studio project rather than writing apps entirely with
Python; as a result, it features much tighter integration with native
Android Studio tooling. One particularly interesting feature of Chaquopy
is that it supports binary dependencies on Android - a key feature that
BeeWare's Android tooling currently lacks. Historically, Chaquopy was a
closed source tool with licenses available for open source projects;
however, as a result of joining Anaconda, Malcolm has &lt;a href="https://chaquo.com/chaquopy/chaquopy-is-now-open-source/"&gt;released Chaquopy
as an Open Source
project&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;p&gt;During July:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/756"&gt;added support for Linuxdeploy
plugins&lt;/a&gt; for Linux
AppImages. These plugins are an important part of making AppImages
self-contained, as many libraries need to provide the Linuxdeploy
tooling hints to help find all the resources needed at runtime. Adding
support for these plugins should address most of the issues we've been
seeing with moving AppImages between Linux versions.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/802"&gt;added a Flatpak backend for Linux
packaging&lt;/a&gt;. Flatpak is
an alternative packaging format to AppImage which has the support of a
number of large Linux distributions. For now, AppImage continues to be
the default Linux packaging format, but we may change this default in
the future.&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/beeware/briefcase/pull/782"&gt;improved the packaging of Windows apps by adding a stub
binary&lt;/a&gt;. We're still
hunting some bugs in this stub binary, but when those are resolved,
the Windows apps generated by Briefcase will present to the operating
system with consistent app naming and icons. The stub binary also
enables us to catch runtime problems with the app in a way that makes
diagnosing app problems much easier.&lt;/li&gt;
&lt;li&gt;We presented a webinar about native application development. If you
weren't able to attend the webinar live, a recording is available;
&lt;a href="https://event.on24.com/wcc/r/3766379/B50F020E006CF935D87609BF3E247ED7?partnerref=anaconda.com"&gt;register here to
watch&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We got an initial proof of concept of a Toga app running on Android
using Chaquopy as a base, accessing a binary library (matplotlib),
deployed with Briefcase. Over the coming weeks, we're hoping this
proof of concept will evolve into major improvement to BeeWare's
Android tooling.&lt;/li&gt;
&lt;li&gt;We modified Briefcase to &lt;a href="https://github.com/beeware/briefcase/pull/777"&gt;use OS-appropriate directories for
caching&lt;/a&gt;. While the
&lt;code&gt;~/.briefcase&lt;/code&gt; location has served us well, it isn't a location that
adheres to platform-native conventions for storing app resources, so
we've moved Briefcase's cache of downloads, tools and templates to a
platform-appropriate location.&lt;/li&gt;
&lt;li&gt;We addressed an issue with the &lt;a href="https://github.com/beeware/briefcase/pull/803"&gt;current working directory leaking into
the runtime path&lt;/a&gt;. This
was especially common with Linux apps, but it could potentially be an
issue with other platforms as well.&lt;/li&gt;
&lt;li&gt;We've started the process of making Toga widget APIs internally
consistent. While we've aimed to keep naming of widgets' attributes
and handlers consistent, there are a couple of annoying
inconsistencies. We've started the process of cleaning up these
inconsistencies.&lt;/li&gt;
&lt;li&gt;We've started looking into binary dependencies on iOS apps.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;In August, our major focus will be binary dependencies on mobile. This
is one of the biggest missing pieces of the BeeWare story at present.
Being able to utilize Chaquopy as a base gives us a huge head start on
Android, so it seems likely we'll have a working solution for Android in
the near future. However, on iOS, we're still at the "we don't know what
we don't know" stage. It's unclear if we'll have a fully working
solution by the end of the month, but we should have at least some
progress to report.&lt;/p&gt;
</content></entry></feed>