title: 2025 Curtin University Capstone Project
---
author: Curtin Capstone Team
---
body:

Since Febuary, a team of final year students from [Curtin University](https://www.curtin.edu.au) has been collaborating with the BeeWare Project as part of a capstone project for their degrees. This is a summary of the work they have completed.

# Curtin Capstone

Capstone is the final year project undertaken by students across all computing disciplines at Curtin University, including Computer Science, Software Engineering, Cyber Security, and Information Technology. It allows students the opportunity to work in teams on real-world projects in collaboration with industry partners, gaining practical experience and professional exposure before graduating.

This year our team has had the exciting opportunity to contribute to BeeWare for our Capstone project.

Meet the Team:

 - Kavidu Abeykoon Mudiyanselagedara ([kavi2du](https://github.com/kavi2du)); Information Technology
 - Callum Horton ([Stringer90](https://github.com/Stringer90)); Software Engineering
 - Caydn Lee ([caydnn](https://github.com/caydnn)); Software Engineering
 - Jaeden Mah ([JMah007](https://github.com/JMah007)); Computer Science
 - Mitchell Pontague ([mEp3ii2](https://github.com/mEp3ii2)); Software Engineering
 - Veronica Taniputra ([vt37](https://github.com/vt37)); Cyber Security 

In the first semester, our team gained exposure to the BeeWare ecosystem through tackling a variety of small bug fixes within Briefcase and Toga, creating widgets for the web backend in Toga and completing small research tasks into the mechanisms within the BeeWare tools. After this, the team split off into pairs to plan out larger deliverable contributions that would add or changes features within BeeWare.
It is these deliverables that the team worked on in the second semester.

## What Weâ€™ve Worked On This Semester

### Toga Web Testing

*To be filled out by Veronica and Callum

### Briefcase Web Development Optimisations

This semester, we have successfully laid the groundwork for web platform development mode support in briefcase by making the `dev` command platform-aware and implementing virtual environment management. We refactored the core DevCommand architecture by introducing platform-specific `DevCommand` subclasses like `StaticWebDevCommand` to handle platform-dependent workflows (PR #2419).Next, we implemented virtual environment management by introducing the VirtualEnvironment context manager tool, which provides isolated, configurable virtual environments for development mode, which addressed dependency conflicts while maintaining compatibility with existing Briefcase patterns. Within the managed virtual environment, local app assets are installed in editable mode which create the .pth files to make the assets discoverable by the server.  We've started work on the StaticWebDevCommand with proper venv creation and path management specific to web development, app execution remains a planned next step that has been marked with the UnsupportedCommandError error. This work establishes the foundation for exposing the app assets to the web server allowing the live-reload workflow ultimately speeding up the web developement process. These are outlined in the original proposal that you can check out here to see an outline of our next steps for those wanting to carry on where we've left off.

### PyScript Briefcase and Toga Dependencies

Overview

This semester, we worked on redesigning the Briefcase static web build pipeline to implement a deterministic asset insertion system which replaced template-based asset management. The new system enables Toga and other toolkits to embed their configuration files and front-end resources directly into wheel packages. The web template received a redesign which established specific areas for insertion. The present restrictions prevent Toga and other toolkits from taking full control of their front-end operations while working independently from Briefcase. The new system separates tasks while making maintenance easier and enables toolkits to manage their front-end components.....

* To be filled out by Kavi and Caydn

## Other Contributions

Below is a summary of contributions either made during the first semester or in down time during the second semester.

### Briefcase Contributions

- PR [#2198](https://github.com/beeware/briefcase/pull/2198): Add boolean question (feature)
- PR [#2103](https://github.com/beeware/briefcase/pull/2203): Add XML content escaping filter to cookiecutter.py (feature)
- PR [#2199](https://github.com/beeware/briefcase/pull/2199): Add catch exception when deleting JDK (bugfix)
- PR [#2229](https://github.com/beeware/briefcase/pull/2229): Accept other changelog name and extension (feature)
- PR [#2201](https://github.com/beeware/briefcase/pull/2201): Add ``--app`` option to briefcase build/package (feature)
- PR [#2214](https://github.com/beeware/briefcase/pull/2214): Add ``--app`` option to briefcase create/update (feature)
- PR [#2236](https://github.com/beeware/briefcase/pull/2236): Normalise contribution docs with Toga (documentation)
- PR [#54](https://github.com/beeware/briefcase-windows-VisualStudio-template/pull/54): Use XML content escaping filter to Visual Studio template. (bugfix)

### Toga Contributions

- PR [#3259](https://github.com/beeware/toga/pull/3259): Add web screenshots (documentation)
- PR [#3466](https://github.com/beeware/toga/pull/3466): Fix button click handling in Toga Web backend to correctly trigger event (bugfix)
- PR [#3338](https://github.com/beeware/toga/pull/3338): DateInput (web widget)
- PR [#3405](https://github.com/beeware/toga/pull/3405): TimeInput (web widget)
- PR [#3362](https://github.com/beeware/toga/pull/3362): ScrollContainer (web widget)
- PR [#3425](https://github.com/beeware/toga/pull/3425): Table (web widget) (work in progress)
- PR [#3402](https://github.com/beeware/toga/pull/3402): Selection (web widget)
- PR [#3527](https://github.com/beeware/toga/pull/3527): Slider (web widget)
