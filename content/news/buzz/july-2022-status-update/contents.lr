title: July 2022 Status Update
---
author: Russell Keith-Magee
---
body:

Another month of important updates to the BeeWare project! This month,
our focus was on packaging improvements on Linux and Windows.

In addition the technical progress, we welcomed [Malcolm Smith (@mhsmith
on Github)](https://github.com/mhsmith) to the Anaconda BeeWare team!
Malcolm brings his considerable experience developing and maintaining
[Chaquopy](https://github.com/chaquo), a set of tools and libraries for
building Android applications that use Python. Chaquopy tackles the
"Python on Android" problem from the perspective of adding Python to an
existing Android Studio project rather than writing apps entirely with
Python; as a result, it features much tighter integration with native
Android Studio tooling. One particularly interesting feature of Chaquopy
is that it supports binary dependencies on Android - a key feature that
BeeWare's Android tooling currently lacks. Historically, Chaquopy was a
closed source tool with licenses available for open source projects;
however, as a result of joining Anaconda, Malcolm has [released Chaquopy
as an Open Source
project](https://chaquo.com/chaquopy/chaquopy-is-now-open-source/)!

## What we've done

During July:

- We [added support for Linuxdeploy
  plugins](https://github.com/beeware/briefcase/pull/756) for Linux
  AppImages. These plugins are an important part of making AppImages
  self-contained, as many libraries need to provide the Linuxdeploy
  tooling hints to help find all the resources needed at runtime. Adding
  support for these plugins should address most of the issues we've been
  seeing with moving AppImages between Linux versions.
- We [added a Flatpak backend for Linux
  packaging](https://github.com/beeware/briefcase/pull/802). Flatpak is
  an alternative packaging format to AppImage which has the support of a
  number of large Linux distributions. For now, AppImage continues to be
  the default Linux packaging format, but we may change this default in
  the future.
- We [improved the packaging of Windows apps by adding a stub
  binary](https://github.com/beeware/briefcase/pull/782). We're still
  hunting some bugs in this stub binary, but when those are resolved,
  the Windows apps generated by Briefcase will present to the operating
  system with consistent app naming and icons. The stub binary also
  enables us to catch runtime problems with the app in a way that makes
  diagnosing app problems much easier.
- We presented a webinar about native application development. If you
  weren't able to attend the webinar live, a recording is available;
  [register here to
  watch](https://event.on24.com/wcc/r/3766379/B50F020E006CF935D87609BF3E247ED7?partnerref=anaconda.com).
- We got an initial proof of concept of a Toga app running on Android
  using Chaquopy as a base, accessing a binary library (matplotlib),
  deployed with Briefcase. Over the coming weeks, we're hoping this
  proof of concept will evolve into major improvement to BeeWare's
  Android tooling.
- We modified Briefcase to [use OS-appropriate directories for
  caching](https://github.com/beeware/briefcase/pull/777). While the
  `~/.briefcase` location has served us well, it isn't a location that
  adheres to platform-native conventions for storing app resources, so
  we've moved Briefcase's cache of downloads, tools and templates to a
  platform-appropriate location.
- We addressed an issue with the [current working directory leaking into
  the runtime path](https://github.com/beeware/briefcase/pull/803). This
  was especially common with Linux apps, but it could potentially be an
  issue with other platforms as well.
- We've started the process of making Toga widget APIs internally
  consistent. While we've aimed to keep naming of widgets' attributes
  and handlers consistent, there are a couple of annoying
  inconsistencies. We've started the process of cleaning up these
  inconsistencies.
- We've started looking into binary dependencies on iOS apps.

## What's next?

In August, our major focus will be binary dependencies on mobile. This
is one of the biggest missing pieces of the BeeWare story at present.
Being able to utilize Chaquopy as a base gives us a huge head start on
Android, so it seems likely we'll have a working solution for Android in
the near future. However, on iOS, we're still at the "we don't know what
we don't know" stage. It's unclear if we'll have a fully working
solution by the end of the month, but we should have at least some
progress to report.

---
pub_date: 2022-08-01
---
mastodon_handle: @freakboy3742@cloudisland.nz
