title: 2025Q2 Roadmap
---
author: Russell Keith-Magee
---
body:

In Q1, BeeWare hit some major milestones for support of iOS and Android on mobile platforms; but we still have more work to do. As always, this roadmap should be read as a guide to what we aim to focus on over the coming quarter, rather than a hard commitment of features that will be made available on a specific deadline.

Q1 progress
-------------

In Q1, we made major progress in the state of binary packaging for iOS and Android. PyPI now accepts binary wheel uploads; and we have uploaded wheels for one package (pyspamsum) to prove that this support works. We've also contributed changes in cibuildwheel that supports the creation of iOS binary wheels. We need to wait until those changes are in an official cibuildwheel release before we can contribute patches upstream for other projects, but we have patches for a couple of projects ready to submit as soon as there is an official release to use. We've completed some preparatory work in CPython and pip to support building Android binary wheels, but the changes to cibuildwheel to support Android wheels are still in the early stages of development.

Unfortunately, our collaboration with the PyScript team didn't work out as expected; the opportunity to work with the PyScript team that we anticipated did not eventuate. However, a group of students from Curtin University will be working on Toga's web backend as part of their final year capstone project. This will include making modifications to Briefcase to support testing web-based apps. This project will run until the end of the year; we look forward to seeing the progress they're able to make.

However, we *have* made good progress on Emscripten support in CPython. A buildbot for Emscripten is almost ready to launch; having a stable buildbot is a major milestone in restoring Emscripten to Tier 3 support in CPython. Draft PEPs defining the Emscripten platform (PEP 776) and Emscripten wheel tagging (PEP 783) are currently in discussion.

Q2 priorities
--------------

In Q2, we're planning to continue working on binary packaging for mobile platforms. This work will take three forms:

* We'll continue working on the cibuildwheel patch to support building Android wheels. Now that the iOS patch has landed in cibuildwheel, we're in a position to use that patch as a template for the analogous changes needed to support Android.

* We'll continue to work on generating patches to third-party projects to prove that the tooling we've developed for mobile binary wheels is sufficient to support the entire Python ecosystem. We're currently working on Numpy; Cryptography will likely be the next project we look into.

* We will start the process of formalising and standardising the work that we've done to support iOS and Android packaging. With PyCon US approaching rapidly, we want to get these discussions underway so that we can make the most of the opportunity provided by having a large portion of the Python community in one place. There are two major areas that require formalisation - the production of official binaries for iOS and Android support; and the state of cross-platform build environments. 

In addition to the work we're doing on mobile binary wheels, we're expecting to work on improving Briefcase, with a view to making Briefcase's tooling for packaging, signing and notarization useful as standalone utilities, without the need to use Briefcase to package the entire app.

Longer term goals
-----------------

The long terms goals of BeeWare remain largely the same. Once we've developed a compelling story for mobile binary packaging, we'll be able to turn our focus back to Toga. There's a number of navigation and data organization widgets that need to be developed; we also need to improve documentation of some common development patterns that are sources of common questions in BeeWare support channels. Unless pull requests are submitted from the broader community, it is unlikely that we'll make any substantial progress on this front until the end of this year, or perhaps early next year.

We're also intending to look at tooling other than ``pip`` and ``venv`` for building Briefcase packages. Integration with Conda is one obvious goal, as it provides rich tooling for distributing complex binary requirements. ``uv`` is another tool that might fit well in the Briefcase development story. Again, it is unlikely that we'll make any progress on this front before the end of this year.
---
mastodon_handle: @freakboy3742@cloudisland.nz
---
pub_date: 2025-04-03
