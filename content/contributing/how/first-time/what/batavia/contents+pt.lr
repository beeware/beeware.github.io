body:

Sobre Batavia
--------------

A ideia por traz do Batavia é pegar um bytecode do Python e enviar para um navegador onde ele possa rodar como uma implementação JavaScript da Python virtual machine.

Isso significa que é possível escrever aplicações web 100% em Python - então qualquer um novo no desenvolvimento web não precisa aprender múltiplas linguagens para desenvolver aplicações web. 

Antes de você começar
--------------------------

Nas próximas instruções , nós vamos assumir que você está familiar com `Github e fazer pull requests </pt_BR/contributing/how/first-time/github>`__. Nós também vamos assumir algum nível de conhecimento em Python e JavaScript; se qualquer coisa que nós descrevermos não fizer sentido, não se preocupe - nós estaremos mais que felizes em preencher essas lacunas. A partir desse ponto, nós não sabemos o que você não sabe :-)

Esse tutorial irá focar-se nas contribuições de código. Se seu interesse/habilidades estiver em outro lugar(ex, teste, documentação), nos deixe saber, assim podemos fazer outras sugestões.

Antes de você fazer sua primeira contribuição, de uma volta com Batavia. As instruções no `guia para começar <https://batavia.readthedocs.io/en/latest/intro/index.html>`__ *devem* se suficiente para continuar. Se você ficar preso, me deixe saber e eu vou libertá-lo. E se você ficou preso, esse também será um lugar para sua primeira contribuição - pense em quais instruções poderiam ter feito você *não* ficar preso, e contribua para atualizar o README.

Sua primeira contribuição
------------------------------

Uma vez que você tenha feito Batavia funcionar, você estará pronto para fazer sua primeira contribuição do código. O `guia de contribuição <https://batavia.readthedocs.io/en/latest/community/contributing.html>`__ irá guiá-lo através do processo de configuração do ambiente de desenvolvimento. Utilize esse guia até você conseguir rodar a suíte de testes do Batavia - uma vez que você esteja pronto para rodar a suíte de testes sem nenhuma falha, você estará pronto para adicionar alguns códigos novos para a base de código do Batavia.

Para conseguir implementar uma virtual machine Python completa, Batavia precisa implementar todas as excentricidades do comportamento do Python. Por exemplo, Python sempre deixa você multiplicar uma string por um inteiro (ex, ``“foo” * 3`` => ``“foofoofoo”``). O comportamento do JavaScript pode ser um pouco diferente, dependendo das circunstancias - então nós precisamos criar uma biblioteca que implementa o comportamento desejado do Python.

Esse exemplo em particular (string vezes numero) já foi implementado - veja `a definição da função __mul__() <https://github.com/pybee/batavia/blob/master/batavia/types/Str.js>`__. Esta implementação do operador de multiplicação é implementado em JavaScript, mas ele implementa o comportamento de Python - para *alguns* tipos de dado.

Se você olhar em `tests/datatypes/test_str.py <https://github.com/pybee/batavia/blob/master/tests/datatypes/test_str.py>`__, você vai ver os testes para esse comportamento. Nós já escrevemos uma suíte de testes que tenta executar todos as operações de cada tipo de dado. No entanto, todos os nomes listados naquele arquivo são exemplos que sabemos que irá falhar (por que a implementação ainda não existe). O teste funciona escrevendo um curto programa que implementa uma operação matemática, roda o programa no Python e então roda novamente no Batavia. O teste passe quando as duas execuções produzem uma saída identica.

Então - sua primeira contribuição a um projeto open source: Escolha um teste que esta listado no arquivo de teste ``test_str.py`` (ex,  ``test_multiply_float`` é o teste de multiplicar uma string por um float), e modificar a implementação do Str até você ter a mesma saída do programa do CPython que  você tem da versão do Batavia do mesmo programa. Isso incluem mensagens de erro - se o CPython levanta uma ``TypeError`` para uma operação em particular (ex,  ``“foo” * 3.1415``), então Batavia também deve levantar - e a mensagem de erro deve ser exatamente a mesma. 

Antes de você começar a trabalhar, visite o `ticket #46 <https://github.com/pybee/batavia/issues/46>`_ e registre qual função você irá trabalhar - dessa forma nós não teremos 2 pessoas trabalhando na mesma função.

Uma vez que você tenha escrito sua implementação, rode os testes. Se você tiver um “unexpected success” da suíte de testes, e você *não tiver* nenhuma falha, você conseguiu!
Apague a linha do  arquivo ``test_str.py`` correspondente ao teste que você corrigiu (porque não é mais esperado que o teste falhe), e envie um pull request!

Celebre!
------------

Então faça uma festa de celebração a sua escolha! Você é um contribuidor open source!

Boa sorte - eu mal posso esperar para ver sua primeira contribuição!

---
gutter:

Conseguindo Ajuda
----------------------

Se você teve alguma dificuldade com este tutorial, ou teve alguma coisa que você não entendeu, não esqueça - nós estamos aqui para ajuda-lo. `Entre em contato </community/getting-help/>`__ e nós vamos ajuda-lo, seja dando uma melhor explicação do que é necessário, ajudando a debugar um problema difícil, ou indicando tutoriais para o background que você possa precisar.

---
summary: Então você gostaria de contribuir para um projeto Open Source? Batavia é um ótimo lugar para começar.
---
title: Sua primeira contribuição ao Batavia.
