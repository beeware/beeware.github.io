_model: page
---
title: Tu primera contribución a Batavia
---
body:

Acerca de Batavia
-----------------------

La idea detrás de Batavia es tomar bytecode de Python, y enviarlo a un navegador donde se ejecuta en una implementación de Javascript de la máquina virtual Python.

Esto significa que es posible escribir aplicaciones web 100% en Python - para aquellos nuevas en el desarrollo web no necesiten aprender varios idiomas para desarrollar aplicaciones web.

Antes de que empieces
------------------------------

En las siguientes instrucciones, vamos a suponer que estás familiarizado con `Github y hacer Pull Requests </es/contribuir/como-ayudar/principiantes/ github>`__. También vamos a asumir un nivel de entrada de Python y JavaScript; si algo que describimos aquí no tiene sentido, no te preocupe - estamos más que felices de llenar las lagunas. En este punto, no sabemos lo que no sabes :-)

Este tutorial también se centrará en las contribuciones de código. Si tus intereses/habilidades están en otro lugar (por ejemplo, pruebas, documentación), nos los puedes hacer saber, y así podeos hacer algunas otras sugerencias.

Antes de hacer tu primera contribución, dale una prueba a Batavia. Las instrucciones de la guía `Primeros pasos <http://batavia.readthedocs.io/en/latest/intro/index.html>`__ *deberían* ser suficientes para empezar. Si te quedas atascado, nos puedes decir, y te ayudaremos. Si te quedas atascado, esto también apuntará a tu primera contribución - averiguar qué instrucciones te habrían hecho *no* quedarte atascado, y contribuir con una actualización al README.

Tu primera contribución
---------------------------------

Una vez que tengas a Batavia trabajando, estarás listo para hacer tu primera contribución de código. La guía de contribución (http://batavia.readthedocs.io/en/latest/community/contributing.html) te guiará a través del proceso de configuración de tu entorno de desarrollo. Trabaja con esta guía hasta que puedas ejecutar la suite de pruebas de Batavia. Una vez que hayas podido ejecutar el conjunto de pruebas sin ningún fallo, estarás listo para agregar un nuevo código a la base de código de Batavia.

Para implementar una máquina virtual de Python completa, Batavia necesita implementar todas las excentricidades del comportamiento de Python. Por ejemplo, Python permite multiplicar una cadena por un número entero, lo que resulta en una cadena duplicada (por ejemplo, ``"foo" * 3`` => ``"foofoofoo"``). El comportamiento de Javascript puede ser muy diferente, dependiendo de las circunstancias - por lo que necesitamos proporcionar una librería que implemente el comportamiento de Python deseado.

Ese ejemplo particular (número de veces de cadena) ya está implementado - puedes ver `la definición de la función __mul __ () <https://github.com/pybee/batavia/blob/master/batavia/types/Str.js>`__. Esto implementa el operador multiplicador. Se implementa en Javascript, pero implementa el comportamiento de Python - para *algunos* tipos de datos.

Si luego examinas `tests/datatypes/test_str.py <https://github.com/pybee/batavia/blob/master/tests/datatypes/test_str.py>`__, verás las pruebas para este comportamiento . Ya hemos escrito una suite de pruebas que intenta realizar cada operación en cada tipo de datos. Sin embargo, todos los nombres enumerados en ese archivo son los ejemplos que se sabe que fallan (porque la implementación no existe todavía). Las pruebas funcionan escribiendo un programa corto que implementa una operación matemática, ejecutando el programa bajo Python normal y ejecutándolo de nuevo bajo Batavia. La prueba pasa cuando las dos ejecuciones producen la misma respuesta.

Por lo tanto, para tu primera contribución de código abierto: Elije una prueba que se encuentre actualmente en el archivo de prueba ``test_str.py`` (por ejemplo, ``test_multiply_float`` es la prueba de multiplicar una cadena por un flotante) y modifica la implementación de Str hasta obtener la misma repuesta del programa de CPython como lo de la versión de Batavia del mismo programa. Esto incluye mensajes de error - si CPython plantea un ``TypeError`` para una operación en particular (por ejemplo, ``"foo" * 3.1415``), entonces Batavia debería producir el mismo mensaje de error también, incluyendo hasta la puntuación del mensaje.

Antes de empezar a trabajar, visita el `tiquete #46 <https://github.com/pybee/batavia/issues/46>`_ y registra la función en la que está trabajando - de esa manera no vamos a terminar con 2 personas trabajando en el mismo problema.

Una vez que hayas escrito tu implementación, ejecuta las pruebas. Si obtienes un "éxito inesperado" en la suite de pruebas, y *no obtienes* ningún fallo, ¡lo has logrado! Elimina la línea del archivo ``test_str.py`` correspondiente a la prueba que has arreglado (porque ya no se espera que la prueba falle) y envía un Pull Request.

¡A celebrar!
----------------

A continuación, destapa una bebida de celebración de tu elección! ¡Eres un colaborador de código abierto!

Mucha suerte - y no puedo esperar para ver tu primera contribución!
---
gutter:

Obtener ayuda
--------------------

Si tienes alguna dificultad con este tutorial, o si hay algo que no entiendes, no olvides - estamos aquí para ayudarte. `Puedes ponerte en contacto con </es/comunidad/obtener-ayuda/>`__ y te ayudaremos, ya sea dando una mejor explicación de lo que se requiere, ayudando a depurar un problema difícil o mostrándote tutoriales que tu puedas requerir.
---
summary: ¿Quieres contribuir a un proyecto de Código Abierto? Batavia es un gran lugar para comenzar.
