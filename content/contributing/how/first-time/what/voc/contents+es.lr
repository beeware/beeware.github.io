_model: page
---
title: Tu primera contribución a VOC
---
body:

Acerca de VOC
--------------------

La idea detrás de VOC es tomar el árbol de sintaxis abstracta de Python, y compilarlo directamente a bytecode de Java. Esto significa que su archivo .py se convertirá en un archivo .class que se puede ejecutar en una máquina virtual Java.

Esto es útil en una serie de formas posibles:

* Escribir aplicaciones de Android
* Escribir plugins para ElasticSearch/Lucene
* Escribir plugins para Minecraft
* Creación de aplicaciones web para situaciones en las que JavaEE es la única plataforma de implementación disponible.

Es similar a Jython en que te permite ejecutar Python en Java; pero es diferente porque no hay runtime "ejecutable" - no es un intérprete de Python escrito en Java; VOC genera bytecode Java que es indistinguible del código que se generó usando `javac`.

Antes de que empieces
------------------------------

En las siguientes instrucciones, vamos a suponer que está familiarizado con `Github y hacer Pull Requests </es/contribuir/como-ayudar/principiantes/github>`__. También vamos a asumir un nivel de Python y Java; si algo descrito aquí no tiene sentido, no te preocupes - estamos más que felices de llenar los vacíos. En este punto, no sabemos lo que no sabes :-)

También vamos a asumir que estás interesado en contribuir con código; si tus intereses/habilidades están en otro lugar (por ejemplo, pruebas, documentación), nos lo puedes hacer saber, y podemos hacer algunas otras sugerencias.

Antes de hacer tu primera contribución, prueba a VOC. Las instrucciones de la guía `Primero pasos <https://voc.readthedocs.io/en/latest/intro/index.html>`__ deberían ser suficientes para empezar. Si te quedas atascado, háznoslo saber y te ayudaremos. Y si te quedas atascado, eso también apuntará a tu primera contribución - averiguar qué instrucciones te habrían hecho *no* quedarte atascado, y contribuir con una actualización al README.

Tu primera contribución
--------------------------------

Una vez que tengas VOC trabajando, estas listo para hacer tu primera contribución de código. La `guía de contribución <https://voc.readthedocs.io/en/latest/internals/contributing.html>`__ te guiará a través del proceso de configuración de tu entorno de desarrollo. Trabajar a través de esa guía hasta que puedas ejecutar la suite de pruebas VOC - una vez que hayas sido capaz de ejecutar el conjunto de pruebas sin ningún tipo de fallos, estás listo para añadir nuevo código a la base de código VOC.

Para que el bytecode de Java se comporte como Python, VOC necesita implementar todas las excentricidades del comportamiento de Python. Por ejemplo, Python permite multiplicar una cadena por un número entero, lo que resulta en una cadena duplicada (por ejemplo, ``"foo" * 3`` => ``"foofoofoo"``). Sin embargo, esto *no se* permite en Java; por lo que necesitamos proporcionar una librería de Java que implemente este comportamiento.

Ese ejemplo particular (número de veces de la cadena) ya está implementado - vea `el código fuente para Str.java <https://github.com/pybee/voc/blob/b35b133ae14843326ca09c77f2cd4cf96b6b8d7d/python/common/org/python/types/Str. java#L424>`__. Esto implementa ``__mul __ ()`` (el método de multiplicación de Python) en un objeto ``Str``. Se implementa en Java, pero implementa el comportamiento de Python.

Si luego miras el código de `test_str.py <https://github.com/pybee/voc/blob/master/tests/datatypes/test_str.py>`__, verás las pruebas para este comportamiento. Ya hemos escrito una suite de pruebas que intenta realizar cada operación en cada tipo de datos. Sin embargo, todos los nombres enumerados en ese archivo son los ejemplos que se sabe que fallan (porque la implementación no existe todavía). Las pruebas funcionan escribiendo un programa corto que implementa una operación matemática, ejecutando el programa bajo Python normal y luego ejecutándolo nuevamente bajo VOC/Java. La prueba pasa cuando las dos ejecuciones producen un resultado idéntica.

Por lo tanto, para tu primera contribución de código abierto: Escoge una prueba que esté actualmente en la lista del archivo de prueba ``test_str.py`` (por ejemplo, test_multiply_float es la prueba de multiplicar una cadena por un número de punto flotante), y modifica la implementación de Str hasta que obtengas la misma salida del programa CPython como lo hace desde la versión VOC compilada del mismo programa. Esto incluye mensajes de error - si CPython plantea un ``TypeError`` para una operación en particular (por ejemplo, ``"foo" * 3.1415``), entonces VOC debería también - y el mensaje de error debería ser el mismo hasta la puntuación.

Antes de comenzar a trabajar, visita el `Ticket # 36 <https://github.com/pybee/voc/issues/36>`__ y registra la función en la que estás trabajando - de esa manera no vamos a terminar con 2 personas trabajando en el mismo.

Una vez que hayas escrito tu implementación, ejecuta las pruebas. Si obtienes un "éxito inesperado" en la suite de pruebas, y *no obtienes* ningún fallo, ¡lo has logrado! Elimina la línea del archivo ``test_str.py`` correspondiente a la prueba que has arreglado (porque ya no se espera que la prueba falle) y envía un Pull Request.

¡A celebrar!
----------------

A continuación, destapa una bebida de celebración de tu elección! ¡Eres un colaborador de código abierto!

Mucha suerte - y no puedo esperar para ver tu primera contribución!
---
summary: ¿Quieres contribuir a un proyecto de Código Abierto? VOC es un gran lugar para comenzar.
---
gutter:

Obtener ayuda
--------------------

Si tienes alguna dificultad con este tutorial, o si hay algo que no entiendes, no olvides - estamos aquí para ayudarte. `Puedes ponerte en contacto con </es/comunidad/obtener-ayuda/>`__ y te ayudaremos, ya sea dando una mejor explicación de lo que se requiere, ayudando a depurar un problema difícil o mostrándote tutoriales que tu puedas requerir.
